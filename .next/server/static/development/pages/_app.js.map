{"version":3,"file":"static\\development\\pages\\_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/dataFetch.js","webpack:///./components/dataMap.js","webpack:///./components/dataRank.js","webpack:///./components/muiComponents.js","webpack:///./pages/_app.js","webpack:///external \"@material-ui/core/AppBar\"","webpack:///external \"@material-ui/core/Container\"","webpack:///external \"@material-ui/core/CssBaseline\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/Paper\"","webpack:///external \"@material-ui/core/Toolbar\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"axios\"","webpack:///external \"country-list\"","webpack:///external \"next/dynamic\"","webpack:///external \"react\"","webpack:///external \"react-dropdown\"","webpack:///external \"react-jvectormap\"","webpack:///external \"recharts\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static\\\\development\\\\pages\\\\_app.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nimport axios from 'axios';\r\n\r\nexport function fetchData(refDate) {\r\n\tif (this.state.selectCountry == 'Thailand')\r\n\t\tthis.callAPIThailand();\r\n\telse if (this.state.fastMode)\r\n\t\tthis.callAPIGlobal(this.state.selectCity,this.state.selectCountry,new Date(refDate.getTime()));\r\n\telse this.callAPIGlobalTimeline(this.state.selectCity,this.state.selectCountry);\r\n}\r\n\r\n\t//For ranking and map functionalities\r\n\t//Only data from one day/file is processed\r\nexport async function callAPIGlobalAll(markDate) {\r\n\t\t\r\n\t\tmarkDate = new Date(markDate.getTime());\r\n\t\t\r\n\t\tlet countries = [];\r\n\t\tlet countriesN = 0;\r\n\t\t\r\n\t\tlet data = new Object();\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\tlet quoteLimit = 0;\r\n\t\t//Workaround for source's formatting inconsistencies\r\n\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\tcityIndex = 2;\r\n\t\t\tcountryIndex = 3;\r\n\t\t\tconIndex = 7;\r\n\t\t\tdeathIndex = 8;\r\n\t\t\trecIndex = 9;\r\n\t\t\tquoteLimit = 2;\r\n\t\t}\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\tconst markDateStr = markDate.toISOString();\r\n\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t//console.log(sourceDate);\r\n\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (lines != '') {\t\t\r\n\t\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\t\tif (lines[i] == '' || ((lines[i].match(/\"/g) || []).length > quoteLimit))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tconst values = lines[i].split(',');\r\n\t\t\t\tconst country = values[countryIndex];\r\n\t\t\t\tconst city = values[cityIndex];\r\n\t\t\t\tlet confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tlet hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tlet deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tlet recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\tif (data[country] != undefined) {\r\n\t\t\t\t\tconfirmed += data[country][\"Confirmed\"];\r\n\t\t\t\t\thospitalized += data[country][\"Hospitalized\"];\r\n\t\t\t\t\tdeaths += data[country][\"Deaths\"];\r\n\t\t\t\t\trecovered += data[country][\"Recovered\"];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata[country] = new Object();\r\n\t\t\t\t\tdata[country].Country = country;\r\n\t\t\t\t\tdata[country].Cities = [];\r\n\t\t\t\t\tdata[country].CitiesN = 0;\r\n\t\t\t\t\tcountries[countriesN] = country;\r\n\t\t\t\t\tcountriesN++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst citiesN = data[country].CitiesN;\r\n\t\t\t\tdata[country].Confirmed = confirmed;\r\n\t\t\t\tdata[country].Hospitalized = hospitalized;\r\n\t\t\t\tdata[country].Deaths = deaths;\r\n\t\t\t\tdata[country].Recovered = recovered;\r\n\t\t\t\tdata[country].RecoveryRate = ((recovered/confirmed) * 100).toFixed(2);\r\n\t\t\t\tdata[country].MortalityRate = ((deaths/confirmed) * 100).toFixed(2);\r\n\t\t\t\tif (city != '') {\r\n\t\t\t\t\tdata[country].Cities[citiesN] = city;\r\n\t\t\t\t\tdata[country].CitiesN = citiesN + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(data);\r\n\t\t\t\r\n\t\t\tconst mapGlobalData = this.processMapGlobalData(countries, data);\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tcountries: countries,\r\n\t\t\t\tglobalData: data,\r\n\t\t\t\tmapGlobalData: mapGlobalData,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Taxing, over 200 days/files must be processed\r\n\t//Somehow sometimes fast, sometimes slow. Cause still unknown.\r\nexport async function callAPIGlobalTimeline(city, country) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tlet dataN = 0;\r\n\t\t\r\n\t\tlet prevConfirmed = 0;\r\n\t\tlet prevHospitalized = 0;\r\n\t\tlet prevDeaths = 0;\r\n\t\tlet prevRecovered = 0;\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tlet markDate = new Date(2020,0,23);\r\n\t\tconst tomorrow = new Date();\r\n\t\ttomorrow.setDate(tomorrow.getDate()+1);\r\n\t\tconst now = tomorrow.getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\t\r\n\t\tlet lastIndex = 1;\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\twhile (markDate.getTime() < now) {\r\n\t\t\tlet lines = '';\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tconsole.log(sourceDate);\r\n\t\t\t//console.log(lastIndex);\r\n\t\t\t\r\n\t\t\t//Workaround for source's formatting inconsistencies\r\n\t\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\t\tcityIndex = 2;\r\n\t\t\t\tcountryIndex = 3;\r\n\t\t\t\tconIndex = 7;\r\n\t\t\t\tdeathIndex = 8;\r\n\t\t\t\trecIndex = 9;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmarkDate.setDate(markDate.getDate()+1);\r\n\t\t\t\r\n\t\t\tif (lines == '')\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconsole.log(lastIndex);\r\n\t\t\tconst date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\tlet values = undefined;\r\n\t\t\tif (lines[lastIndex])\r\n\t\t\t\tvalues = lines[lastIndex].split(',');\r\n\t\t\telse lastIndex = 1;\r\n\t\t\t\r\n\t\t\tif (values == undefined || (city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex]))\r\n\t\t\t{\r\n\t\t\t\tfor (let i=lastIndex+1; i<lines.length; i++) {\r\n\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (values == undefined) {\r\n\t\t\t\t\tfor (let i=1; i<lastIndex; i++) {\r\n\t\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (values != undefined) {\r\n\t\t\t\tconst confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tconst hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tconst deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tconst recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\t\r\n\t\t\t\tdata[dataN] = {\r\n\t\t\t\t\tDate: date,\r\n\t\t\t\t\tConfirmed: confirmed,\r\n\t\t\t\t\tHospitalized: hospitalized,\r\n\t\t\t\t\tDeaths: deaths,\r\n\t\t\t\t\tRecovered: recovered,\r\n\t\t\t\t\tNewConfirmed: confirmed - prevConfirmed,\r\n\t\t\t\t\tNewHospitalized: hospitalized - prevHospitalized,\r\n\t\t\t\t\tNewDeaths: deaths - prevDeaths,\r\n\t\t\t\t\tNewRecovered: recovered - prevRecovered,\r\n\t\t\t\t}\r\n\t\t\t\tprevConfirmed = confirmed;\r\n\t\t\t\tprevHospitalized = hospitalized;\r\n\t\t\t\tprevDeaths = deaths;\r\n\t\t\t\tprevRecovered = recovered;\r\n\t\t\t\tdataN++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(data);\r\n\t\t\r\n\t\tthis.processData(sourceRef, data);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//No streak data or timeline functionality\r\n\t//Only data from two days/files is processed\r\nexport async function\tcallAPIGlobal(city, country, markDate, process = true) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tdata[0] = {\r\n\t\t\tDate: '',\r\n\t\t\tConfirmed: 0,\r\n\t\t\tHospitalized: 0,\r\n\t\t\tDeaths: 0,\r\n\t\t\tRecovered: 0,\r\n\t\t\tRecoveryRate: 0,\r\n\t\t\tMortalityRate: 0,\r\n\t\t\tNewConfirmed: 0,\r\n\t\t\tNewHospitalized: 0,\r\n\t\t\tNewDeaths: 0,\r\n\t\t\tNewRecovered: 0,\r\n\t\t};\r\n\t\tconst thisData = data[0];\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\twhile (lines == '') {\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tmarkDate.setDate(markDate.getDate()-1);\r\n\t\t\t//console.log(sourceDate);\r\n\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t\tthisData.Date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\tif ((lines[i].match(/\"/g) || []).length > 2)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst values = lines[i].split(',');\r\n\t\t\tif ((city != '' && city != values[2]) || (country != '' && country != values[3]))\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\r\n\t\t\tconst deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\r\n\t\t\tconst recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\r\n\t\t\tthisData.Confirmed = confirmed;\r\n\t\t\tthisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\r\n\t\t\tthisData.Deaths = deaths;\r\n\t\t\tthisData.Recovered = recovered;\r\n\t\t\tthisData.RecoveryRate = (recovered/confirmed) * 100;\r\n\t\t\tthisData.MortalityRate = (deaths/confirmed) * 100;\r\n\t\t}\r\n\t\t\r\n\t\tif (process) {\r\n\t\t\tconst prevData = await this.callAPIGlobal(city, country, markDate, false);\r\n\t\t\tthisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\r\n\t\t\tthisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\r\n\t\t\tthisData.NewDeaths = thisData.Deaths - prevData.Deaths;\r\n\t\t\tthisData.NewRecovered = thisData.Recovered - prevData.Recovered;\r\n\t\t\t\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(sourceRef, data, false);\r\n\t\t\t\r\n\t\t}\r\n\t\treturn thisData;\r\n\t}\r\n\t\r\n\t//For when Thailand is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Local scoped source, data from over 200 days are stored within only one file\r\nexport async function\tcallAPIThailand() {\r\n\t\t\r\n\t\tconst source = 'https://covid19.th-stat.com/api/open/timeline';\r\n\t\tlet data = [];\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(source, {\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tdata = response.data['Data'];\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (data != undefined) {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(source, data);\r\n\t\t}\r\n\t}\r\n\t\r\nexport function clearAxiosCalls() {\r\n\t\tthis.cancelSource.cancel('Axios operations cleared');\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t}\r\n\r\nexport function getLastDate(type, data) {\r\n\tfor (let i=data.length-1; i>=0; i--) {\r\n\t\tif (data[i][type] != 0)\r\n\t\t\treturn data[i]['Date'];\r\n\t}\r\n}\r\n\r\nexport function getDateDiff(date) {\r\n\tlet now = (new Date()).getTime();\r\n\treturn Math.floor((now - (new Date(date)).getTime())/86400000);\r\n}\r\n\r\nexport function processData(source, data, hasTimeline = true) {\r\n\tif (data.length <= 0)\r\n\t\treturn;\r\n\t\r\n\tconst lastData = data.slice(-1)[0];\r\n\tconst dataReformatted = data.slice().map(d => {\r\n\t\treturn (\r\n\t\t\tObject.assign({},d,{\r\n\t\t\t\tDate: d.Date.slice(3,6) + d.Date.slice(0,2)\r\n\t\t\t})\r\n\t\t);\r\n\t});\r\n\t\r\n\tconst lastUpdated = lastData['Date'];\r\n\tlet lastConfirmedFormatted = 0;\r\n\tlet lastDeathFormatted = 0;\r\n\tlet noConfirmedStreak = 0;\r\n\tlet noDeathStreak = 0;\r\n\r\n\tif (hasTimeline) {\r\n\t\tconst lastConfirmed = this.getLastDate('NewConfirmed',data);\r\n\t\tconst lastDeath = this.getLastDate('NewDeaths',data);\r\n\t\tlastConfirmedFormatted = lastConfirmed.slice(3,6) + lastConfirmed.slice(0,3) + lastConfirmed.slice(6);\r\n\t\tlastDeathFormatted = lastDeath.slice(3,6) + lastDeath.slice(0,3) + lastDeath.slice(6);\r\n\t\tnoConfirmedStreak = this.getDateDiff(lastConfirmed);\r\n\t\tnoDeathStreak = this.getDateDiff(lastDeath);\r\n\t}\r\n\t\r\n\tthis.setState({\r\n\t\thasData: true,\r\n\t\thasTimeline: hasTimeline,\r\n\t\tdataTimeline: dataReformatted,\r\n\t\tdataTimeline15: dataReformatted.slice(1).slice(-15),\r\n\t\tdata_text: {\r\n\t\t\tsource: source,\r\n\t\t\tupdatedDate: lastUpdated.slice(3,6) + lastUpdated.slice(0,3) + lastUpdated.slice(6),\r\n\t\t\tconfirmed: lastData['Confirmed'],\r\n\t\t\thospitalized: lastData['Hospitalized'],\r\n\t\t\tdeaths: lastData['Deaths'],\r\n\t\t\trecovered: lastData['Recovered'],\r\n\t\t\tnewConfirmed: lastData['NewConfirmed'],\r\n\t\t\tnewHospitalized: lastData['NewHospitalized'],\r\n\t\t\tnewDeaths: lastData['NewDeaths'],\r\n\t\t\tnewRecovered: lastData['NewRecovered'],\r\n\t\t},\r\n\t\tdata_pie: [\r\n\t\t\t{ name: 'Hospitalized', value: lastData['Hospitalized'] },\r\n\t\t\t{ name: 'Deaths', value: lastData['Deaths'] },\r\n\t\t\t{ name: 'Recovered', value: lastData['Recovered'] },\r\n\t\t],\r\n\t\tlastConfirmed: lastConfirmedFormatted,\r\n\t\tlastDeath: lastDeathFormatted,\r\n\t\tnoConfirmedStreak: noConfirmedStreak,\r\n\t\tnoDeathStreak: noDeathStreak,\r\n\t\trateRecovery: (100*lastData['Recovered']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t\trateDeath: (100*lastData['Deaths']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t});\r\n}\r\n\t\r\n","\r\nexport function countryEncodeAssist(country, countriesName) {\r\n\tif (!countriesName.includes(country)) {\r\n\t\tif (country == \"Bolivia\")\r\n\t\t\tcountry = \"Bolivia, Plurinational State of\";\r\n\t\telse if (country == \"Brunei\")\r\n\t\t\tcountry = \"Brunei Darussalam\";\r\n\t\telse if (country == \"Burma\")\r\n\t\t\tcountry = \"Myanmar\";\r\n\t\telse if (country == \"Congo (Brazzaville)\")\r\n\t\t\tcountry = \"Congo\";\r\n\t\telse if (country == \"Congo (Kinshasa)\")\r\n\t\t\tcountry = \"Congo, Democratic Republic of the\";\r\n\t\telse if (country == \"Cote d'Ivoire\")\r\n\t\t\tcountry = \"Côte d'Ivoire\";\r\n\t\telse if (country == \"Iran\")\r\n\t\t\tcountry = \"Iran, Islamic Republic of\";\r\n\t\telse if (country == \"Kosovo\")\r\n\t\t\tcountry = \"Serbia\";\r\n\t\telse if (country == \"Laos\")\r\n\t\t\tcountry = \"Lao People's Democratic Republic\";\r\n\t\telse if (country == \"Moldova\")\r\n\t\t\tcountry = \"Moldova, Republic of\";\r\n\t\telse if (country == \"Russia\")\r\n\t\t\tcountry = \"Russian Federation\";\r\n\t\telse if (country == \"Syria\")\r\n\t\t\tcountry = \"Syrian Arab Republic\";\r\n\t\telse if (country == \"Taiwan*\")\r\n\t\t\tcountry = \"Taiwan, Province of China\";\r\n\t\telse if (country == \"Tanzania\")\r\n\t\t\tcountry = \"Tanzania, United Republic of\";\r\n\t\telse if (country == \"US\")\r\n\t\t\tcountry = \"United States of America\";\r\n\t\telse if (country == \"United Kingdom\")\r\n\t\t\tcountry = \"United Kingdom of Great Britain and Northern Ireland\";\r\n\t\telse if (country == \"Venezuela\")\r\n\t\t\tcountry = \"Venezuela, Bolivarian Republic of\";\r\n\t\telse if (country == \"Vietnam\")\r\n\t\t\tcountry = \"Viet Nam\";\r\n\t\telse if (country == \"West Bank and Gaza\")\r\n\t\t\tcountry = \"Palestine, State of\";\r\n\t\telse return undefined;\r\n\t}\r\n\t\r\n\tconst { getCode } = require('country-list');\r\n\treturn getCode(country);\r\n}\r\n\r\nexport function countryDecodeAssist(code) {\r\n\tconst { getName, getNames } = require('country-list');\r\n\tconst countriesName = getNames();\r\n\tlet country = getName(code);\r\n\t\r\n\tif (country == \"Bolivia, Plurinational State of\")\r\n\t\tcountry = \"Bolivia\";\r\n\telse if (country == \"Brunei Darussalam\")\r\n\t\tcountry = \"Brunei\";\r\n\telse if (country == \"Myanmar\")\r\n\t\tcountry = \"Burma\";\r\n\telse if (country == \"Congo\")\r\n\t\tcountry = \"Congo (Brazzaville)\";\r\n\telse if (country == \"Congo, Democratic Republic of the\")\r\n\t\tcountry = \"Congo (Kinshasa)\";\r\n\telse if (country == \"Côte d'Ivoire\")\r\n\t\tcountry = \"Cote d'Ivoire\";\r\n\telse if (country == \"Iran, Islamic Republic of\")\r\n\t\tcountry = \"Iran\";\r\n\telse if (country == \"Serbia\")\r\n\t\tcountry = \"Kosovo\";\r\n\telse if (country == \"Lao People's Democratic Republic\")\r\n\t\tcountry = \"Laos\";\r\n\telse if (country == \"Moldova, Republic of\")\r\n\t\tcountry = \"Moldova\";\r\n\telse if (country == \"Russian Federation\")\r\n\t\tcountry = \"Russia\";\r\n\telse if (country == \"Syrian Arab Republic\")\r\n\t\tcountry = \"Syria\";\r\n\telse if (country == \"Taiwan\")\r\n\t\tcountry = \"Taiwan*\";\r\n\telse if (country == \"Tanzania, United Republic of\")\r\n\t\tcountry = \"Tanzania\";\r\n\telse if (country == \"United States of America\")\r\n\t\tcountry = \"US\";\r\n\telse if (country == \"United Kingdom of Great Britain and Northern Ireland\")\r\n\t\tcountry = \"United Kingdom\";\r\n\telse if (country == \"Venezuela, Bolivarian Republic of\")\r\n\t\tcountry = \"Venezuela\";\r\n\telse if (country == \"Viet Nam\")\r\n\t\tcountry = \"Vietnam\";\r\n\telse if (country == \"Palestine, State of\")\r\n\t\tcountry = \"West Bank and Gaza\";\r\n\r\n\treturn country;\r\n}\r\n\r\nexport function processMapGlobalData(countries, globalData) {\r\n\tconst { getCode, getNames } = require('country-list');\r\n\tconst countriesName = getNames();\r\n\tconst mapGlobalData = {\r\n\t\tConfirmed: {},\r\n\t\tHospitalized: {},\r\n\t\tDeaths: {},\r\n\t\tRecovered: {},\r\n\t\tRecoveryRate: {},\r\n\t\tMortalityRate: {},\r\n\t};\r\n\r\n\tfor (let i=0; i<countries.length; i++) {\r\n\t\tconst country = countries[i];\r\n\t\tconst data = globalData[country];\r\n\t\t\r\n\t\tconst code = this.countryEncodeAssist(country,countriesName);\r\n\t\tif (code == undefined)\r\n\t\t\tcontinue;\r\n\t\t\r\n\t\tmapGlobalData['Confirmed'][code] = data['Confirmed'];\r\n\t\tmapGlobalData['Hospitalized'][code] = data['Hospitalized'];\r\n\t\tmapGlobalData['Deaths'][code] = data['Deaths'];\r\n\t\tmapGlobalData['Recovered'][code] = data['Recovered'];\r\n\t\tmapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\r\n\t\tmapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\r\n\t}\r\n\t//console.log(mapGlobalData);\r\n\treturn mapGlobalData;\r\n}","\r\nexport function countryCompare(category) {\r\n\treturn function innerSort(a,b) {\r\n\t\tlet valA = a[category];\r\n\t\tlet valB = b[category];\r\n\t\tif (typeof valA == \"string\") {\r\n\t\t\tvalA = parseInt(valA);\r\n\t\t\tvalB = parseInt(valB);\r\n\t\t}\r\n\t\t\r\n\t\tif (valA > valB)\r\n\t\t\treturn -1;\r\n\t\telse if (valA < valB)\r\n\t\t\treturn 1;\r\n\t\telse return 0;\r\n\t};\r\n}\r\n\r\nexport function globalRankSelect(ranking, country) {\r\n\treturn ranking.findIndex(x => x.Country == country) + 1;\r\n}\r\n\r\nexport function globalRankTopTen(ranking) {\r\n\treturn ranking.slice(0,10);\r\n}\r\n\r\nexport function globalRanking(category) {\r\n\tconst countries = Object.values(this.state.globalData);\r\n\tcountries.sort(this.countryCompare(category));\r\n\t//console.log(countries);\r\n\tthis.setState({\r\n\t\trankSelect: this.globalRankSelect(countries, this.state.selectCountry),\r\n\t\trankTopTen: this.globalRankTopTen(countries),\r\n\t});\r\n}\r\n\r\nexport function globalRankingHeading(category) {\r\n\tif (category == 'Confirmed')\r\n\t\treturn \"Confirmed Cases Count\";\r\n\telse if (category == 'Hospitalized')\r\n\t\treturn \"Active Cases Count\";\r\n\telse if (category == 'Deaths')\r\n\t\treturn \"Deceased Cases Count\";\r\n\telse if (category == 'Recovered')\r\n\t\treturn \"Recovered Cases Count\";\r\n\telse if (category == 'RecoveryRate')\r\n\t\treturn \"Recovery Rate\";\r\n\telse if (category == 'MortalityRate')\r\n\t\treturn \"Mortality Rate\";\r\n}\r\n","\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport {withStyles, createMuiTheme, MuiThemeProvider, AppBar, Toolbar,\r\n\tTypography, CssBaseline, Container, Paper, Grid}\r\n\r\nexport const styles = theme => ({\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n\t\tbackgroundColor: \"#FFFEFE\",\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: theme.spacing(2),\r\n  },\r\n\troot: {\r\n    backgroundColor: \"#000000\",\r\n  },\r\n\tformControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n","\r\nimport React from 'react';\r\n\r\n//MUI\r\nimport {withStyles, createMuiTheme, MuiThemeProvider, AppBar, Toolbar,\r\n\tTypography, CssBaseline, Container, Paper, Grid,\r\n\tstyles, darkTheme} from '../components/muiComponents.js';\r\n\r\n//DROPDOWN\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n//RECHARTS\r\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, \r\n  Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, \r\n  Pie, Cell, } from 'recharts';\r\n\t\r\n//AXIOS DATA\r\nimport axios from 'axios';\r\nimport {fetchData, callAPIGlobalAll, callAPIGlobalTimeline,\r\n\tcallAPIGlobal, callAPIThailand, clearAxiosCalls,\r\n\tgetLastDate, getDateDiff, processData} from '../components/dataFetch.js';\r\n\t\r\n//RANKING\r\nimport {countryCompare, globalRankSelect, globalRankTopTen,\r\n\tglobalRanking, globalRankingHeading} from '../components/dataRank.js';\r\n\t\r\n//JVECTORMAP\r\nimport {countryEncodeAssist, countryDecodeAssist, processMapGlobalData} from '../components/dataMap.js';\r\nimport '../public/jquery-jvectormap.css'\r\nimport dynamic from 'next/dynamic'\r\nexport const VectorMap = dynamic(\r\n  () => import(\"react-jvectormap\").then((m) => m.VectorMap),\r\n  { ssr: false, }\r\n);\r\n\t\r\n//----------------------------------------------------------------\r\n\r\nconst cBlue = '#20A0E0';\r\nconst cOrange = '#F7B860';\r\nconst cRed = '#E04040';\r\nconst cGreen = '#80D080';\r\nconst cDRed = '#BB0A1E';\r\n\r\nclass App extends React.Component {\r\n\t\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasData: false,\r\n\t\t\tselectCountry: 'Thailand',\r\n\t\t\tselectCity: 'Overall',\r\n\t\t\tcountries: [],\r\n\t\t\tglobalData: [],\r\n\t\t\tfastMode: true,\r\n\t\t\thasTimeline: true,\r\n\t\t\tdataTimeline: [],\r\n\t\t\tdataTimeline15: [],\r\n\t\t\tdata_text: {\r\n\t\t\t\tupdatedDate: '',\r\n\t\t\t\tconfirmed: '',\r\n\t\t\t\thospitalized: '',\r\n\t\t\t\tdeaths: '',\r\n\t\t\t\trecovered: '',\r\n\t\t\t\tnewConfirmed: '',\r\n\t\t\t\tnewHospitalized: '',\r\n\t\t\t\tnewDeaths: '',\r\n\t\t\t\tnewRecovered: '',\r\n\t\t\t},\r\n\t\t\tdata_pie: [{}],\r\n\t\t\tlastConfirmed: 0,\r\n\t\t\tlastDeath: 0,\r\n\t\t\tnoConfirmedStreak: 0,\r\n\t\t\tnoDeathStreak: 0,\r\n\t\t\trateRecovery: 0,\r\n\t\t\trateDeath: 0,\r\n\t\t\tshowGraph: false,\r\n\t\t\tselectCategory: 'Hospitalized',\r\n\t\t\trankSelect: -1,\r\n\t\t\trankTopTen: [],\r\n\t\t\tmapGlobalData: null,\r\n\t\t};\r\n\t\t\r\n\t\tthis.referenceDate = new Date();\r\n\t\tthis.referenceDate.setDate(this.referenceDate.getDate()-1);\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t\t\r\n\t\tconst { getCode, getName, getData } = require(\"country-list\");\r\n\t\tthis.getCountryCode = getCode;\r\n\t\tthis.getCountryName = getName;\r\n\t\tthis.getCountryData = getData;\r\n\t\t\r\n\t\t//Binding dataFetch functions\r\n\t\tthis.fetchData = fetchData.bind(this);\r\n\t\tthis.callAPIGlobalAll = callAPIGlobalAll.bind(this);\r\n\t\tthis.callAPIGlobalTimeline = callAPIGlobalTimeline.bind(this);\r\n\t\tthis.callAPIGlobal = callAPIGlobal.bind(this);\r\n\t\tthis.callAPIThailand = callAPIThailand.bind(this);\r\n\t\tthis.clearAxiosCalls = clearAxiosCalls.bind(this);\r\n\t\tthis.getLastDate = getLastDate.bind(this);\r\n\t\tthis.getDateDiff = getDateDiff.bind(this);\r\n\t\tthis.processData = processData.bind(this);\r\n\t\t//Binding dataRank functions\r\n\t\tthis.countryCompare = countryCompare.bind(this);\r\n\t\tthis.globalRankSelect = globalRankSelect.bind(this);\r\n\t\tthis.globalRankTopTen = globalRankTopTen.bind(this);\r\n\t\tthis.globalRanking = globalRanking.bind(this);\r\n\t\tthis.globalRankingHeading = globalRankingHeading.bind(this);\r\n\t\t//Binding dataRank functions\r\n\t\tthis.countryEncodeAssist = countryEncodeAssist.bind(this);\r\n\t\tthis.countryDecodeAssist = countryDecodeAssist.bind(this);\r\n\t\tthis.processMapGlobalData = processMapGlobalData.bind(this);\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t\tthis.callAPIGlobalAll(this.referenceDate);\r\n\t\tthis.fetchData(this.referenceDate);\r\n  }\r\n\t\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif ((prevState.selectCountry != this.state.selectCountry) ||\r\n     \t\t(prevState.selectCity != this.state.selectCity) ||\r\n\t\t\t\t(prevState.fastMode != this.state.fastMode))\r\n\t\t{\r\n\t\t\tthis.clearAxiosCalls();\r\n\t\t\tthis.fetchData(this.referenceDate);\r\n\t\t}\r\n\t\t\r\n\t\tif (prevState.selectCategory != this.state.selectCategory || prevState.selectCountry != this.state.selectCountry)\r\n\t\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\trenderSourceInfo() {\r\n\t\tconst {data_text} = this.state;\r\n\t\treturn (\r\n\t\t\t<MuiThemeProvider theme={darkTheme}>\r\n\t\t\t\t<Typography align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\tLast updated: {data_text.updatedDate}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant=\"subtitle2\" align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t<a\r\n\t\t\t\t\thref={data_text.source}\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\"> {\r\n\t\t\t\t\t\tdata_text.source\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Typography>\r\n\t\t\t</MuiThemeProvider>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderFetchControls(which) {\r\n\t\tif (which == 0) {\t//Button Fast/Full Mode Select\r\n\t\t\tconst {fastMode} = this.state;\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t<br/><br/>\r\n\t\t\t\t<button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\theight: '32px',\r\n\t\t\t\t\t\twidth : '128px',\r\n\t\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\t\tcolor: (fastMode ? cDRed : 'blue')\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={() => this.setState({ fastMode: !fastMode })}\r\n\t\t\t\t>\r\n\t\t\t\t\t<b>{fastMode ? \"FAST MODE\" : \"FULL MODE\"}</b>\r\n\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if (which == 1) {\t//Dropdown Country Select\r\n\t\t\tconst {countries, selectCountry} = this.state;\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t<br/><br/>\r\n\t\t\t\t<Dropdown options={countries} value={selectCountry}\r\n\t\t\t\t\tonChange={(select) => this.setState({ selectCountry: select.value, selectCity: 'Overall' })}\r\n\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\t//Dropdown City Select\r\n\t\t\tconst {selectCountry, selectCity} = this.state;\r\n\t\t\tconst selectedCountryData = this.state.globalData[selectCountry];\r\n\t\t\tlet cityChoice = [\"Overall\"];\r\n\t\t\tif (selectedCountryData != undefined && selectedCountryData.CitiesN != 0) {\r\n\t\t\t\tcityChoice = selectedCountryData.Cities.slice(0);\r\n\t\t\t\tcityChoice.splice(0,0,\"Overall\");\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t<br/><br/>\r\n\t\t\t\t<Dropdown options={cityChoice} value={selectCity}\r\n\t\t\t\t\tonChange={(select) => this.setState({ selectCity:select.value })}\r\n\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\trenderNumbers(which) {\r\n\t\tconst {data_text} = this.state;\r\n\t\tconst {classes} = this.props;\r\n\t\tif (which == 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Typography style={{ color: 'steelblue' }}><b>Confirmed</b></Typography>\r\n\t\t\t\t\t<Typography style={{ color: cBlue }} variant=\"h3\">{data_text.confirmed.toLocaleString()}</Typography>\r\n\t\t\t\t\t<Typography style={{ color: 'steelblue' }} variant=\"h5\">+ {data_text.newConfirmed.toLocaleString()}</Typography>\r\n\t\t\t\t</Paper>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if (which == 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Typography style={{ color: 'goldenrod' }}><b>Hospitalized</b></Typography>\r\n\t\t\t\t\t<Typography style={{ color: cOrange }} variant=\"h3\">{data_text.hospitalized.toLocaleString()}</Typography>\r\n\t\t\t\t\t<Typography style={{ color: 'goldenrod' }} variant=\"h5\">\r\n\t\t\t\t\t\t{(data_text.newHospitalized >= 0) ? '+' : '-'} {Math.abs(data_text.newHospitalized).toLocaleString()}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Paper>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse if (which == 2) {\r\n\t\t\treturn (\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Typography style={{ color: 'fireBrick' }}><b>Deaths</b></Typography>\r\n\t\t\t\t\t<Typography style={{ color: cRed }} variant=\"h3\">{data_text.deaths.toLocaleString()}</Typography>\r\n\t\t\t\t\t<Typography style={{ color: 'fireBrick' }} variant=\"h5\">+ {data_text.newDeaths.toLocaleString()}</Typography>\r\n\t\t\t\t</Paper>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t<Typography style={{ color: 'green' }}><b>Recovered</b></Typography>\r\n\t\t\t\t\t<Typography style={{ color: cGreen }} variant=\"h3\">{data_text.recovered.toLocaleString()}</Typography>\r\n\t\t\t\t\t<Typography style={{ color: 'green' }} variant=\"h5\">+ {data_text.newRecovered.toLocaleString()}</Typography>\r\n\t\t\t\t</Paper>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\trenderStreaks() {\r\n\t\tconst {classes} = this.props;\r\n\t\treturn (\r\n\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\tLast confirmed: {this.state.lastConfirmed} ({this.state.noConfirmedStreak} days ago)\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\tLast death: {this.state.lastDeath} ({this.state.noDeathStreak} days ago)\r\n\t\t\t\t</Typography>\r\n\t\t\t</Paper>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderRates() {\r\n\t\tconst {classes} = this.props;\r\n\t\treturn (\r\n\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t<Typography variant='h6' style={{ color: 'green' }}>\r\n\t\t\t\t\tRecovery Rate: {this.state.rateRecovery}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography variant='h6' style={{ color: cDRed }}>\r\n\t\t\t\t\tMortality Rate: {this.state.rateDeath}\r\n\t\t\t\t</Typography>\r\n\t\t\t</Paper>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderGraphButton() {\r\n\t\tconst {classes} = this.props;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<button\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: '32px',\r\n\t\t\t\t\twidth : '144px',\r\n\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\tcolor: (this.state.showGraph ? 'grey' : 'steelblue')\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t>\r\n\t\t\t\tShow/Hide Graphs\r\n\t\t\t</button>\r\n\t\t\t<br/>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderGraphs() {\r\n\t\tconst {classes} = this.props;\r\n\t\tconst {dataTimeline, dataTimeline15, data_pie} = this.state;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<Grid container spacing={2}>\r\n\t\t\t\r\n\t\t\t\t{/*Bar, last 14 days*/}\r\n\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\t\twidth={500}\r\n\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\tdata={dataTimeline15}\r\n\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\"/>\r\n\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t<Bar dataKey=\"NewConfirmed\" fill={cBlue}/>\r\n\t\t\t\t\t\t\t\t<Bar dataKey=\"NewDeaths\" fill={cRed}/>\r\n\t\t\t\t\t\t\t</BarChart>\r\n\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t\t{/*Pie, in total*/}\r\n\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t<PieChart width={400}\theight={400}>\r\n\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t<Pie dataKey=\"value\" isAnimationActive={false} data={data_pie} outerRadius={100} label>\r\n\t\t\t\t\t\t\t\t\t<Cell fill={cOrange} />\r\n\t\t\t\t\t\t\t\t\t<Cell fill={cRed} />\r\n\t\t\t\t\t\t\t\t\t<Cell fill={cGreen} />\r\n\t\t\t\t\t\t\t\t</Pie>\r\n\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t</PieChart>\r\n\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t\t{/*Bar, in total*/}\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={500}>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={dataTimeline}\r\n\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5 }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\" />\r\n\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Confirmed\" stroke={cBlue} dot={false} />\r\n\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Hospitalized\" stroke={cOrange} dot={false} />\r\n\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Deaths\" stroke={cRed} dot={false} />\r\n\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Recovered\" stroke={cGreen} dot={false} />\r\n\t\t\t\t\t\t\t</LineChart>\r\n\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t{/*Hide Graph Button*/}\r\n\t\t\t<br/>\r\n\t\t\t<button\r\n\t\t\t\tstyle={{ height: '32px', width : '144px', float: 'right', color: 'grey' }}\r\n\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t>\r\n\t\t\t\tHide Graphs\r\n\t\t\t</button>\r\n\t\t\t<br/><br/>\r\n\t\t\t\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderRankingHeader() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<Typography variant='h5' style={{ color: cRed }}>\r\n\t\t\t\t<b>Global Ranking based on:</b>\r\n\t\t\t</Typography>\r\n\t\t\t<Typography variant='h5' style={{ color: cDRed }}>\r\n\t\t\t\t{this.globalRankingHeading(this.state.selectCategory)}\r\n\t\t\t</Typography>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderCategoryDropdown() {\r\n\t\tconst categoryChoice = ['Confirmed', 'Hospitalized', 'Deaths', 'Recovered', 'RecoveryRate', 'MortalityRate'];\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<br/>\r\n\t\t\t<Dropdown options={categoryChoice} value={'Hospitalized'}\r\n\t\t\t\tonChange={(select) => this.setState({ selectCategory: select.value})}\r\n\t\t\t/>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderRanking() {\r\n\t\tif (this.state.rankSelect < 0)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tconst {classes} = this.props;\r\n\t\tconst {selectCountry, selectCategory} = this.state;\r\n\t\tlet rankSuffix = \" cases\";\r\n\t\tif ((selectCategory == 'RecoveryRate') || (selectCategory == 'MortalityRate'))\r\n\t\t\trankSuffix = \"%\";\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<Grid item xs={3}>\r\n\t\t\t\t<Grid container spacing={2} direction='column'>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t<Typography align='center'>\r\n\t\t\t\t\t\t\t\t<b>Rank {this.state.rankSelect}. {selectCountry} - {this.state.globalData[selectCountry][selectCategory]}{rankSuffix}</b>\r\n\t\t\t\t\t\t\t\t<br/>out of {this.state.countries.length} countries\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t<b>Top 10 Countries</b><br/>\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t\t\t{this.state.rankTopTen.map((c, i) => (\r\n\t\t\t\t\t\t\t\t<><b>{i+1}.</b> {c.Country} - {c[selectCategory]}{rankSuffix}<br/></>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderMap() {\r\n\t\tif (this.state.mapGlobalData == null)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tconst handleClick = (e, code) => {\r\n\t\t\tconst country = this.countryDecodeAssist(code);\r\n\t\t\tif (this.state.countries.includes(country))\r\n\t\t\t\tthis.setState({ selectCountry: country, selectCity: 'Overall'});\r\n\t\t};\r\n\r\n\t\tconst category = this.state.selectCategory;\r\n\t\tconst data = this.state.mapGlobalData;\r\n\t\tconst mapData = data[category];\r\n\t\t//console.log(mapData);\r\n\r\n\t\tlet minColor = \"#FFFFFF\";\r\n\t\tlet maxColor = cRed;\r\n\t\tif (category == \"Recovered\" || category == \"RecoveryRate\")\r\n\t\t\tmaxColor = cBlue;\r\n\r\n\t\tlet normFunction = \"polynomial\";\r\n\t\tif (category == \"RecoveryRate\" || category == \"MortalityRate\")\r\n\t\t\tnormFunction = \"linear\";\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<VectorMap\r\n\t\t\t\t\tmap={\"world_mill\"}\r\n\t\t\t\t\tbackgroundColor=\"#000000\"//\"transparent\" //change it to ocean blue: #0077be\r\n\t\t\t\t\tzoomOnScroll={false}\r\n\t\t\t\t\tcontainerStyle={{\r\n\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\theight: \"520px\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionClick={handleClick}\r\n\t\t\t\t\tcontainerClassName=\"map\"\r\n\t\t\t\t\tregionStyle={{\r\n\t\t\t\t\t\tinitial: {\r\n\t\t\t\t\t\t\tfill: \"#A0A0A0\",\r\n\t\t\t\t\t\t\t\"fill-opacity\": 1,\r\n\t\t\t\t\t\t\tstroke: \"white\",\r\n\t\t\t\t\t\t\t\"stroke-width\": 0.2,\r\n\t\t\t\t\t\t\t\"stroke-opacity\": 1\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\thover: {\r\n\t\t\t\t\t\t\t\"fill-opacity\": 0.75,\r\n\t\t\t\t\t\t\tcursor: \"pointer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tselected: {},\r\n\t\t\t\t\t\tselectedHover: {}\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tregionsSelectable={false}\r\n\t\t\t\t\tseries={{\r\n\t\t\t\t\t\tregions: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvalues: mapData, //this is your data\r\n\t\t\t\t\t\t\t\tscale: [minColor, maxColor], //your color game's here\r\n\t\t\t\t\t\t\t\tnormalizeFunction: normFunction\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionTipShow={(event, label, code) => {\r\n\t\t\t\t\t\tlabel.html(\r\n\t\t\t\t\t\t\t'<b><i>'+label.html()+'</i></b></br>'+\r\n\t\t\t\t\t\t\t'Confirmed: '+data['Confirmed'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Hospitalized: '+data['Hospitalized'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Deaths: '+data['Deaths'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovered: '+data['Recovered'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovery rate: '+data['RecoveryRate'][code]+'%'+'</br>'+\r\n\t\t\t\t\t\t\t'Mortality rate: '+data['MortalityRate'][code]+'%'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif (!this.state.hasData)\r\n\t\t\treturn \"ERROR: Cannot fetch data\";\r\n\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<CssBaseline/>\r\n\t\t\t\t\r\n\t\t\t\t{/* ******************************** Title Bar ******************************** */}\r\n\t\t\t\t<AppBar style={{background: cDRed}}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Typography variant=\"h4\" className={classes.title} align=\"center\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<div className={classes.appBarSpacer}/>\r\n\t\t\t\t\r\n\t\t\t\t<Container>\r\n\t\t\t\t\r\n\t\t\t\t\t{/* ******************************** Top Section ******************************** */}\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t{/* -- Source Info -- */}\r\n\t\t\t\t\t\t<Grid item xs={4}>{this.renderSourceInfo()}</Grid>\r\n\t\t\t\t\t\t{/* -- Data Fetch Controls -- */}\r\n\t\t\t\t\t\t<Grid item xs={2}>{this.renderFetchControls(0)}</Grid> {/* Fast/Full Button */}\r\n\t\t\t\t\t\t<Grid item xs={3}>{this.renderFetchControls(1)}</Grid> {/* Country Dropdown */}\r\n\t\t\t\t\t\t<Grid item xs={3}>{this.renderFetchControls(2)}</Grid> {/* City Dropdown */}\r\n\t\t\t\t\t\t{/* -- Basic Numbers -- */}\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>{this.renderNumbers(0)}</Grid> {/* Confirmed */}\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>{this.renderNumbers(1)}</Grid> {/* Hospitalized */}\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>{this.renderNumbers(2)}</Grid> {/* Deaths */}\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>{this.renderNumbers(3)}</Grid> {/* Recovered */}\r\n\t\t\t\t\t\t{/* -- Additional Numbers -- */}\r\n\t\t\t\t\t\t{ (this.state.hasTimeline) && (<Grid item xs={6}>{this.renderStreaks()}</Grid>) } {/* Streaks */}\r\n\t\t\t\t\t\t<Grid item xs={ this.state.hasTimeline ? 6 : 12}>{this.renderRates()}</Grid> {/* Rates */}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\r\n\r\n\t\t\t\t\t{/* ******************************** Graphs Section ******************************** */}\r\n\t\t\t\t\t<br/>{ (this.state.hasTimeline) && (this.renderGraphButton())} {/* Show/Hide Graph Button */}\r\n\t\t\t\t\t<br/>{ (this.state.showGraph) && (this.renderGraphs())} {/* Graphs */}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t{/* ******************************** Upper Bottom Section ******************************** */}\r\n\t\t\t\t\t<Grid container spacing={2} justify=\"space-between\" alignItems=\"center\">\r\n\t\t\t\t\t\t<Grid item xs={6}>{this.renderRankingHeader()}</Grid> {/* Ranking Header */}\r\n\t\t\t\t\t\t<Grid item xs={2}>{this.renderCategoryDropdown()}</Grid> {/* Category Dropdown */}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t{/* ******************************** Bottom Section ******************************** */}\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t{this.renderRanking()} {/* Rankings */}\r\n\t\t\t\t\t\t<Grid item xs={9}>{this.renderMap()}</Grid> {/* Map */}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t\t</Container>\r\n\t\t\t\t\r\n\t\t\t\t{/* ******************************** Footer ******************************** */}\r\n\t\t\t\t<footer className={classes.footer}>\r\n\t\t\t\t\t<Paper className={classes.paper} style={{background: \"#8F8080\"}}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard for Tencent Thailand's Internship Project</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography component=\"p\">\r\n\t\t\t\t\t\t\tBy Thanjira S. and Woottipat H.\r\n            </Typography>\r\n          </Paper>\r\n        </footer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(App);","module.exports = require(\"@material-ui/core/AppBar\");","module.exports = require(\"@material-ui/core/Container\");","module.exports = require(\"@material-ui/core/CssBaseline\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/Paper\");","module.exports = require(\"@material-ui/core/Toolbar\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"axios\");","module.exports = require(\"country-list\");","module.exports = require(\"next/dynamic\");","module.exports = require(\"react\");","module.exports = require(\"react-dropdown\");","module.exports = require(\"react-jvectormap\");","module.exports = require(\"recharts\");"],"mappingspGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;;;;;;;;;;;;ACtaA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAuCA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAuCA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAYA;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AA9BA;AAmCA;AACA;AACA;AADA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAmCA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AAbA;AAeA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAHA;AAFA;AASA;AACA;AASA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiriBA;AACA;AAsiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnlBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}