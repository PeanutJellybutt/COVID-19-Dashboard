{"ast":null,"code":"import axios from 'axios';\nexport function fetchData(refDate) {\n  if (this.state.selectCountry == 'Thailand') this.callAPIThailand();else if (this.state.fastMode) this.callAPIGlobal(this.state.selectCity, this.state.selectCountry, new Date(refDate.getTime()));else this.callAPIGlobalTimeline(this.state.selectCity, this.state.selectCountry);\n} //For ranking and map functionalities\n//Only data from one day/file is processed\n\nexport async function callAPIGlobalAll(markDate) {\n  markDate = new Date(markDate.getTime());\n  let countries = [];\n  let countriesN = 0;\n  let data = new Object();\n  const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n  const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n  const formatChange = new Date(2020, 2, 22).getTime();\n  let cityIndex = 0;\n  let countryIndex = 1;\n  let conIndex = 3;\n  let deathIndex = 4;\n  let recIndex = 5;\n  let quoteLimit = 0; //Workaround for source's formatting inconsistencies\n\n  if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n    cityIndex = 2;\n    countryIndex = 3;\n    conIndex = 7;\n    deathIndex = 8;\n    recIndex = 9;\n    quoteLimit = 2;\n  }\n\n  let lines = '';\n  const markDateStr = markDate.toISOString();\n  const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear(); //console.log(sourceDate);\n\n  try {\n    const cancelToken = this.cancelSource.token;\n    const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n      headers: {\n        'Content-Type': 'text/csv'\n      },\n      cancelToken: cancelToken\n    });\n    lines = response.data.split(/\\r?\\n/);\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n\n  if (lines != '') {\n    for (let i = 1; i < lines.length; i++) {\n      if (lines[i] == '' || (lines[i].match(/\"/g) || []).length > quoteLimit) continue;\n      const values = lines[i].split(',');\n      const country = values[countryIndex];\n      const city = values[cityIndex];\n      let confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n      let hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n      let deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n      let recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n\n      if (data[country] != undefined) {\n        confirmed += data[country][\"Confirmed\"];\n        hospitalized += data[country][\"Hospitalized\"];\n        deaths += data[country][\"Deaths\"];\n        recovered += data[country][\"Recovered\"];\n      } else {\n        data[country] = new Object();\n        data[country].Country = country;\n        data[country].Cities = [];\n        data[country].CitiesN = 0;\n        countries[countriesN] = country;\n        countriesN++;\n      }\n\n      const citiesN = data[country].CitiesN;\n      data[country].Confirmed = confirmed;\n      data[country].Hospitalized = hospitalized;\n      data[country].Deaths = deaths;\n      data[country].Recovered = recovered;\n      data[country].RecoveryRate = (recovered / confirmed * 100).toFixed(2);\n      data[country].MortalityRate = (deaths / confirmed * 100).toFixed(2);\n\n      if (city != '') {\n        data[country].Cities[citiesN] = city;\n        data[country].CitiesN = citiesN + 1;\n      }\n    } //console.log(data);\n\n\n    const mapGlobalData = this.processMapGlobalData(countries, data);\n    this.setState({\n      countries: countries,\n      globalData: data,\n      mapGlobalData: mapGlobalData\n    });\n  }\n\n  this.globalRanking(this.state.selectCategory);\n} //When foreign country is selected\n//Provides retrospective data and graph functionalities\n//Taxing, over 200 days/files must be processed\n//Somehow sometimes fast, sometimes slow. Cause still unknown.\n\nexport async function callAPIGlobalTimeline(city, country) {\n  if (city == 'Overall') {\n    city = '';\n  }\n\n  let data = [{}];\n  let dataN = 0;\n  let prevConfirmed = 0;\n  let prevHospitalized = 0;\n  let prevDeaths = 0;\n  let prevRecovered = 0;\n  const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n  const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n  let markDate = new Date(2020, 0, 23);\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const now = tomorrow.getTime();\n  let cityIndex = 0;\n  let countryIndex = 1;\n  let conIndex = 3;\n  let deathIndex = 4;\n  let recIndex = 5;\n  let lastIndex = 1;\n  const formatChange = new Date(2020, 2, 22).getTime();\n\n  while (markDate.getTime() < now) {\n    let lines = '';\n    const markDateStr = markDate.toISOString();\n    const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n    console.log(sourceDate); //console.log(lastIndex);\n    //Workaround for source's formatting inconsistencies\n\n    if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n      cityIndex = 2;\n      countryIndex = 3;\n      conIndex = 7;\n      deathIndex = 8;\n      recIndex = 9;\n    }\n\n    try {\n      const cancelToken = this.cancelSource.token;\n      const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n        headers: {\n          'Content-Type': 'text/csv'\n        },\n        cancelToken: cancelToken\n      });\n      lines = response.data.split(/\\r?\\n/);\n    } catch (err) {\n      console.log(err);\n      return undefined;\n    }\n\n    markDate.setDate(markDate.getDate() + 1);\n    if (lines == '') continue;\n    console.log(lastIndex);\n    const date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n    let values = undefined;\n    if (lines[lastIndex]) values = lines[lastIndex].split(',');else lastIndex = 1;\n\n    if (values == undefined || city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n      for (let i = lastIndex + 1; i < lines.length; i++) {\n        values = lines[i].split(',');\n\n        if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n          values = undefined;\n          continue;\n        }\n\n        lastIndex = i;\n        break;\n      }\n\n      if (values == undefined) {\n        for (let i = 1; i < lastIndex; i++) {\n          values = lines[i].split(',');\n\n          if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n            values = undefined;\n            continue;\n          }\n\n          lastIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (values != undefined) {\n      const confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n      const hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n      const deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n      const recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n      data[dataN] = {\n        Date: date,\n        Confirmed: confirmed,\n        Hospitalized: hospitalized,\n        Deaths: deaths,\n        Recovered: recovered,\n        NewConfirmed: confirmed - prevConfirmed,\n        NewHospitalized: hospitalized - prevHospitalized,\n        NewDeaths: deaths - prevDeaths,\n        NewRecovered: recovered - prevRecovered\n      };\n      prevConfirmed = confirmed;\n      prevHospitalized = hospitalized;\n      prevDeaths = deaths;\n      prevRecovered = recovered;\n      dataN++;\n    }\n  }\n\n  console.log(data);\n  this.processData(sourceRef, data);\n} //When foreign country is selected\n//No streak data or timeline functionality\n//Only data from two days/files is processed\n\nexport async function callAPIGlobal(city, country, markDate, process = true) {\n  if (city == 'Overall') {\n    city = '';\n  }\n\n  let data = [{}];\n  data[0] = {\n    Date: '',\n    Confirmed: 0,\n    Hospitalized: 0,\n    Deaths: 0,\n    Recovered: 0,\n    RecoveryRate: 0,\n    MortalityRate: 0,\n    NewConfirmed: 0,\n    NewHospitalized: 0,\n    NewDeaths: 0,\n    NewRecovered: 0\n  };\n  const thisData = data[0];\n  const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n  const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n  let lines = '';\n\n  while (lines == '') {\n    const markDateStr = markDate.toISOString();\n    const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n    markDate.setDate(markDate.getDate() - 1); //console.log(sourceDate);\n\n    try {\n      const cancelToken = this.cancelSource.token;\n      const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n        headers: {\n          'Content-Type': 'text/csv'\n        },\n        cancelToken: cancelToken\n      });\n      lines = response.data.split(/\\r?\\n/);\n      thisData.Date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n    } catch (err) {\n      console.log(err);\n      return undefined;\n    }\n  }\n\n  for (let i = 1; i < lines.length; i++) {\n    if ((lines[i].match(/\"/g) || []).length > 2) continue;\n    const values = lines[i].split(',');\n    if (city != '' && city != values[2] || country != '' && country != values[3]) continue;\n    const confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\n    const deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\n    const recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\n    thisData.Confirmed = confirmed;\n    thisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\n    thisData.Deaths = deaths;\n    thisData.Recovered = recovered;\n    thisData.RecoveryRate = recovered / confirmed * 100;\n    thisData.MortalityRate = deaths / confirmed * 100;\n  }\n\n  if (process) {\n    const prevData = await this.callAPIGlobal(city, country, markDate, false);\n    thisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\n    thisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\n    thisData.NewDeaths = thisData.Deaths - prevData.Deaths;\n    thisData.NewRecovered = thisData.Recovered - prevData.Recovered; //console.log(data);\n\n    this.processData(sourceRef, data, false);\n  }\n\n  return thisData;\n} //For when Thailand is selected\n//Provides retrospective data and graph functionalities\n//Local scoped source, data from over 200 days are stored within only one file\n\nexport async function callAPIThailand() {\n  const source = 'https://covid19.th-stat.com/api/open/timeline';\n  let data = [];\n\n  try {\n    const cancelToken = this.cancelSource.token;\n    const response = await axios.get(source, {\n      cancelToken: cancelToken\n    });\n    data = response.data['Data'];\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n\n  if (data != undefined) {\n    //console.log(data);\n    this.processData(source, data);\n  }\n}","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/components/dataFetch.js"],"names":["axios","fetchData","refDate","state","selectCountry","callAPIThailand","fastMode","callAPIGlobal","selectCity","Date","getTime","callAPIGlobalTimeline","callAPIGlobalAll","markDate","countries","countriesN","data","Object","sourceRef","sourcePrefix","formatChange","cityIndex","countryIndex","conIndex","deathIndex","recIndex","quoteLimit","lines","markDateStr","toISOString","sourceDate","slice","getFullYear","cancelToken","cancelSource","token","response","get","headers","split","err","console","log","undefined","i","length","match","values","country","city","confirmed","parseInt","hospitalized","deaths","recovered","Country","Cities","CitiesN","citiesN","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","toFixed","MortalityRate","mapGlobalData","processMapGlobalData","setState","globalData","globalRanking","selectCategory","dataN","prevConfirmed","prevHospitalized","prevDeaths","prevRecovered","tomorrow","setDate","getDate","now","lastIndex","date","replace","NewConfirmed","NewHospitalized","NewDeaths","NewRecovered","processData","process","thisData","prevData","source"],"mappings":"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","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nexport function fetchData(refDate) {\r\n\tif (this.state.selectCountry == 'Thailand')\r\n\t\tthis.callAPIThailand();\r\n\telse if (this.state.fastMode)\r\n\t\tthis.callAPIGlobal(this.state.selectCity,this.state.selectCountry,new Date(refDate.getTime()));\r\n\telse this.callAPIGlobalTimeline(this.state.selectCity,this.state.selectCountry);\r\n}\r\n\r\n\t//For ranking and map functionalities\r\n\t//Only data from one day/file is processed\r\nexport async function callAPIGlobalAll(markDate) {\r\n\t\t\r\n\t\tmarkDate = new Date(markDate.getTime());\r\n\t\t\r\n\t\tlet countries = [];\r\n\t\tlet countriesN = 0;\r\n\t\t\r\n\t\tlet data = new Object();\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\tlet quoteLimit = 0;\r\n\t\t//Workaround for source's formatting inconsistencies\r\n\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\tcityIndex = 2;\r\n\t\t\tcountryIndex = 3;\r\n\t\t\tconIndex = 7;\r\n\t\t\tdeathIndex = 8;\r\n\t\t\trecIndex = 9;\r\n\t\t\tquoteLimit = 2;\r\n\t\t}\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\tconst markDateStr = markDate.toISOString();\r\n\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t//console.log(sourceDate);\r\n\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (lines != '') {\t\t\r\n\t\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\t\tif (lines[i] == '' || ((lines[i].match(/\"/g) || []).length > quoteLimit))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tconst values = lines[i].split(',');\r\n\t\t\t\tconst country = values[countryIndex];\r\n\t\t\t\tconst city = values[cityIndex];\r\n\t\t\t\tlet confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tlet hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tlet deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tlet recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\tif (data[country] != undefined) {\r\n\t\t\t\t\tconfirmed += data[country][\"Confirmed\"];\r\n\t\t\t\t\thospitalized += data[country][\"Hospitalized\"];\r\n\t\t\t\t\tdeaths += data[country][\"Deaths\"];\r\n\t\t\t\t\trecovered += data[country][\"Recovered\"];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata[country] = new Object();\r\n\t\t\t\t\tdata[country].Country = country;\r\n\t\t\t\t\tdata[country].Cities = [];\r\n\t\t\t\t\tdata[country].CitiesN = 0;\r\n\t\t\t\t\tcountries[countriesN] = country;\r\n\t\t\t\t\tcountriesN++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst citiesN = data[country].CitiesN;\r\n\t\t\t\tdata[country].Confirmed = confirmed;\r\n\t\t\t\tdata[country].Hospitalized = hospitalized;\r\n\t\t\t\tdata[country].Deaths = deaths;\r\n\t\t\t\tdata[country].Recovered = recovered;\r\n\t\t\t\tdata[country].RecoveryRate = ((recovered/confirmed) * 100).toFixed(2);\r\n\t\t\t\tdata[country].MortalityRate = ((deaths/confirmed) * 100).toFixed(2);\r\n\t\t\t\tif (city != '') {\r\n\t\t\t\t\tdata[country].Cities[citiesN] = city;\r\n\t\t\t\t\tdata[country].CitiesN = citiesN + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(data);\r\n\t\t\t\r\n\t\t\tconst mapGlobalData = this.processMapGlobalData(countries, data);\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tcountries: countries,\r\n\t\t\t\tglobalData: data,\r\n\t\t\t\tmapGlobalData: mapGlobalData,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Taxing, over 200 days/files must be processed\r\n\t//Somehow sometimes fast, sometimes slow. Cause still unknown.\r\nexport async function callAPIGlobalTimeline(city, country) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tlet dataN = 0;\r\n\t\t\r\n\t\tlet prevConfirmed = 0;\r\n\t\tlet prevHospitalized = 0;\r\n\t\tlet prevDeaths = 0;\r\n\t\tlet prevRecovered = 0;\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tlet markDate = new Date(2020,0,23);\r\n\t\tconst tomorrow = new Date();\r\n\t\ttomorrow.setDate(tomorrow.getDate()+1);\r\n\t\tconst now = tomorrow.getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\t\r\n\t\tlet lastIndex = 1;\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\twhile (markDate.getTime() < now) {\r\n\t\t\tlet lines = '';\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tconsole.log(sourceDate);\r\n\t\t\t//console.log(lastIndex);\r\n\t\t\t\r\n\t\t\t//Workaround for source's formatting inconsistencies\r\n\t\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\t\tcityIndex = 2;\r\n\t\t\t\tcountryIndex = 3;\r\n\t\t\t\tconIndex = 7;\r\n\t\t\t\tdeathIndex = 8;\r\n\t\t\t\trecIndex = 9;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmarkDate.setDate(markDate.getDate()+1);\r\n\t\t\t\r\n\t\t\tif (lines == '')\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconsole.log(lastIndex);\r\n\t\t\tconst date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\tlet values = undefined;\r\n\t\t\tif (lines[lastIndex])\r\n\t\t\t\tvalues = lines[lastIndex].split(',');\r\n\t\t\telse lastIndex = 1;\r\n\t\t\t\r\n\t\t\tif (values == undefined || (city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex]))\r\n\t\t\t{\r\n\t\t\t\tfor (let i=lastIndex+1; i<lines.length; i++) {\r\n\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (values == undefined) {\r\n\t\t\t\t\tfor (let i=1; i<lastIndex; i++) {\r\n\t\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (values != undefined) {\r\n\t\t\t\tconst confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tconst hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tconst deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tconst recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\t\r\n\t\t\t\tdata[dataN] = {\r\n\t\t\t\t\tDate: date,\r\n\t\t\t\t\tConfirmed: confirmed,\r\n\t\t\t\t\tHospitalized: hospitalized,\r\n\t\t\t\t\tDeaths: deaths,\r\n\t\t\t\t\tRecovered: recovered,\r\n\t\t\t\t\tNewConfirmed: confirmed - prevConfirmed,\r\n\t\t\t\t\tNewHospitalized: hospitalized - prevHospitalized,\r\n\t\t\t\t\tNewDeaths: deaths - prevDeaths,\r\n\t\t\t\t\tNewRecovered: recovered - prevRecovered,\r\n\t\t\t\t}\r\n\t\t\t\tprevConfirmed = confirmed;\r\n\t\t\t\tprevHospitalized = hospitalized;\r\n\t\t\t\tprevDeaths = deaths;\r\n\t\t\t\tprevRecovered = recovered;\r\n\t\t\t\tdataN++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(data);\r\n\t\t\r\n\t\tthis.processData(sourceRef, data);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//No streak data or timeline functionality\r\n\t//Only data from two days/files is processed\r\nexport async function\tcallAPIGlobal(city, country, markDate, process = true) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tdata[0] = {\r\n\t\t\tDate: '',\r\n\t\t\tConfirmed: 0,\r\n\t\t\tHospitalized: 0,\r\n\t\t\tDeaths: 0,\r\n\t\t\tRecovered: 0,\r\n\t\t\tRecoveryRate: 0,\r\n\t\t\tMortalityRate: 0,\r\n\t\t\tNewConfirmed: 0,\r\n\t\t\tNewHospitalized: 0,\r\n\t\t\tNewDeaths: 0,\r\n\t\t\tNewRecovered: 0,\r\n\t\t};\r\n\t\tconst thisData = data[0];\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\twhile (lines == '') {\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tmarkDate.setDate(markDate.getDate()-1);\r\n\t\t\t//console.log(sourceDate);\r\n\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t\tthisData.Date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\tif ((lines[i].match(/\"/g) || []).length > 2)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst values = lines[i].split(',');\r\n\t\t\tif ((city != '' && city != values[2]) || (country != '' && country != values[3]))\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\r\n\t\t\tconst deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\r\n\t\t\tconst recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\r\n\t\t\tthisData.Confirmed = confirmed;\r\n\t\t\tthisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\r\n\t\t\tthisData.Deaths = deaths;\r\n\t\t\tthisData.Recovered = recovered;\r\n\t\t\tthisData.RecoveryRate = (recovered/confirmed) * 100;\r\n\t\t\tthisData.MortalityRate = (deaths/confirmed) * 100;\r\n\t\t}\r\n\t\t\r\n\t\tif (process) {\r\n\t\t\tconst prevData = await this.callAPIGlobal(city, country, markDate, false);\r\n\t\t\tthisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\r\n\t\t\tthisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\r\n\t\t\tthisData.NewDeaths = thisData.Deaths - prevData.Deaths;\r\n\t\t\tthisData.NewRecovered = thisData.Recovered - prevData.Recovered;\r\n\t\t\t\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(sourceRef, data, false);\r\n\t\t\t\r\n\t\t}\r\n\t\treturn thisData;\r\n\t}\r\n\t\r\n\t//For when Thailand is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Local scoped source, data from over 200 days are stored within only one file\r\nexport async function\tcallAPIThailand() {\r\n\t\t\r\n\t\tconst source = 'https://covid19.th-stat.com/api/open/timeline';\r\n\t\tlet data = [];\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(source, {\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tdata = response.data['Data'];\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (data != undefined) {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(source, data);\r\n\t\t}\r\n\t}\r\n\t"]},"metadata":{},"sourceType":"module"}