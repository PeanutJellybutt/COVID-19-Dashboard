{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nexport function fetchData(refDate) {\n  if (this.state.selectCountry == 'Thailand') this.callAPIThailand();else if (this.state.fastMode) this.callAPIGlobal(this.state.selectCity, this.state.selectCountry, new Date(refDate.getTime()));else this.callAPIGlobalTimeline(this.state.selectCity, this.state.selectCountry);\n} //For ranking and map functionalities\n//Only data from one day/file is processed\n\nexport function callAPIGlobalAll(markDate) {\n  var countries, countriesN, data, sourceRef, sourcePrefix, formatChange, cityIndex, countryIndex, conIndex, deathIndex, recIndex, quoteLimit, lines, markDateStr, sourceDate, cancelToken, response, i, values, country, city, confirmed, hospitalized, deaths, recovered, citiesN, mapGlobalData;\n  return _regeneratorRuntime.async(function callAPIGlobalAll$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          markDate = new Date(markDate.getTime());\n          countries = [];\n          countriesN = 0;\n          data = new Object();\n          sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n          sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n          formatChange = new Date(2020, 2, 22).getTime();\n          cityIndex = 0;\n          countryIndex = 1;\n          conIndex = 3;\n          deathIndex = 4;\n          recIndex = 5;\n          quoteLimit = 0; //Workaround for source's formatting inconsistencies\n\n          if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n            cityIndex = 2;\n            countryIndex = 3;\n            conIndex = 7;\n            deathIndex = 8;\n            recIndex = 9;\n            quoteLimit = 2;\n          }\n\n          lines = '';\n          markDateStr = markDate.toISOString();\n          sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear(); //console.log(sourceDate);\n\n          _context.prev = 17;\n          cancelToken = this.cancelSource.token;\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(axios.get(sourcePrefix + sourceDate + '.csv', {\n            headers: {\n              'Content-Type': 'text/csv'\n            },\n            cancelToken: cancelToken\n          }));\n\n        case 21:\n          response = _context.sent;\n          lines = response.data.split(/\\r?\\n/);\n          _context.next = 29;\n          break;\n\n        case 25:\n          _context.prev = 25;\n          _context.t0 = _context[\"catch\"](17);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\", undefined);\n\n        case 29:\n          if (!(lines != '')) {\n            _context.next = 55;\n            break;\n          }\n\n          i = 1;\n\n        case 31:\n          if (!(i < lines.length)) {\n            _context.next = 53;\n            break;\n          }\n\n          if (!(lines[i] == '' || (lines[i].match(/\"/g) || []).length > quoteLimit)) {\n            _context.next = 34;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 50);\n\n        case 34:\n          values = lines[i].split(',');\n          country = values[countryIndex];\n          city = values[cityIndex];\n          confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n          hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n          deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n          recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n\n          if (data[country] != undefined) {\n            confirmed += data[country][\"Confirmed\"];\n            hospitalized += data[country][\"Hospitalized\"];\n            deaths += data[country][\"Deaths\"];\n            recovered += data[country][\"Recovered\"];\n          } else {\n            data[country] = new Object();\n            data[country].Country = country;\n            data[country].Cities = [];\n            data[country].CitiesN = 0;\n            countries[countriesN] = country;\n            countriesN++;\n          }\n\n          citiesN = data[country].CitiesN;\n          data[country].Confirmed = confirmed;\n          data[country].Hospitalized = hospitalized;\n          data[country].Deaths = deaths;\n          data[country].Recovered = recovered;\n          data[country].RecoveryRate = (recovered / confirmed * 100).toFixed(2);\n          data[country].MortalityRate = (deaths / confirmed * 100).toFixed(2);\n\n          if (city != '') {\n            data[country].Cities[citiesN] = city;\n            data[country].CitiesN = citiesN + 1;\n          }\n\n        case 50:\n          i++;\n          _context.next = 31;\n          break;\n\n        case 53:\n          //console.log(data);\n          mapGlobalData = this.processMapGlobalData(countries, data);\n          this.setState({\n            countries: countries,\n            globalData: data,\n            mapGlobalData: mapGlobalData\n          });\n\n        case 55:\n          this.globalRanking(this.state.selectCategory);\n\n        case 56:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, this, [[17, 25]], Promise);\n} //When foreign country is selected\n//Provides retrospective data and graph functionalities\n//Taxing, over 200 days/files must be processed\n//Somehow sometimes fast, sometimes slow. Cause still unknown.\n\nexport function callAPIGlobalTimeline(city, country) {\n  var data, dataN, prevConfirmed, prevHospitalized, prevDeaths, prevRecovered, sourceRef, sourcePrefix, markDate, tomorrow, now, cityIndex, countryIndex, conIndex, deathIndex, recIndex, lastIndex, formatChange, lines, markDateStr, sourceDate, cancelToken, response, date, values, i, _i, confirmed, hospitalized, deaths, recovered;\n\n  return _regeneratorRuntime.async(function callAPIGlobalTimeline$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (city == 'Overall') {\n            city = '';\n          }\n\n          data = [{}];\n          dataN = 0;\n          prevConfirmed = 0;\n          prevHospitalized = 0;\n          prevDeaths = 0;\n          prevRecovered = 0;\n          sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n          sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n          markDate = new Date(2020, 0, 23);\n          tomorrow = new Date();\n          tomorrow.setDate(tomorrow.getDate() + 1);\n          now = tomorrow.getTime();\n          cityIndex = 0;\n          countryIndex = 1;\n          conIndex = 3;\n          deathIndex = 4;\n          recIndex = 5;\n          lastIndex = 1;\n          formatChange = new Date(2020, 2, 22).getTime();\n\n        case 20:\n          if (!(markDate.getTime() < now)) {\n            _context2.next = 72;\n            break;\n          }\n\n          lines = '';\n          markDateStr = markDate.toISOString();\n          sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n          console.log(sourceDate); //console.log(lastIndex);\n          //Workaround for source's formatting inconsistencies\n\n          if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n            cityIndex = 2;\n            countryIndex = 3;\n            conIndex = 7;\n            deathIndex = 8;\n            recIndex = 9;\n          }\n\n          _context2.prev = 26;\n          cancelToken = this.cancelSource.token;\n          _context2.next = 30;\n          return _regeneratorRuntime.awrap(axios.get(sourcePrefix + sourceDate + '.csv', {\n            headers: {\n              'Content-Type': 'text/csv'\n            },\n            cancelToken: cancelToken\n          }));\n\n        case 30:\n          response = _context2.sent;\n          lines = response.data.split(/\\r?\\n/);\n          _context2.next = 38;\n          break;\n\n        case 34:\n          _context2.prev = 34;\n          _context2.t0 = _context2[\"catch\"](26);\n          console.log(_context2.t0);\n          return _context2.abrupt(\"return\", undefined);\n\n        case 38:\n          markDate.setDate(markDate.getDate() + 1);\n\n          if (!(lines == '')) {\n            _context2.next = 41;\n            break;\n          }\n\n          return _context2.abrupt(\"continue\", 20);\n\n        case 41:\n          console.log(lastIndex);\n          date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n          values = undefined;\n          if (lines[lastIndex]) values = lines[lastIndex].split(',');else lastIndex = 1;\n\n          if (!(values == undefined || city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex])) {\n            _context2.next = 69;\n            break;\n          }\n\n          i = lastIndex + 1;\n\n        case 47:\n          if (!(i < lines.length)) {\n            _context2.next = 57;\n            break;\n          }\n\n          values = lines[i].split(',');\n\n          if (!(city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex])) {\n            _context2.next = 52;\n            break;\n          }\n\n          values = undefined;\n          return _context2.abrupt(\"continue\", 54);\n\n        case 52:\n          lastIndex = i;\n          return _context2.abrupt(\"break\", 57);\n\n        case 54:\n          i++;\n          _context2.next = 47;\n          break;\n\n        case 57:\n          if (!(values == undefined)) {\n            _context2.next = 69;\n            break;\n          }\n\n          _i = 1;\n\n        case 59:\n          if (!(_i < lastIndex)) {\n            _context2.next = 69;\n            break;\n          }\n\n          values = lines[_i].split(',');\n\n          if (!(city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex])) {\n            _context2.next = 64;\n            break;\n          }\n\n          values = undefined;\n          return _context2.abrupt(\"continue\", 66);\n\n        case 64:\n          lastIndex = _i;\n          return _context2.abrupt(\"break\", 69);\n\n        case 66:\n          _i++;\n          _context2.next = 59;\n          break;\n\n        case 69:\n          if (values != undefined) {\n            confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n            hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n            deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n            recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n            data[dataN] = {\n              Date: date,\n              Confirmed: confirmed,\n              Hospitalized: hospitalized,\n              Deaths: deaths,\n              Recovered: recovered,\n              NewConfirmed: confirmed - prevConfirmed,\n              NewHospitalized: hospitalized - prevHospitalized,\n              NewDeaths: deaths - prevDeaths,\n              NewRecovered: recovered - prevRecovered\n            };\n            prevConfirmed = confirmed;\n            prevHospitalized = hospitalized;\n            prevDeaths = deaths;\n            prevRecovered = recovered;\n            dataN++;\n          }\n\n          _context2.next = 20;\n          break;\n\n        case 72:\n          console.log(data);\n          this.processData(sourceRef, data);\n\n        case 74:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, this, [[26, 34]], Promise);\n} //When foreign country is selected\n//No streak data or timeline functionality\n//Only data from two days/files is processed\n\nexport function callAPIGlobal(city, country, markDate) {\n  var process,\n      data,\n      thisData,\n      sourceRef,\n      sourcePrefix,\n      lines,\n      markDateStr,\n      sourceDate,\n      cancelToken,\n      response,\n      i,\n      values,\n      confirmed,\n      deaths,\n      recovered,\n      prevData,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function callAPIGlobal$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          process = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n\n          if (city == 'Overall') {\n            city = '';\n          }\n\n          data = [{}];\n          data[0] = {\n            Date: '',\n            Confirmed: 0,\n            Hospitalized: 0,\n            Deaths: 0,\n            Recovered: 0,\n            RecoveryRate: 0,\n            MortalityRate: 0,\n            NewConfirmed: 0,\n            NewHospitalized: 0,\n            NewDeaths: 0,\n            NewRecovered: 0\n          };\n          thisData = data[0];\n          sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n          sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n          lines = '';\n\n        case 8:\n          if (!(lines == '')) {\n            _context3.next = 27;\n            break;\n          }\n\n          markDateStr = markDate.toISOString();\n          sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n          markDate.setDate(markDate.getDate() - 1); //console.log(sourceDate);\n\n          _context3.prev = 12;\n          cancelToken = this.cancelSource.token;\n          _context3.next = 16;\n          return _regeneratorRuntime.awrap(axios.get(sourcePrefix + sourceDate + '.csv', {\n            headers: {\n              'Content-Type': 'text/csv'\n            },\n            cancelToken: cancelToken\n          }));\n\n        case 16:\n          response = _context3.sent;\n          lines = response.data.split(/\\r?\\n/);\n          thisData.Date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n          _context3.next = 25;\n          break;\n\n        case 21:\n          _context3.prev = 21;\n          _context3.t0 = _context3[\"catch\"](12);\n          console.log(_context3.t0);\n          return _context3.abrupt(\"return\", undefined);\n\n        case 25:\n          _context3.next = 8;\n          break;\n\n        case 27:\n          i = 1;\n\n        case 28:\n          if (!(i < lines.length)) {\n            _context3.next = 46;\n            break;\n          }\n\n          if (!((lines[i].match(/\"/g) || []).length > 2)) {\n            _context3.next = 31;\n            break;\n          }\n\n          return _context3.abrupt(\"continue\", 43);\n\n        case 31:\n          values = lines[i].split(',');\n\n          if (!(city != '' && city != values[2] || country != '' && country != values[3])) {\n            _context3.next = 34;\n            break;\n          }\n\n          return _context3.abrupt(\"continue\", 43);\n\n        case 34:\n          confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\n          deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\n          recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\n          thisData.Confirmed = confirmed;\n          thisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\n          thisData.Deaths = deaths;\n          thisData.Recovered = recovered;\n          thisData.RecoveryRate = recovered / confirmed * 100;\n          thisData.MortalityRate = deaths / confirmed * 100;\n\n        case 43:\n          i++;\n          _context3.next = 28;\n          break;\n\n        case 46:\n          if (!process) {\n            _context3.next = 55;\n            break;\n          }\n\n          _context3.next = 49;\n          return _regeneratorRuntime.awrap(this.callAPIGlobal(city, country, markDate, false));\n\n        case 49:\n          prevData = _context3.sent;\n          thisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\n          thisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\n          thisData.NewDeaths = thisData.Deaths - prevData.Deaths;\n          thisData.NewRecovered = thisData.Recovered - prevData.Recovered; //console.log(data);\n\n          this.processData(sourceRef, data, false);\n\n        case 55:\n          return _context3.abrupt(\"return\", thisData);\n\n        case 56:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, this, [[12, 21]], Promise);\n} //For when Thailand is selected\n//Provides retrospective data and graph functionalities\n//Local scoped source, data from over 200 days are stored within only one file\n\nexport function callAPIThailand() {\n  var source, data, cancelToken, response;\n  return _regeneratorRuntime.async(function callAPIThailand$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          source = 'https://covid19.th-stat.com/api/open/timeline';\n          data = [];\n          _context4.prev = 2;\n          cancelToken = this.cancelSource.token;\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(axios.get(source, {\n            cancelToken: cancelToken\n          }));\n\n        case 6:\n          response = _context4.sent;\n          data = response.data['Data'];\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](2);\n          console.log(_context4.t0);\n          return _context4.abrupt(\"return\", undefined);\n\n        case 14:\n          if (data != undefined) {\n            //console.log(data);\n            this.processData(source, data);\n          }\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, this, [[2, 10]], Promise);\n}\nexport function clearAxiosCalls() {\n  this.cancelSource.cancel('Axios operations cleared');\n  var CancelToken = axios.CancelToken;\n  this.cancelSource = CancelToken.source();\n}","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/components/dataFetch.js"],"names":["axios","fetchData","refDate","state","selectCountry","callAPIThailand","fastMode","callAPIGlobal","selectCity","Date","getTime","callAPIGlobalTimeline","callAPIGlobalAll","markDate","countries","countriesN","data","Object","sourceRef","sourcePrefix","formatChange","cityIndex","countryIndex","conIndex","deathIndex","recIndex","quoteLimit","lines","markDateStr","toISOString","sourceDate","slice","getFullYear","cancelToken","cancelSource","token","get","headers","response","split","console","log","undefined","i","length","match","values","country","city","confirmed","parseInt","hospitalized","deaths","recovered","Country","Cities","CitiesN","citiesN","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","toFixed","MortalityRate","mapGlobalData","processMapGlobalData","setState","globalData","globalRanking","selectCategory","dataN","prevConfirmed","prevHospitalized","prevDeaths","prevRecovered","tomorrow","setDate","getDate","now","lastIndex","date","replace","NewConfirmed","NewHospitalized","NewDeaths","NewRecovered","processData","process","thisData","prevData","source","clearAxiosCalls","cancel","CancelToken"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAClC,MAAI,KAAKC,KAAL,CAAWC,aAAX,IAA4B,UAAhC,EACC,KAAKC,eAAL,GADD,KAEK,IAAI,KAAKF,KAAL,CAAWG,QAAf,EACJ,KAAKC,aAAL,CAAmB,KAAKJ,KAAL,CAAWK,UAA9B,EAAyC,KAAKL,KAAL,CAAWC,aAApD,EAAkE,IAAIK,IAAJ,CAASP,OAAO,CAACQ,OAAR,EAAT,CAAlE,EADI,KAEA,KAAKC,qBAAL,CAA2B,KAAKR,KAAL,CAAWK,UAAtC,EAAiD,KAAKL,KAAL,CAAWC,aAA5D;AACL,C,CAEA;AACA;;AACD,OAAO,SAAeQ,gBAAf,CAAgCC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAELA,UAAAA,QAAQ,GAAG,IAAIJ,IAAJ,CAASI,QAAQ,CAACH,OAAT,EAAT,CAAX;AAEII,UAAAA,SAJC,GAIW,EAJX;AAKDC,UAAAA,UALC,GAKY,CALZ;AAODC,UAAAA,IAPC,GAOM,IAAIC,MAAJ,EAPN;AASCC,UAAAA,SATD,GASa,uGATb;AAUCC,UAAAA,YAVD,GAUgB,kHAVhB;AAWCC,UAAAA,YAXD,GAWiB,IAAIX,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,EAAhB,CAAD,CAAsBC,OAAtB,EAXhB;AAaDW,UAAAA,SAbC,GAaW,CAbX;AAcDC,UAAAA,YAdC,GAcc,CAdd;AAeDC,UAAAA,QAfC,GAeU,CAfV;AAgBDC,UAAAA,UAhBC,GAgBY,CAhBZ;AAiBDC,UAAAA,QAjBC,GAiBU,CAjBV;AAkBDC,UAAAA,UAlBC,GAkBY,CAlBZ,EAmBL;;AACA,cAAIL,SAAS,IAAI,CAAb,IAAkBR,QAAQ,CAACH,OAAT,MAAsBU,YAA5C,EAA0D;AACzDC,YAAAA,SAAS,GAAG,CAAZ;AACAC,YAAAA,YAAY,GAAG,CAAf;AACAC,YAAAA,QAAQ,GAAG,CAAX;AACAC,YAAAA,UAAU,GAAG,CAAb;AACAC,YAAAA,QAAQ,GAAG,CAAX;AACAC,YAAAA,UAAU,GAAG,CAAb;AACA;;AAEGC,UAAAA,KA7BC,GA6BO,EA7BP;AA8BCC,UAAAA,WA9BD,GA8Bef,QAAQ,CAACgB,WAAT,EA9Bf;AA+BCC,UAAAA,UA/BD,GA+BcF,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,CAApB,IAAyBH,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,EAApB,CAAzB,GAAmD,GAAnD,GAAyDlB,QAAQ,CAACmB,WAAT,EA/BvE,EAgCL;;AAhCK;AAmCEC,UAAAA,WAnCF,GAmCgB,KAAKC,YAAL,CAAkBC,KAnClC;AAAA;AAAA,2CAoCmBnC,KAAK,CAACoC,GAAN,CAAUjB,YAAY,GAAGW,UAAf,GAA4B,MAAtC,EAA8C;AACpEO,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAD2D;AAEpEJ,YAAAA,WAAW,EAAEA;AAFuD,WAA9C,CApCnB;;AAAA;AAoCEK,UAAAA,QApCF;AAwCJX,UAAAA,KAAK,GAAGW,QAAQ,CAACtB,IAAT,CAAcuB,KAAd,CAAoB,OAApB,CAAR;AAxCI;AAAA;;AAAA;AAAA;AAAA;AA0CJC,UAAAA,OAAO,CAACC,GAAR;AA1CI,2CA2CGC,SA3CH;;AAAA;AAAA,gBA8CDf,KAAK,IAAI,EA9CR;AAAA;AAAA;AAAA;;AA+CKgB,UAAAA,CA/CL,GA+CO,CA/CP;;AAAA;AAAA,gBA+CUA,CAAC,GAAChB,KAAK,CAACiB,MA/ClB;AAAA;AAAA;AAAA;;AAAA,gBAgDCjB,KAAK,CAACgB,CAAD,CAAL,IAAY,EAAZ,IAAmB,CAAChB,KAAK,CAACgB,CAAD,CAAL,CAASE,KAAT,CAAe,IAAf,KAAwB,EAAzB,EAA6BD,MAA7B,GAAsClB,UAhD1D;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmDGoB,UAAAA,MAnDH,GAmDYnB,KAAK,CAACgB,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAnDZ;AAoDGQ,UAAAA,OApDH,GAoDaD,MAAM,CAACxB,YAAD,CApDnB;AAqDG0B,UAAAA,IArDH,GAqDUF,MAAM,CAACzB,SAAD,CArDhB;AAsDC4B,UAAAA,SAtDD,GAsDaH,MAAM,CAACvB,QAAD,CAAN,IAAoB,EAApB,GAAyB,CAAzB,GAA6B2B,QAAQ,CAACJ,MAAM,CAACvB,QAAD,CAAP,CAtDlD;AAuDC4B,UAAAA,YAvDD,GAuDgBL,MAAM,CAAC,EAAD,CAAN,IAAc,EAAd,GAAmB,CAAnB,GAAuBI,QAAQ,CAACJ,MAAM,CAAC,EAAD,CAAP,CAvD/C;AAwDCM,UAAAA,MAxDD,GAwDUN,MAAM,CAACtB,UAAD,CAAN,IAAsB,EAAtB,GAA2B,CAA3B,GAA+B0B,QAAQ,CAACJ,MAAM,CAACtB,UAAD,CAAP,CAxDjD;AAyDC6B,UAAAA,SAzDD,GAyDaP,MAAM,CAACrB,QAAD,CAAN,IAAoB,EAApB,GAAyB,CAAzB,GAA6ByB,QAAQ,CAACJ,MAAM,CAACrB,QAAD,CAAP,CAzDlD;;AA0DH,cAAIT,IAAI,CAAC+B,OAAD,CAAJ,IAAiBL,SAArB,EAAgC;AAC/BO,YAAAA,SAAS,IAAIjC,IAAI,CAAC+B,OAAD,CAAJ,CAAc,WAAd,CAAb;AACAI,YAAAA,YAAY,IAAInC,IAAI,CAAC+B,OAAD,CAAJ,CAAc,cAAd,CAAhB;AACAK,YAAAA,MAAM,IAAIpC,IAAI,CAAC+B,OAAD,CAAJ,CAAc,QAAd,CAAV;AACAM,YAAAA,SAAS,IAAIrC,IAAI,CAAC+B,OAAD,CAAJ,CAAc,WAAd,CAAb;AACA,WALD,MAOA;AACC/B,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,GAAgB,IAAI9B,MAAJ,EAAhB;AACAD,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcO,OAAd,GAAwBP,OAAxB;AACA/B,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcQ,MAAd,GAAuB,EAAvB;AACAvC,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcS,OAAd,GAAwB,CAAxB;AACA1C,YAAAA,SAAS,CAACC,UAAD,CAAT,GAAwBgC,OAAxB;AACAhC,YAAAA,UAAU;AACV;;AAEK0C,UAAAA,OA1EH,GA0EazC,IAAI,CAAC+B,OAAD,CAAJ,CAAcS,OA1E3B;AA2EHxC,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcW,SAAd,GAA0BT,SAA1B;AACAjC,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcY,YAAd,GAA6BR,YAA7B;AACAnC,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAca,MAAd,GAAuBR,MAAvB;AACApC,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcc,SAAd,GAA0BR,SAA1B;AACArC,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAce,YAAd,GAA6B,CAAET,SAAS,GAACJ,SAAX,GAAwB,GAAzB,EAA8Bc,OAA9B,CAAsC,CAAtC,CAA7B;AACA/C,UAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAciB,aAAd,GAA8B,CAAEZ,MAAM,GAACH,SAAR,GAAqB,GAAtB,EAA2Bc,OAA3B,CAAmC,CAAnC,CAA9B;;AACA,cAAIf,IAAI,IAAI,EAAZ,EAAgB;AACfhC,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcQ,MAAd,CAAqBE,OAArB,IAAgCT,IAAhC;AACAhC,YAAAA,IAAI,CAAC+B,OAAD,CAAJ,CAAcS,OAAd,GAAwBC,OAAO,GAAG,CAAlC;AACA;;AApFE;AA+C0Bd,UAAAA,CAAC,EA/C3B;AAAA;AAAA;;AAAA;AAsFJ;AAEMsB,UAAAA,aAxFF,GAwFkB,KAAKC,oBAAL,CAA0BpD,SAA1B,EAAqCE,IAArC,CAxFlB;AA0FJ,eAAKmD,QAAL,CAAc;AACbrD,YAAAA,SAAS,EAAEA,SADE;AAEbsD,YAAAA,UAAU,EAAEpD,IAFC;AAGbiD,YAAAA,aAAa,EAAEA;AAHF,WAAd;;AA1FI;AAiGL,eAAKI,aAAL,CAAmB,KAAKlE,KAAL,CAAWmE,cAA9B;;AAjGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAoGN;AACA;AACA;AACA;;AACD,OAAO,SAAe3D,qBAAf,CAAqCqC,IAArC,EAA2CD,OAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,cAAIC,IAAI,IAAI,SAAZ,EAAuB;AACtBA,YAAAA,IAAI,GAAG,EAAP;AACA;;AAEGhC,UAAAA,IANC,GAMM,CAAC,EAAD,CANN;AAODuD,UAAAA,KAPC,GAOO,CAPP;AASDC,UAAAA,aATC,GASe,CATf;AAUDC,UAAAA,gBAVC,GAUkB,CAVlB;AAWDC,UAAAA,UAXC,GAWY,CAXZ;AAYDC,UAAAA,aAZC,GAYe,CAZf;AAcCzD,UAAAA,SAdD,GAca,uGAdb;AAeCC,UAAAA,YAfD,GAegB,kHAfhB;AAgBDN,UAAAA,QAhBC,GAgBU,IAAIJ,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,EAAhB,CAhBV;AAiBCmE,UAAAA,QAjBD,GAiBY,IAAInE,IAAJ,EAjBZ;AAkBLmE,UAAAA,QAAQ,CAACC,OAAT,CAAiBD,QAAQ,CAACE,OAAT,KAAmB,CAApC;AACMC,UAAAA,GAnBD,GAmBOH,QAAQ,CAAClE,OAAT,EAnBP;AAqBDW,UAAAA,SArBC,GAqBW,CArBX;AAsBDC,UAAAA,YAtBC,GAsBc,CAtBd;AAuBDC,UAAAA,QAvBC,GAuBU,CAvBV;AAwBDC,UAAAA,UAxBC,GAwBY,CAxBZ;AAyBDC,UAAAA,QAzBC,GAyBU,CAzBV;AA2BDuD,UAAAA,SA3BC,GA2BW,CA3BX;AA4BC5D,UAAAA,YA5BD,GA4BiB,IAAIX,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,EAAhB,CAAD,CAAsBC,OAAtB,EA5BhB;;AAAA;AAAA,gBA8BEG,QAAQ,CAACH,OAAT,KAAqBqE,GA9BvB;AAAA;AAAA;AAAA;;AA+BApD,UAAAA,KA/BA,GA+BQ,EA/BR;AAgCEC,UAAAA,WAhCF,GAgCgBf,QAAQ,CAACgB,WAAT,EAhChB;AAiCEC,UAAAA,UAjCF,GAiCeF,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,CAApB,IAAyBH,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,EAApB,CAAzB,GAAmD,GAAnD,GAAyDlB,QAAQ,CAACmB,WAAT,EAjCxE;AAkCJQ,UAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ,EAlCI,CAmCJ;AAEA;;AACA,cAAIT,SAAS,IAAI,CAAb,IAAkBR,QAAQ,CAACH,OAAT,MAAsBU,YAA5C,EAA0D;AACzDC,YAAAA,SAAS,GAAG,CAAZ;AACAC,YAAAA,YAAY,GAAG,CAAf;AACAC,YAAAA,QAAQ,GAAG,CAAX;AACAC,YAAAA,UAAU,GAAG,CAAb;AACAC,YAAAA,QAAQ,GAAG,CAAX;AACA;;AA5CG;AA+CGQ,UAAAA,WA/CH,GA+CiB,KAAKC,YAAL,CAAkBC,KA/CnC;AAAA;AAAA,2CAgDoBnC,KAAK,CAACoC,GAAN,CAAUjB,YAAY,GAAGW,UAAf,GAA4B,MAAtC,EAA8C;AACpEO,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAD2D;AAEpEJ,YAAAA,WAAW,EAAEA;AAFuD,WAA9C,CAhDpB;;AAAA;AAgDGK,UAAAA,QAhDH;AAoDHX,UAAAA,KAAK,GAAGW,QAAQ,CAACtB,IAAT,CAAcuB,KAAd,CAAoB,OAApB,CAAR;AApDG;AAAA;;AAAA;AAAA;AAAA;AAsDHC,UAAAA,OAAO,CAACC,GAAR;AAtDG,4CAuDIC,SAvDJ;;AAAA;AA0DJ7B,UAAAA,QAAQ,CAACgE,OAAT,CAAiBhE,QAAQ,CAACiE,OAAT,KAAmB,CAApC;;AA1DI,gBA4DAnD,KAAK,IAAI,EA5DT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA+DJa,UAAAA,OAAO,CAACC,GAAR,CAAYuC,SAAZ;AACMC,UAAAA,IAhEF,GAgESnD,UAAU,CAACoD,OAAX,CAAmB,GAAnB,EAAuB,IAAvB,EAA6BA,OAA7B,CAAqC,GAArC,EAAyC,IAAzC,CAhET;AAiEApC,UAAAA,MAjEA,GAiESJ,SAjET;AAkEJ,cAAIf,KAAK,CAACqD,SAAD,CAAT,EACClC,MAAM,GAAGnB,KAAK,CAACqD,SAAD,CAAL,CAAiBzC,KAAjB,CAAuB,GAAvB,CAAT,CADD,KAEKyC,SAAS,GAAG,CAAZ;;AApED,gBAsEAlC,MAAM,IAAIJ,SAAV,IAAwBM,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAIF,MAAM,CAACzB,SAAD,CAApD,IAAqE0B,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAID,MAAM,CAACxB,YAAD,CAtEvG;AAAA;AAAA;AAAA;;AAwEMqB,UAAAA,CAxEN,GAwEQqC,SAAS,GAAC,CAxElB;;AAAA;AAAA,gBAwEqBrC,CAAC,GAAChB,KAAK,CAACiB,MAxE7B;AAAA;AAAA;AAAA;;AAyEFE,UAAAA,MAAM,GAAGnB,KAAK,CAACgB,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAAT;;AAzEE,gBA0EGS,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAIF,MAAM,CAACzB,SAAD,CAA7B,IAA8C0B,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAID,MAAM,CAACxB,YAAD,CA1ElF;AAAA;AAAA;AAAA;;AA2EDwB,UAAAA,MAAM,GAAGJ,SAAT;AA3EC;;AAAA;AA8EFsC,UAAAA,SAAS,GAAGrC,CAAZ;AA9EE;;AAAA;AAwEqCA,UAAAA,CAAC,EAxEtC;AAAA;AAAA;;AAAA;AAAA,gBAiFCG,MAAM,IAAIJ,SAjFX;AAAA;AAAA;AAAA;;AAkFOC,UAAAA,EAlFP,GAkFS,CAlFT;;AAAA;AAAA,gBAkFYA,EAAC,GAACqC,SAlFd;AAAA;AAAA;AAAA;;AAmFDlC,UAAAA,MAAM,GAAGnB,KAAK,CAACgB,EAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAAT;;AAnFC,gBAoFIS,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAIF,MAAM,CAACzB,SAAD,CAA7B,IAA8C0B,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAID,MAAM,CAACxB,YAAD,CApFnF;AAAA;AAAA;AAAA;;AAqFAwB,UAAAA,MAAM,GAAGJ,SAAT;AArFA;;AAAA;AAwFDsC,UAAAA,SAAS,GAAGrC,EAAZ;AAxFC;;AAAA;AAkFyBA,UAAAA,EAAC,EAlF1B;AAAA;AAAA;;AAAA;AA8FJ,cAAIG,MAAM,IAAIJ,SAAd,EAAyB;AAClBO,YAAAA,SADkB,GACNH,MAAM,CAACvB,QAAD,CAAN,IAAoB,EAApB,GAAyB,CAAzB,GAA6B2B,QAAQ,CAACJ,MAAM,CAACvB,QAAD,CAAP,CAD/B;AAElB4B,YAAAA,YAFkB,GAEHL,MAAM,CAAC,EAAD,CAAN,IAAc,EAAd,GAAmB,CAAnB,GAAuBI,QAAQ,CAACJ,MAAM,CAAC,EAAD,CAAP,CAF5B;AAGlBM,YAAAA,MAHkB,GAGTN,MAAM,CAACtB,UAAD,CAAN,IAAsB,EAAtB,GAA2B,CAA3B,GAA+B0B,QAAQ,CAACJ,MAAM,CAACtB,UAAD,CAAP,CAH9B;AAIlB6B,YAAAA,SAJkB,GAINP,MAAM,CAACrB,QAAD,CAAN,IAAoB,EAApB,GAAyB,CAAzB,GAA6ByB,QAAQ,CAACJ,MAAM,CAACrB,QAAD,CAAP,CAJ/B;AAMxBT,YAAAA,IAAI,CAACuD,KAAD,CAAJ,GAAc;AACb9D,cAAAA,IAAI,EAAEwE,IADO;AAEbvB,cAAAA,SAAS,EAAET,SAFE;AAGbU,cAAAA,YAAY,EAAER,YAHD;AAIbS,cAAAA,MAAM,EAAER,MAJK;AAKbS,cAAAA,SAAS,EAAER,SALE;AAMb8B,cAAAA,YAAY,EAAElC,SAAS,GAAGuB,aANb;AAObY,cAAAA,eAAe,EAAEjC,YAAY,GAAGsB,gBAPnB;AAQbY,cAAAA,SAAS,EAAEjC,MAAM,GAAGsB,UARP;AASbY,cAAAA,YAAY,EAAEjC,SAAS,GAAGsB;AATb,aAAd;AAWAH,YAAAA,aAAa,GAAGvB,SAAhB;AACAwB,YAAAA,gBAAgB,GAAGtB,YAAnB;AACAuB,YAAAA,UAAU,GAAGtB,MAAb;AACAuB,YAAAA,aAAa,GAAGtB,SAAhB;AACAkB,YAAAA,KAAK;AACL;;AApHG;AAAA;;AAAA;AAsHL/B,UAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAZ;AAEA,eAAKuE,WAAL,CAAiBrE,SAAjB,EAA4BF,IAA5B;;AAxHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA2HN;AACA;AACA;;AACD,OAAO,SAAeT,aAAf,CAA6ByC,IAA7B,EAAmCD,OAAnC,EAA4ClC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD2E,UAAAA,OAAtD,8DAAgE,IAAhE;;AAEL,cAAIxC,IAAI,IAAI,SAAZ,EAAuB;AACtBA,YAAAA,IAAI,GAAG,EAAP;AACA;;AAEGhC,UAAAA,IANC,GAMM,CAAC,EAAD,CANN;AAOLA,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU;AACTP,YAAAA,IAAI,EAAE,EADG;AAETiD,YAAAA,SAAS,EAAE,CAFF;AAGTC,YAAAA,YAAY,EAAE,CAHL;AAITC,YAAAA,MAAM,EAAE,CAJC;AAKTC,YAAAA,SAAS,EAAE,CALF;AAMTC,YAAAA,YAAY,EAAE,CANL;AAOTE,YAAAA,aAAa,EAAE,CAPN;AAQTmB,YAAAA,YAAY,EAAE,CARL;AASTC,YAAAA,eAAe,EAAE,CATR;AAUTC,YAAAA,SAAS,EAAE,CAVF;AAWTC,YAAAA,YAAY,EAAE;AAXL,WAAV;AAaMG,UAAAA,QApBD,GAoBYzE,IAAI,CAAC,CAAD,CApBhB;AAsBCE,UAAAA,SAtBD,GAsBa,uGAtBb;AAuBCC,UAAAA,YAvBD,GAuBgB,kHAvBhB;AAyBDQ,UAAAA,KAzBC,GAyBO,EAzBP;;AAAA;AAAA,gBA0BEA,KAAK,IAAI,EA1BX;AAAA;AAAA;AAAA;;AA2BEC,UAAAA,WA3BF,GA2BgBf,QAAQ,CAACgB,WAAT,EA3BhB;AA4BEC,UAAAA,UA5BF,GA4BeF,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,CAApB,IAAyBH,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAoB,EAApB,CAAzB,GAAmD,GAAnD,GAAyDlB,QAAQ,CAACmB,WAAT,EA5BxE;AA6BJnB,UAAAA,QAAQ,CAACgE,OAAT,CAAiBhE,QAAQ,CAACiE,OAAT,KAAmB,CAApC,EA7BI,CA8BJ;;AA9BI;AAiCG7C,UAAAA,WAjCH,GAiCiB,KAAKC,YAAL,CAAkBC,KAjCnC;AAAA;AAAA,2CAkCoBnC,KAAK,CAACoC,GAAN,CAAUjB,YAAY,GAAGW,UAAf,GAA4B,MAAtC,EAA8C;AACpEO,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAD2D;AAEpEJ,YAAAA,WAAW,EAAEA;AAFuD,WAA9C,CAlCpB;;AAAA;AAkCGK,UAAAA,QAlCH;AAsCHX,UAAAA,KAAK,GAAGW,QAAQ,CAACtB,IAAT,CAAcuB,KAAd,CAAoB,OAApB,CAAR;AACAkD,UAAAA,QAAQ,CAAChF,IAAT,GAAgBqB,UAAU,CAACoD,OAAX,CAAmB,GAAnB,EAAuB,IAAvB,EAA6BA,OAA7B,CAAqC,GAArC,EAAyC,IAAzC,CAAhB;AAvCG;AAAA;;AAAA;AAAA;AAAA;AAyCH1C,UAAAA,OAAO,CAACC,GAAR;AAzCG,4CA0CIC,SA1CJ;;AAAA;AAAA;AAAA;;AAAA;AA8CIC,UAAAA,CA9CJ,GA8CM,CA9CN;;AAAA;AAAA,gBA8CSA,CAAC,GAAChB,KAAK,CAACiB,MA9CjB;AAAA;AAAA;AAAA;;AAAA,gBA+CA,CAACjB,KAAK,CAACgB,CAAD,CAAL,CAASE,KAAT,CAAe,IAAf,KAAwB,EAAzB,EAA6BD,MAA7B,GAAsC,CA/CtC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAkDEE,UAAAA,MAlDF,GAkDWnB,KAAK,CAACgB,CAAD,CAAL,CAASJ,KAAT,CAAe,GAAf,CAlDX;;AAAA,gBAmDCS,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAIF,MAAM,CAAC,CAAD,CAA7B,IAAsCC,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAID,MAAM,CAAC,CAAD,CAnDxE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAsDEG,UAAAA,SAtDF,GAsDcwC,QAAQ,CAAC,WAAD,CAAR,IAAyB3C,MAAM,CAAC,CAAD,CAAN,IAAa,EAAb,GAAkB,CAAlB,GAAsBI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,CAAvD,CAtDd;AAuDEM,UAAAA,MAvDF,GAuDWqC,QAAQ,CAAC,QAAD,CAAR,IAAsB3C,MAAM,CAAC,CAAD,CAAN,IAAa,EAAb,GAAkB,CAAlB,GAAsBI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,CAApD,CAvDX;AAwDEO,UAAAA,SAxDF,GAwDcoC,QAAQ,CAAC,WAAD,CAAR,IAAyB3C,MAAM,CAAC,CAAD,CAAN,IAAa,EAAb,GAAkB,CAAlB,GAAsBI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,CAAvD,CAxDd;AAyDJ2C,UAAAA,QAAQ,CAAC/B,SAAT,GAAqBT,SAArB;AACAwC,UAAAA,QAAQ,CAAC9B,YAAT,GAAwB8B,QAAQ,CAAC,cAAD,CAAR,IAA4B3C,MAAM,CAAC,EAAD,CAAN,IAAc,EAAd,GAAmB,CAAnB,GAAuBI,QAAQ,CAACJ,MAAM,CAAC,EAAD,CAAP,CAA3D,CAAxB;AACA2C,UAAAA,QAAQ,CAAC7B,MAAT,GAAkBR,MAAlB;AACAqC,UAAAA,QAAQ,CAAC5B,SAAT,GAAqBR,SAArB;AACAoC,UAAAA,QAAQ,CAAC3B,YAAT,GAAyBT,SAAS,GAACJ,SAAX,GAAwB,GAAhD;AACAwC,UAAAA,QAAQ,CAACzB,aAAT,GAA0BZ,MAAM,GAACH,SAAR,GAAqB,GAA9C;;AA9DI;AA8CyBN,UAAAA,CAAC,EA9C1B;AAAA;AAAA;;AAAA;AAAA,eAiED6C,OAjEC;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAkEmB,KAAKjF,aAAL,CAAmByC,IAAnB,EAAyBD,OAAzB,EAAkClC,QAAlC,EAA4C,KAA5C,CAlEnB;;AAAA;AAkEE6E,UAAAA,QAlEF;AAmEJD,UAAAA,QAAQ,CAACN,YAAT,GAAwBM,QAAQ,CAAC/B,SAAT,GAAqBgC,QAAQ,CAAChC,SAAtD;AACA+B,UAAAA,QAAQ,CAACL,eAAT,GAA2BK,QAAQ,CAAC9B,YAAT,GAAwB+B,QAAQ,CAAC/B,YAA5D;AACA8B,UAAAA,QAAQ,CAACJ,SAAT,GAAqBI,QAAQ,CAAC7B,MAAT,GAAkB8B,QAAQ,CAAC9B,MAAhD;AACA6B,UAAAA,QAAQ,CAACH,YAAT,GAAwBG,QAAQ,CAAC5B,SAAT,GAAqB6B,QAAQ,CAAC7B,SAAtD,CAtEI,CAwEJ;;AACA,eAAK0B,WAAL,CAAiBrE,SAAjB,EAA4BF,IAA5B,EAAkC,KAAlC;;AAzEI;AAAA,4CA4EEyE,QA5EF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA+EN;AACA;AACA;;AACD,OAAO,SAAepF,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAECsF,UAAAA,MAFD,GAEU,+CAFV;AAGD3E,UAAAA,IAHC,GAGM,EAHN;AAAA;AAMEiB,UAAAA,WANF,GAMgB,KAAKC,YAAL,CAAkBC,KANlC;AAAA;AAAA,2CAOmBnC,KAAK,CAACoC,GAAN,CAAUuD,MAAV,EAAkB;AACxC1D,YAAAA,WAAW,EAAEA;AAD2B,WAAlB,CAPnB;;AAAA;AAOEK,UAAAA,QAPF;AAUJtB,UAAAA,IAAI,GAAGsB,QAAQ,CAACtB,IAAT,CAAc,MAAd,CAAP;AAVI;AAAA;;AAAA;AAAA;AAAA;AAYJwB,UAAAA,OAAO,CAACC,GAAR;AAZI,4CAaGC,SAbH;;AAAA;AAgBL,cAAI1B,IAAI,IAAI0B,SAAZ,EAAuB;AACtB;AACA,iBAAK6C,WAAL,CAAiBI,MAAjB,EAAyB3E,IAAzB;AACA;;AAnBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBP,OAAO,SAAS4E,eAAT,GAA2B;AAChC,OAAK1D,YAAL,CAAkB2D,MAAlB,CAAyB,0BAAzB;AAEA,MAAMC,WAAW,GAAG9F,KAAK,CAAC8F,WAA1B;AACA,OAAK5D,YAAL,GAAoB4D,WAAW,CAACH,MAAZ,EAApB;AACA","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nexport function fetchData(refDate) {\r\n\tif (this.state.selectCountry == 'Thailand')\r\n\t\tthis.callAPIThailand();\r\n\telse if (this.state.fastMode)\r\n\t\tthis.callAPIGlobal(this.state.selectCity,this.state.selectCountry,new Date(refDate.getTime()));\r\n\telse this.callAPIGlobalTimeline(this.state.selectCity,this.state.selectCountry);\r\n}\r\n\r\n\t//For ranking and map functionalities\r\n\t//Only data from one day/file is processed\r\nexport async function callAPIGlobalAll(markDate) {\r\n\t\t\r\n\t\tmarkDate = new Date(markDate.getTime());\r\n\t\t\r\n\t\tlet countries = [];\r\n\t\tlet countriesN = 0;\r\n\t\t\r\n\t\tlet data = new Object();\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\tlet quoteLimit = 0;\r\n\t\t//Workaround for source's formatting inconsistencies\r\n\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\tcityIndex = 2;\r\n\t\t\tcountryIndex = 3;\r\n\t\t\tconIndex = 7;\r\n\t\t\tdeathIndex = 8;\r\n\t\t\trecIndex = 9;\r\n\t\t\tquoteLimit = 2;\r\n\t\t}\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\tconst markDateStr = markDate.toISOString();\r\n\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t//console.log(sourceDate);\r\n\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (lines != '') {\t\t\r\n\t\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\t\tif (lines[i] == '' || ((lines[i].match(/\"/g) || []).length > quoteLimit))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tconst values = lines[i].split(',');\r\n\t\t\t\tconst country = values[countryIndex];\r\n\t\t\t\tconst city = values[cityIndex];\r\n\t\t\t\tlet confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tlet hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tlet deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tlet recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\tif (data[country] != undefined) {\r\n\t\t\t\t\tconfirmed += data[country][\"Confirmed\"];\r\n\t\t\t\t\thospitalized += data[country][\"Hospitalized\"];\r\n\t\t\t\t\tdeaths += data[country][\"Deaths\"];\r\n\t\t\t\t\trecovered += data[country][\"Recovered\"];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata[country] = new Object();\r\n\t\t\t\t\tdata[country].Country = country;\r\n\t\t\t\t\tdata[country].Cities = [];\r\n\t\t\t\t\tdata[country].CitiesN = 0;\r\n\t\t\t\t\tcountries[countriesN] = country;\r\n\t\t\t\t\tcountriesN++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst citiesN = data[country].CitiesN;\r\n\t\t\t\tdata[country].Confirmed = confirmed;\r\n\t\t\t\tdata[country].Hospitalized = hospitalized;\r\n\t\t\t\tdata[country].Deaths = deaths;\r\n\t\t\t\tdata[country].Recovered = recovered;\r\n\t\t\t\tdata[country].RecoveryRate = ((recovered/confirmed) * 100).toFixed(2);\r\n\t\t\t\tdata[country].MortalityRate = ((deaths/confirmed) * 100).toFixed(2);\r\n\t\t\t\tif (city != '') {\r\n\t\t\t\t\tdata[country].Cities[citiesN] = city;\r\n\t\t\t\t\tdata[country].CitiesN = citiesN + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(data);\r\n\t\t\t\r\n\t\t\tconst mapGlobalData = this.processMapGlobalData(countries, data);\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tcountries: countries,\r\n\t\t\t\tglobalData: data,\r\n\t\t\t\tmapGlobalData: mapGlobalData,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Taxing, over 200 days/files must be processed\r\n\t//Somehow sometimes fast, sometimes slow. Cause still unknown.\r\nexport async function callAPIGlobalTimeline(city, country) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tlet dataN = 0;\r\n\t\t\r\n\t\tlet prevConfirmed = 0;\r\n\t\tlet prevHospitalized = 0;\r\n\t\tlet prevDeaths = 0;\r\n\t\tlet prevRecovered = 0;\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tlet markDate = new Date(2020,0,23);\r\n\t\tconst tomorrow = new Date();\r\n\t\ttomorrow.setDate(tomorrow.getDate()+1);\r\n\t\tconst now = tomorrow.getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\t\r\n\t\tlet lastIndex = 1;\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\twhile (markDate.getTime() < now) {\r\n\t\t\tlet lines = '';\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tconsole.log(sourceDate);\r\n\t\t\t//console.log(lastIndex);\r\n\t\t\t\r\n\t\t\t//Workaround for source's formatting inconsistencies\r\n\t\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\t\tcityIndex = 2;\r\n\t\t\t\tcountryIndex = 3;\r\n\t\t\t\tconIndex = 7;\r\n\t\t\t\tdeathIndex = 8;\r\n\t\t\t\trecIndex = 9;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmarkDate.setDate(markDate.getDate()+1);\r\n\t\t\t\r\n\t\t\tif (lines == '')\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconsole.log(lastIndex);\r\n\t\t\tconst date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\tlet values = undefined;\r\n\t\t\tif (lines[lastIndex])\r\n\t\t\t\tvalues = lines[lastIndex].split(',');\r\n\t\t\telse lastIndex = 1;\r\n\t\t\t\r\n\t\t\tif (values == undefined || (city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex]))\r\n\t\t\t{\r\n\t\t\t\tfor (let i=lastIndex+1; i<lines.length; i++) {\r\n\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (values == undefined) {\r\n\t\t\t\t\tfor (let i=1; i<lastIndex; i++) {\r\n\t\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (values != undefined) {\r\n\t\t\t\tconst confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tconst hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tconst deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tconst recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\t\r\n\t\t\t\tdata[dataN] = {\r\n\t\t\t\t\tDate: date,\r\n\t\t\t\t\tConfirmed: confirmed,\r\n\t\t\t\t\tHospitalized: hospitalized,\r\n\t\t\t\t\tDeaths: deaths,\r\n\t\t\t\t\tRecovered: recovered,\r\n\t\t\t\t\tNewConfirmed: confirmed - prevConfirmed,\r\n\t\t\t\t\tNewHospitalized: hospitalized - prevHospitalized,\r\n\t\t\t\t\tNewDeaths: deaths - prevDeaths,\r\n\t\t\t\t\tNewRecovered: recovered - prevRecovered,\r\n\t\t\t\t}\r\n\t\t\t\tprevConfirmed = confirmed;\r\n\t\t\t\tprevHospitalized = hospitalized;\r\n\t\t\t\tprevDeaths = deaths;\r\n\t\t\t\tprevRecovered = recovered;\r\n\t\t\t\tdataN++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(data);\r\n\t\t\r\n\t\tthis.processData(sourceRef, data);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//No streak data or timeline functionality\r\n\t//Only data from two days/files is processed\r\nexport async function\tcallAPIGlobal(city, country, markDate, process = true) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tdata[0] = {\r\n\t\t\tDate: '',\r\n\t\t\tConfirmed: 0,\r\n\t\t\tHospitalized: 0,\r\n\t\t\tDeaths: 0,\r\n\t\t\tRecovered: 0,\r\n\t\t\tRecoveryRate: 0,\r\n\t\t\tMortalityRate: 0,\r\n\t\t\tNewConfirmed: 0,\r\n\t\t\tNewHospitalized: 0,\r\n\t\t\tNewDeaths: 0,\r\n\t\t\tNewRecovered: 0,\r\n\t\t};\r\n\t\tconst thisData = data[0];\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\twhile (lines == '') {\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tmarkDate.setDate(markDate.getDate()-1);\r\n\t\t\t//console.log(sourceDate);\r\n\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t\tthisData.Date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\tif ((lines[i].match(/\"/g) || []).length > 2)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst values = lines[i].split(',');\r\n\t\t\tif ((city != '' && city != values[2]) || (country != '' && country != values[3]))\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\r\n\t\t\tconst deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\r\n\t\t\tconst recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\r\n\t\t\tthisData.Confirmed = confirmed;\r\n\t\t\tthisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\r\n\t\t\tthisData.Deaths = deaths;\r\n\t\t\tthisData.Recovered = recovered;\r\n\t\t\tthisData.RecoveryRate = (recovered/confirmed) * 100;\r\n\t\t\tthisData.MortalityRate = (deaths/confirmed) * 100;\r\n\t\t}\r\n\t\t\r\n\t\tif (process) {\r\n\t\t\tconst prevData = await this.callAPIGlobal(city, country, markDate, false);\r\n\t\t\tthisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\r\n\t\t\tthisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\r\n\t\t\tthisData.NewDeaths = thisData.Deaths - prevData.Deaths;\r\n\t\t\tthisData.NewRecovered = thisData.Recovered - prevData.Recovered;\r\n\t\t\t\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(sourceRef, data, false);\r\n\t\t\t\r\n\t\t}\r\n\t\treturn thisData;\r\n\t}\r\n\t\r\n\t//For when Thailand is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Local scoped source, data from over 200 days are stored within only one file\r\nexport async function\tcallAPIThailand() {\r\n\t\t\r\n\t\tconst source = 'https://covid19.th-stat.com/api/open/timeline';\r\n\t\tlet data = [];\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(source, {\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tdata = response.data['Data'];\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (data != undefined) {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(source, data);\r\n\t\t}\r\n\t}\r\n\t\r\n\r\nexport function clearAxiosCalls() {\r\n\t\tthis.cancelSource.cancel('Axios operations cleared');\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t}"]},"metadata":{},"sourceType":"module"}