{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Herabat\\\\react-js\\\\covid-19-dashboard\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport '../public/jquery-jvectormap.css';\nimport dynamic from 'next/dynamic';\nvar VectorMap = dynamic(function () {\n  return import(\"react-jvectormap\").then(function (m) {\n    return m.VectorMap;\n  });\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"react-jvectormap\")];\n    },\n    modules: [\"react-jvectormap\"]\n  }\n});\nimport { fetchData, callAPIGlobalAll, callAPIGlobalTimeline, callAPIGlobal, callAPIThailand } from '../components/dataFetch.js';\n\nvar styles = function styles(theme) {\n  return {\n    appBarSpacer: theme.mixins.toolbar,\n    title: {\n      flexGrow: 1\n    },\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: \"#FFFEFE\"\n    },\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      marginTop: theme.spacing(2)\n    },\n    root: {\n      backgroundColor: \"#000000\"\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    }\n  };\n};\n\nvar darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\nvar cBlue = '#20A0E0';\nvar cOrange = '#F7B860';\nvar cRed = '#E04040';\nvar cGreen = '#80D080';\nvar cDRed = '#BB0A1E';\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      hasData: false,\n      selectCountry: 'Thailand',\n      selectCity: 'Overall',\n      countries: [],\n      globalData: [],\n      fastMode: true,\n      hasTimeline: true,\n      dataTimeline: [],\n      dataTimeline15: [],\n      data_text: {\n        updatedDate: '',\n        confirmed: '',\n        hospitalized: '',\n        deaths: '',\n        recovered: '',\n        newConfirmed: '',\n        newHospitalized: '',\n        newDeaths: '',\n        newRecovered: ''\n      },\n      data_pie: [{}],\n      lastConfirmed: 0,\n      lastDeath: 0,\n      noConfirmedStreak: 0,\n      noDeathStreak: 0,\n      rateRecovery: 0,\n      rateDeath: 0,\n      showGraph: false,\n      selectCategory: 'Hospitalized',\n      rankSelect: -1,\n      rankTopTen: [],\n      mapGlobalData: null\n    };\n    _this.referenceDate = new Date();\n\n    _this.referenceDate.setDate(_this.referenceDate.getDate() - 1);\n\n    var CancelToken = axios.CancelToken;\n    _this.cancelSource = CancelToken.source();\n\n    var _require = require(\"country-list\"),\n        getCode = _require.getCode,\n        getName = _require.getName,\n        getData = _require.getData;\n\n    _this.getCountryCode = getCode;\n    _this.getCountryName = getName;\n    _this.getCountryData = getData; //Binding functions\n\n    _this.fetchData = fetchData.bind(_assertThisInitialized(_this));\n    _this.callAPIGlobalAll = callAPIGlobalAll.bind(_assertThisInitialized(_this));\n    _this.callAPIGlobalTimeline = callAPIGlobalTimeline.bind(_assertThisInitialized(_this));\n    _this.callAPIGlobal = callAPIGlobal.bind(_assertThisInitialized(_this));\n    _this.callAPIThailand = callAPIThailand.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.callAPIGlobalAll(this.referenceDate);\n      this.fetchData(this.referenceDate);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.selectCountry != this.state.selectCountry || prevState.selectCity != this.state.selectCity || prevState.fastMode != this.state.fastMode) {\n        this.clearAxiosCalls();\n        this.fetchData(this.referenceDate);\n      }\n\n      if (prevState.selectCategory != this.state.selectCategory) this.globalRanking(this.state.selectCategory);\n    }\n  }, {\n    key: \"clearAxiosCalls\",\n    value: function clearAxiosCalls() {\n      this.cancelSource.cancel('Axios operations cleared');\n      var CancelToken = axios.CancelToken;\n      this.cancelSource = CancelToken.source();\n    }\n  }, {\n    key: \"getLastDate\",\n    value: function getLastDate(type, data) {\n      for (var i = data.length - 1; i >= 0; i--) {\n        if (data[i][type] != 0) return data[i]['Date'];\n      }\n    }\n  }, {\n    key: \"getDateDiff\",\n    value: function getDateDiff(date) {\n      var now = new Date().getTime();\n      return Math.floor((now - new Date(date).getTime()) / 86400000);\n    }\n  }, {\n    key: \"processData\",\n    value: function processData(source, data) {\n      var hasTimeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (data.length <= 0) return;\n      var lastData = data.slice(-1)[0];\n      var dataReformatted = data.slice().map(function (d) {\n        return Object.assign({}, d, {\n          Date: d.Date.slice(3, 6) + d.Date.slice(0, 2)\n        });\n      });\n      var lastUpdated = lastData['Date'];\n      var lastConfirmedFormatted = 0;\n      var lastDeathFormatted = 0;\n      var noConfirmedStreak = 0;\n      var noDeathStreak = 0;\n\n      if (hasTimeline) {\n        var lastConfirmed = this.getLastDate('NewConfirmed', data);\n        var lastDeath = this.getLastDate('NewDeaths', data);\n        lastConfirmedFormatted = lastConfirmed.slice(3, 6) + lastConfirmed.slice(0, 3) + lastConfirmed.slice(6);\n        lastDeathFormatted = lastDeath.slice(3, 6) + lastDeath.slice(0, 3) + lastDeath.slice(6);\n        noConfirmedStreak = this.getDateDiff(lastConfirmed);\n        noDeathStreak = this.getDateDiff(lastDeath);\n      }\n\n      this.setState({\n        hasData: true,\n        hasTimeline: hasTimeline,\n        dataTimeline: dataReformatted,\n        dataTimeline15: dataReformatted.slice(1).slice(-15),\n        data_text: {\n          source: source,\n          updatedDate: lastUpdated.slice(3, 6) + lastUpdated.slice(0, 3) + lastUpdated.slice(6),\n          confirmed: lastData['Confirmed'],\n          hospitalized: lastData['Hospitalized'],\n          deaths: lastData['Deaths'],\n          recovered: lastData['Recovered'],\n          newConfirmed: lastData['NewConfirmed'],\n          newHospitalized: lastData['NewHospitalized'],\n          newDeaths: lastData['NewDeaths'],\n          newRecovered: lastData['NewRecovered']\n        },\n        data_pie: [{\n          name: 'Hospitalized',\n          value: lastData['Hospitalized']\n        }, {\n          name: 'Deaths',\n          value: lastData['Deaths']\n        }, {\n          name: 'Recovered',\n          value: lastData['Recovered']\n        }],\n        lastConfirmed: lastConfirmedFormatted,\n        lastDeath: lastDeathFormatted,\n        noConfirmedStreak: noConfirmedStreak,\n        noDeathStreak: noDeathStreak,\n        rateRecovery: (100 * lastData['Recovered'] / lastData['Confirmed']).toFixed(2) + '%',\n        rateDeath: (100 * lastData['Deaths'] / lastData['Confirmed']).toFixed(2) + '%'\n      });\n    }\n  }, {\n    key: \"countryCompare\",\n    value: function countryCompare(category) {\n      return function innerSort(a, b) {\n        var valA = a[category];\n        var valB = b[category];\n\n        if (typeof valA == \"string\") {\n          valA = parseInt(valA);\n          valB = parseInt(valB);\n        }\n\n        if (valA > valB) return -1;else if (valA < valB) return 1;else return 0;\n      };\n    }\n  }, {\n    key: \"globalRankSelect\",\n    value: function globalRankSelect(ranking, country) {\n      return ranking.findIndex(function (x) {\n        return x.Country == country;\n      });\n    }\n  }, {\n    key: \"globalRankTopTen\",\n    value: function globalRankTopTen(ranking) {\n      return ranking.slice(0, 10);\n    }\n  }, {\n    key: \"globalRanking\",\n    value: function globalRanking(category) {\n      var countries = Object.values(this.state.globalData);\n      countries.sort(this.countryCompare(category)); //console.log(countries);\n\n      this.setState({\n        rankSelect: this.globalRankSelect(countries, this.state.selectCountry),\n        rankTopTen: this.globalRankTopTen(countries)\n      });\n    }\n  }, {\n    key: \"globalRankingHeading\",\n    value: function globalRankingHeading(category) {\n      if (category == 'Confirmed') return \"Confirmed Cases Count\";else if (category == 'Hospitalized') return \"Active Cases Count\";else if (category == 'Deaths') return \"Deceased Cases Count\";else if (category == 'Recovered') return \"Recovered Cases Count\";else if (category == 'RecoveryRate') return \"Recovery Rate\";else if (category == 'MortalityRate') return \"Mortality Rate\";\n    }\n  }, {\n    key: \"countryEncodeAssist\",\n    value: function countryEncodeAssist(country, countriesName) {\n      if (!countriesName.includes(country)) {\n        if (country == \"Bolivia\") country = \"Bolivia, Plurinational State of\";else if (country == \"Brunei\") country = \"Brunei Darussalam\";else if (country == \"Burma\") country = \"Myanmar\";else if (country == \"Congo (Brazzaville)\") country = \"Congo\";else if (country == \"Congo (Kinshasa)\") country = \"Congo, Democratic Republic of the\";else if (country == \"Cote d'Ivoire\") country = \"Côte d'Ivoire\";else if (country == \"Iran\") country = \"Iran, Islamic Republic of\";else if (country == \"Kosovo\") country = \"Serbia\";else if (country == \"Laos\") country = \"Lao People's Democratic Republic\";else if (country == \"Moldova\") country = \"Moldova, Republic of\";else if (country == \"Russia\") country = \"Russian Federation\";else if (country == \"Syria\") country = \"Syrian Arab Republic\";else if (country == \"Taiwan*\") country = \"Taiwan, Province of China\";else if (country == \"Tanzania\") country = \"Tanzania, United Republic of\";else if (country == \"US\") country = \"United States of America\";else if (country == \"United Kingdom\") country = \"United Kingdom of Great Britain and Northern Ireland\";else if (country == \"Venezuela\") country = \"Venezuela, Bolivarian Republic of\";else if (country == \"Vietnam\") country = \"Viet Nam\";else if (country == \"West Bank and Gaza\") country = \"Palestine, State of\";else return undefined;\n      }\n\n      var _require2 = require('country-list'),\n          getCode = _require2.getCode;\n\n      return getCode(country);\n    }\n  }, {\n    key: \"countryDecodeAssist\",\n    value: function countryDecodeAssist(code) {\n      var _require3 = require('country-list'),\n          getName = _require3.getName,\n          getNames = _require3.getNames;\n\n      var countriesName = getNames();\n      var country = getName(code);\n      if (country == \"Bolivia, Plurinational State of\") country = \"Bolivia\";else if (country == \"Brunei Darussalam\") country = \"Brunei\";else if (country == \"Myanmar\") country = \"Burma\";else if (country == \"Congo\") country = \"Congo (Brazzaville)\";else if (country == \"Congo, Democratic Republic of the\") country = \"Congo (Kinshasa)\";else if (country == \"Côte d'Ivoire\") country = \"Cote d'Ivoire\";else if (country == \"Iran, Islamic Republic of\") country = \"Iran\";else if (country == \"Serbia\") country = \"Kosovo\";else if (country == \"Lao People's Democratic Republic\") country = \"Laos\";else if (country == \"Moldova, Republic of\") country = \"Moldova\";else if (country == \"Russian Federation\") country = \"Russia\";else if (country == \"Syrian Arab Republic\") country = \"Syria\";else if (country == \"Taiwan\") country = \"Taiwan*\";else if (country == \"Tanzania, United Republic of\") country = \"Tanzania\";else if (country == \"United States of America\") country = \"US\";else if (country == \"United Kingdom of Great Britain and Northern Ireland\") country = \"United Kingdom\";else if (country == \"Venezuela, Bolivarian Republic of\") country = \"Venezuela\";else if (country == \"Viet Nam\") country = \"Vietnam\";else if (country == \"Palestine, State of\") country = \"West Bank and Gaza\";\n      return country;\n    }\n  }, {\n    key: \"processMapGlobalData\",\n    value: function processMapGlobalData(countries, globalData) {\n      var _require4 = require('country-list'),\n          getCode = _require4.getCode,\n          getNames = _require4.getNames;\n\n      var countriesName = getNames();\n      var mapGlobalData = {\n        Confirmed: {},\n        Hospitalized: {},\n        Deaths: {},\n        Recovered: {},\n        RecoveryRate: {},\n        MortalityRate: {}\n      };\n\n      for (var i = 0; i < countries.length; i++) {\n        var country = countries[i];\n        var data = globalData[country];\n        var code = this.countryEncodeAssist(country, countriesName);\n        if (code == undefined) continue;\n        mapGlobalData['Confirmed'][code] = data['Confirmed'];\n        mapGlobalData['Hospitalized'][code] = data['Hospitalized'];\n        mapGlobalData['Deaths'][code] = data['Deaths'];\n        mapGlobalData['Recovered'][code] = data['Recovered'];\n        mapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\n        mapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\n      } //console.log(mapGlobalData);\n\n\n      return mapGlobalData;\n    }\n  }, {\n    key: \"renderMap\",\n    value: function renderMap(category) {\n      var _this2 = this;\n\n      var handleClick = function handleClick(e, code) {\n        var country = _this2.countryDecodeAssist(code);\n\n        if (_this2.state.countries.includes(country)) _this2.setState({\n          selectCountry: country,\n          selectCity: 'Overall'\n        });\n      };\n\n      var data = this.state.mapGlobalData;\n      var mapData = data[category]; //console.log(mapData);\n\n      var minColor = \"#FFFFFF\";\n      var maxColor = cRed;\n      if (category == \"Recovered\" || category == \"RecoveryRate\") maxColor = cBlue;\n      var normFunction = \"polynomial\";\n      if (category == \"RecoveryRate\" || category == \"MortalityRate\") normFunction = \"linear\";\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 4\n        }\n      }, __jsx(VectorMap, {\n        map: \"world_mill\",\n        backgroundColor: \"#000000\" //\"transparent\" //change it to ocean blue: #0077be\n        ,\n        zoomOnScroll: false,\n        containerStyle: {\n          width: \"100%\",\n          height: \"520px\"\n        },\n        onRegionClick: handleClick,\n        containerClassName: \"map\",\n        regionStyle: {\n          initial: {\n            fill: \"#A0A0A0\",\n            \"fill-opacity\": 1,\n            stroke: \"white\",\n            \"stroke-width\": 0.2,\n            \"stroke-opacity\": 1\n          },\n          hover: {\n            \"fill-opacity\": 0.75,\n            cursor: \"pointer\"\n          },\n          selected: {},\n          selectedHover: {}\n        },\n        regionsSelectable: false,\n        series: {\n          regions: [{\n            values: mapData,\n            //this is your data\n            scale: [minColor, maxColor],\n            //your color game's here\n            normalizeFunction: normFunction\n          }]\n        },\n        onRegionTipShow: function onRegionTipShow(event, label, code) {\n          label.html('<b><i>' + label.html() + '</i></b></br>' + 'Confirmed: ' + data['Confirmed'][code] + '</br>' + 'Hospitalized: ' + data['Hospitalized'][code] + '</br>' + 'Deaths: ' + data['Deaths'][code] + '</br>' + 'Recovered: ' + data['Recovered'][code] + '</br>' + 'Recovery rate: ' + data['RecoveryRate'][code] + '%' + '</br>' + 'Mortality rate: ' + data['MortalityRate'][code] + '%');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 5\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          hasData = _this$state.hasData,\n          selectCountry = _this$state.selectCountry,\n          selectCity = _this$state.selectCity,\n          fastMode = _this$state.fastMode,\n          dataTimeline = _this$state.dataTimeline,\n          dataTimeline15 = _this$state.dataTimeline15,\n          data_text = _this$state.data_text,\n          data_pie = _this$state.data_pie,\n          selectCategory = _this$state.selectCategory;\n      if (!hasData) return __jsx(\"h\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 12\n        }\n      }, \"ERROR: Cannot fetch data\");\n      var selectedCountryData = this.state.globalData[selectCountry];\n      var cityChoice = [\"Overall\"];\n\n      if (selectedCountryData != undefined && selectedCountryData.CitiesN != 0) {\n        cityChoice = selectedCountryData.Cities.slice(0);\n        cityChoice.splice(0, 0, \"Overall\");\n      }\n\n      var categoryChoice = ['Confirmed', 'Hospitalized', 'Deaths', 'Recovered', 'RecoveryRate', 'MortalityRate'];\n      var rankSuffix = \" cases\";\n\n      if (selectCategory == 'RecoveryRate' || selectCategory == 'MortalityRate') {\n        rankSuffix = \"%\";\n      }\n\n      return __jsx(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 4\n        }\n      }, __jsx(CssBaseline, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 5\n        }\n      }), __jsx(AppBar, {\n        style: {\n          background: cDRed\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 5\n        }\n      }, __jsx(Toolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 6\n        }\n      }, __jsx(Typography, {\n        variant: \"h4\",\n        className: classes.title,\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 7\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 8\n        }\n      }, \"COVID-19 Dashboard\")))), __jsx(\"div\", {\n        className: classes.appBarSpacer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 5\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 5\n        }\n      }, __jsx(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 6\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 7\n        }\n      }, __jsx(MuiThemeProvider, {\n        theme: darkTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        align: \"left\",\n        color: \"textPrimary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 9\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 10\n        }\n      }), \"Last updated: \", data_text.updatedDate), __jsx(Typography, {\n        variant: \"subtitle2\",\n        align: \"left\",\n        color: \"textPrimary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 9\n        }\n      }, __jsx(\"a\", {\n        href: data_text.source,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 10\n        }\n      }, \" \", data_text.source)))), __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 7\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 8\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }\n      }), __jsx(\"button\", {\n        style: {\n          height: '32px',\n          width: '128px',\n          \"float\": 'right',\n          color: fastMode ? cDRed : 'blue'\n        },\n        onClick: function onClick() {\n          return _this3.setState({\n            fastMode: !fastMode\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 8\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 9\n        }\n      }, fastMode ? \"FAST MODE\" : \"FULL MODE\"))), __jsx(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 7\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 8\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }\n      }), __jsx(Dropdown, {\n        options: this.state.countries,\n        value: selectCountry,\n        onChange: function onChange(select) {\n          return _this3.setState({\n            selectCountry: select.value,\n            selectCity: 'Overall'\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 8\n        }\n      })), __jsx(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 7\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 8\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }\n      }), __jsx(Dropdown, {\n        options: cityChoice,\n        value: selectCity,\n        onChange: function onChange(select) {\n          return _this3.setState({\n            selectCity: select.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 8\n        }\n      })), __jsx(Grid, {\n        item: true,\n        xs: 6,\n        sm: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        style: {\n          color: 'steelblue'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 52\n        }\n      }, \"Confirmed\")), __jsx(Typography, {\n        style: {\n          color: cBlue\n        },\n        variant: \"h3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 9\n        }\n      }, data_text.confirmed.toLocaleString()), __jsx(Typography, {\n        style: {\n          color: 'steelblue'\n        },\n        variant: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 9\n        }\n      }, \"+ \", data_text.newConfirmed.toLocaleString()))), __jsx(Grid, {\n        item: true,\n        xs: 6,\n        sm: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        style: {\n          color: 'goldenrod'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 9\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 52\n        }\n      }, \"Hospitalized\")), __jsx(Typography, {\n        style: {\n          color: cOrange\n        },\n        variant: \"h3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 9\n        }\n      }, data_text.hospitalized.toLocaleString()), __jsx(Typography, {\n        style: {\n          color: 'goldenrod'\n        },\n        variant: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 9\n        }\n      }, data_text.newHospitalized >= 0 ? '+' : '-', \" \", Math.abs(data_text.newHospitalized).toLocaleString()))), __jsx(Grid, {\n        item: true,\n        xs: 6,\n        sm: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        style: {\n          color: 'fireBrick'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 9\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 52\n        }\n      }, \"Deaths\")), __jsx(Typography, {\n        style: {\n          color: cRed\n        },\n        variant: \"h3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 9\n        }\n      }, data_text.deaths.toLocaleString()), __jsx(Typography, {\n        style: {\n          color: 'fireBrick'\n        },\n        variant: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 9\n        }\n      }, \"+ \", data_text.newDeaths.toLocaleString()))), __jsx(Grid, {\n        item: true,\n        xs: 6,\n        sm: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        style: {\n          color: 'green'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 9\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 48\n        }\n      }, \"Recovered\")), __jsx(Typography, {\n        style: {\n          color: cGreen\n        },\n        variant: \"h3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 9\n        }\n      }, data_text.recovered.toLocaleString()), __jsx(Typography, {\n        style: {\n          color: 'green'\n        },\n        variant: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 9\n        }\n      }, \"+ \", data_text.newRecovered.toLocaleString()))), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 8\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 9\n        }\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 10\n        }\n      }, \"Last confirmed: \", this.state.lastConfirmed, \" (\", this.state.noConfirmedStreak, \" days ago)\"), __jsx(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 10\n        }\n      }, \"Last death: \", this.state.lastDeath, \" (\", this.state.noDeathStreak, \" days ago)\")))), __jsx(Grid, {\n        item: true,\n        xs: this.state.hasTimeline ? 6 : 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 8\n        }\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        style: {\n          color: 'green'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 9\n        }\n      }, \"Recovery Rate: \", this.state.rateRecovery), __jsx(Typography, {\n        variant: \"h6\",\n        style: {\n          color: cDRed\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 9\n        }\n      }, \"Mortality Rate: \", this.state.rateDeath)))), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 6\n        }\n      }), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(\"button\", {\n        style: {\n          height: '32px',\n          width: '144px',\n          \"float\": 'right',\n          color: this.state.showGraph ? 'grey' : 'steelblue'\n        },\n        onClick: function onClick() {\n          return _this3.setState({\n            showGraph: !_this3.state.showGraph\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 7\n        }\n      }, \"Show/Hide Graphs\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 7\n        }\n      })), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 6\n        }\n      }), this.state.showGraph && //Whether or not to display graphs\n      __jsx(React.Fragment, null, __jsx(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 6\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 8\n        }\n      }, __jsx(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 9\n        }\n      }, __jsx(BarChart, {\n        width: 500,\n        height: 300,\n        data: dataTimeline15,\n        margin: {\n          top: 5,\n          right: 5,\n          left: 0,\n          bottom: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 10\n        }\n      }, __jsx(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }\n      }), __jsx(XAxis, {\n        dataKey: \"Date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 11\n        }\n      }), __jsx(YAxis, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }\n      }), __jsx(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 11\n        }\n      }), __jsx(Legend, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }\n      }), __jsx(Bar, {\n        dataKey: \"NewConfirmed\",\n        fill: cBlue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }\n      }), __jsx(Bar, {\n        dataKey: \"NewDeaths\",\n        fill: cRed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }\n      }))))), __jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 8\n        }\n      }, __jsx(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 9\n        }\n      }, __jsx(PieChart, {\n        width: 400,\n        height: 400,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 10\n        }\n      }, __jsx(Legend, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }\n      }), __jsx(Pie, {\n        dataKey: \"value\",\n        isAnimationActive: false,\n        data: data_pie,\n        outerRadius: 100,\n        label: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }\n      }, __jsx(Cell, {\n        fill: cOrange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 12\n        }\n      }), __jsx(Cell, {\n        fill: cRed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 12\n        }\n      }), __jsx(Cell, {\n        fill: cGreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 12\n        }\n      })), __jsx(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 11\n        }\n      }))))), __jsx(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 7\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 8\n        }\n      }, __jsx(ResponsiveContainer, {\n        width: \"100%\",\n        height: 500,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 9\n        }\n      }, __jsx(LineChart, {\n        data: dataTimeline,\n        margin: {\n          top: 5,\n          right: 5,\n          left: 0,\n          bottom: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 10\n        }\n      }, __jsx(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }\n      }), __jsx(XAxis, {\n        dataKey: \"Date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 11\n        }\n      }), __jsx(YAxis, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }\n      }), __jsx(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }\n      }), __jsx(Legend, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 11\n        }\n      }), __jsx(Line, {\n        type: \"monotone\",\n        strokeWidth: 2,\n        dataKey: \"Confirmed\",\n        stroke: cBlue,\n        dot: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }\n      }), __jsx(Line, {\n        type: \"monotone\",\n        strokeWidth: 2,\n        dataKey: \"Hospitalized\",\n        stroke: cOrange,\n        dot: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }\n      }), __jsx(Line, {\n        type: \"monotone\",\n        strokeWidth: 2,\n        dataKey: \"Deaths\",\n        stroke: cRed,\n        dot: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }\n      }), __jsx(Line, {\n        type: \"monotone\",\n        strokeWidth: 2,\n        dataKey: \"Recovered\",\n        stroke: cGreen,\n        dot: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }\n      })))))), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 6\n        }\n      }), __jsx(\"button\", {\n        style: {\n          height: '32px',\n          width: '144px',\n          \"float\": 'right',\n          color: 'grey'\n        },\n        onClick: function onClick() {\n          return _this3.setState({\n            showGraph: !_this3.state.showGraph\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 6\n        }\n      }, \"Hide Graphs\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 6\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 11\n        }\n      })), __jsx(Grid, {\n        container: true,\n        spacing: 2,\n        justify: \"space-between\",\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 8\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 9\n        }\n      }, __jsx(Typography, {\n        variant: \"h5\",\n        style: {\n          color: cRed\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 10\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }\n      }, \"Global Ranking based on:\")), __jsx(Typography, {\n        variant: \"h5\",\n        style: {\n          color: cDRed\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 10\n        }\n      }, this.globalRankingHeading(selectCategory))), __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 9\n        }\n      }, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 10\n        }\n      }), __jsx(Dropdown, {\n        options: categoryChoice,\n        value: 'Hospitalized',\n        onChange: function onChange(select) {\n          return _this3.setState({\n            selectCategory: select.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 10\n        }\n      }))), __jsx(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 6\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 7\n        }\n      }, this.state.rankSelect >= 0 && __jsx(Grid, {\n        container: true,\n        spacing: 2,\n        direction: \"column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 9\n        }\n      }, __jsx(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 10\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 11\n        }\n      }, __jsx(Typography, {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 12\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }\n      }, \"Rank \", this.state.rankSelect, \". \", selectCountry, \" - \", this.state.globalData[selectCountry][selectCategory], rankSuffix), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }\n      }), \"out of \", this.state.countries.length, \" countries\"))), __jsx(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 10\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 12\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }\n      }, \"Top 10 Countries\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 36\n        }\n      })), __jsx(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 12\n        }\n      }, this.state.rankTopTen.map(function (c, i) {\n        return __jsx(React.Fragment, null, __jsx(\"b\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 15\n          }\n        }, i + 1, \".\"), \" \", c.Country, \" - \", c[selectCategory], rankSuffix, __jsx(\"br\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 74\n          }\n        }));\n      })))))), __jsx(Grid, {\n        item: true,\n        xs: 9,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 7\n        }\n      }, this.state.mapGlobalData != null && __jsx(React.Fragment, null, this.renderMap(selectCategory))))), __jsx(\"footer\", {\n        className: classes.footer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 5\n        }\n      }, __jsx(Paper, {\n        className: classes.paper,\n        style: {\n          background: \"#8F8080\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 6\n        }\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 7\n        }\n      }, __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 8\n        }\n      }, \"COVID-19 Dashboard for Tencent Thailand's Internship Project\")), __jsx(Typography, {\n        component: \"p\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 7\n        }\n      }, \"By Thanjira S. and Woottipat H.\"))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/pages/_app.js"],"names":["React","withStyles","createMuiTheme","MuiThemeProvider","AppBar","Toolbar","Typography","CssBaseline","Container","Paper","Grid","Dropdown","ResponsiveContainer","XAxis","YAxis","CartesianGrid","Tooltip","Legend","LineChart","Line","BarChart","Bar","PieChart","Pie","Cell","dynamic","VectorMap","then","m","ssr","fetchData","callAPIGlobalAll","callAPIGlobalTimeline","callAPIGlobal","callAPIThailand","styles","theme","appBarSpacer","mixins","toolbar","title","flexGrow","container","display","flexDirection","alignItems","justifyContent","paper","padding","spacing","backgroundColor","footer","palette","background","marginTop","root","formControl","margin","minWidth","selectEmpty","darkTheme","type","cBlue","cOrange","cRed","cGreen","cDRed","App","props","state","hasData","selectCountry","selectCity","countries","globalData","fastMode","hasTimeline","dataTimeline","dataTimeline15","data_text","updatedDate","confirmed","hospitalized","deaths","recovered","newConfirmed","newHospitalized","newDeaths","newRecovered","data_pie","lastConfirmed","lastDeath","noConfirmedStreak","noDeathStreak","rateRecovery","rateDeath","showGraph","selectCategory","rankSelect","rankTopTen","mapGlobalData","referenceDate","Date","setDate","getDate","CancelToken","axios","cancelSource","source","require","getCode","getName","getData","getCountryCode","getCountryName","getCountryData","bind","prevProps","prevState","clearAxiosCalls","globalRanking","cancel","data","i","length","date","now","getTime","Math","floor","lastData","slice","dataReformatted","map","d","Object","assign","lastUpdated","lastConfirmedFormatted","lastDeathFormatted","getLastDate","getDateDiff","setState","name","value","toFixed","category","innerSort","a","b","valA","valB","parseInt","ranking","country","findIndex","x","Country","values","sort","countryCompare","globalRankSelect","globalRankTopTen","countriesName","includes","undefined","code","getNames","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","MortalityRate","countryEncodeAssist","parseFloat","handleClick","e","countryDecodeAssist","mapData","minColor","maxColor","normFunction","width","height","initial","fill","stroke","hover","cursor","selected","selectedHover","regions","scale","normalizeFunction","event","label","html","classes","selectedCountryData","cityChoice","CitiesN","Cities","splice","categoryChoice","rankSuffix","color","select","toLocaleString","abs","top","right","left","bottom","globalRankingHeading","c","renderMap","Component"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, \r\n  Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, \r\n  Pie, Cell, } from 'recharts';\r\nimport '../public/jquery-jvectormap.css'\r\n\r\nimport dynamic from 'next/dynamic'\r\nconst VectorMap = dynamic(\r\n  () => import(\"react-jvectormap\").then((m) => m.VectorMap),\r\n  { ssr: false, }\r\n);\r\n\r\nimport {fetchData, callAPIGlobalAll, callAPIGlobalTimeline, callAPIGlobal, callAPIThailand} from '../components/dataFetch.js';\r\n  \r\nconst styles = theme => ({\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n\t\tbackgroundColor: \"#FFFEFE\",\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: theme.spacing(2),\r\n  },\r\n\troot: {\r\n    backgroundColor: \"#000000\",\r\n  },\r\n\tformControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nconst cBlue = '#20A0E0';\r\nconst cOrange = '#F7B860';\r\nconst cRed = '#E04040';\r\nconst cGreen = '#80D080';\r\nconst cDRed = '#BB0A1E';\r\n\r\nclass App extends React.Component {\r\n\t\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasData: false,\r\n\t\t\tselectCountry: 'Thailand',\r\n\t\t\tselectCity: 'Overall',\r\n\t\t\tcountries: [],\r\n\t\t\tglobalData: [],\r\n\t\t\tfastMode: true,\r\n\t\t\thasTimeline: true,\r\n\t\t\tdataTimeline: [],\r\n\t\t\tdataTimeline15: [],\r\n\t\t\tdata_text: {\r\n\t\t\t\tupdatedDate: '',\r\n\t\t\t\tconfirmed: '',\r\n\t\t\t\thospitalized: '',\r\n\t\t\t\tdeaths: '',\r\n\t\t\t\trecovered: '',\r\n\t\t\t\tnewConfirmed: '',\r\n\t\t\t\tnewHospitalized: '',\r\n\t\t\t\tnewDeaths: '',\r\n\t\t\t\tnewRecovered: '',\r\n\t\t\t},\r\n\t\t\tdata_pie: [{}],\r\n\t\t\tlastConfirmed: 0,\r\n\t\t\tlastDeath: 0,\r\n\t\t\tnoConfirmedStreak: 0,\r\n\t\t\tnoDeathStreak: 0,\r\n\t\t\trateRecovery: 0,\r\n\t\t\trateDeath: 0,\r\n\t\t\tshowGraph: false,\r\n\t\t\tselectCategory: 'Hospitalized',\r\n\t\t\trankSelect: -1,\r\n\t\t\trankTopTen: [],\r\n\t\t\tmapGlobalData: null,\r\n\t\t};\r\n\t\t\r\n\t\tthis.referenceDate = new Date();\r\n\t\tthis.referenceDate.setDate(this.referenceDate.getDate()-1);\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t\t\r\n\t\tconst { getCode, getName, getData } = require(\"country-list\");\r\n\t\tthis.getCountryCode = getCode;\r\n\t\tthis.getCountryName = getName;\r\n\t\tthis.getCountryData = getData;\r\n\t\t\r\n\t\t//Binding functions\r\n\t\tthis.fetchData = fetchData.bind(this);\r\n\t\tthis.callAPIGlobalAll = callAPIGlobalAll.bind(this);\r\n\t\tthis.callAPIGlobalTimeline = callAPIGlobalTimeline.bind(this);\r\n\t\tthis.callAPIGlobal = callAPIGlobal.bind(this);\r\n\t\tthis.callAPIThailand = callAPIThailand.bind(this);\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t\tthis.callAPIGlobalAll(this.referenceDate);\r\n\t\tthis.fetchData(this.referenceDate);\r\n  }\r\n\t\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif ((prevState.selectCountry != this.state.selectCountry) ||\r\n     \t\t(prevState.selectCity != this.state.selectCity) ||\r\n\t\t\t\t(prevState.fastMode != this.state.fastMode))\r\n\t\t{\r\n\t\t\tthis.clearAxiosCalls();\r\n\t\t\tthis.fetchData(this.referenceDate);\r\n\t\t}\r\n\t\t\r\n\t\tif (prevState.selectCategory != this.state.selectCategory)\r\n\t\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\tclearAxiosCalls() {\r\n\t\tthis.cancelSource.cancel('Axios operations cleared');\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t}\r\n\t\r\n\tgetLastDate(type, data) {\r\n\t\tfor (let i=data.length-1; i>=0; i--) {\r\n\t\t\tif (data[i][type] != 0)\r\n\t\t\t\treturn data[i]['Date'];\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDateDiff(date) {\r\n\t\tlet now = (new Date()).getTime();\r\n\t\treturn Math.floor((now - (new Date(date)).getTime())/86400000);\r\n\t}\r\n\t\r\n\tprocessData(source, data, hasTimeline = true) {\r\n\t\tif (data.length <= 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tconst lastData = data.slice(-1)[0];\r\n\t\tconst dataReformatted = data.slice().map(d => {\r\n\t\t\treturn (\r\n\t\t\t\tObject.assign({},d,{\r\n\t\t\t\t\tDate: d.Date.slice(3,6) + d.Date.slice(0,2)\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\t\t\r\n\t\tconst lastUpdated = lastData['Date'];\r\n\t\tlet lastConfirmedFormatted = 0;\r\n\t\tlet lastDeathFormatted = 0;\r\n\t\tlet noConfirmedStreak = 0;\r\n\t\tlet noDeathStreak = 0;\r\n\r\n\t\tif (hasTimeline) {\r\n\t\t\tconst lastConfirmed = this.getLastDate('NewConfirmed',data);\r\n\t\t\tconst lastDeath = this.getLastDate('NewDeaths',data);\r\n\t\t\tlastConfirmedFormatted = lastConfirmed.slice(3,6) + lastConfirmed.slice(0,3) + lastConfirmed.slice(6);\r\n\t\t\tlastDeathFormatted = lastDeath.slice(3,6) + lastDeath.slice(0,3) + lastDeath.slice(6);\r\n\t\t\tnoConfirmedStreak = this.getDateDiff(lastConfirmed);\r\n\t\t\tnoDeathStreak = this.getDateDiff(lastDeath);\r\n\t\t}\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thasData: true,\r\n\t\t\thasTimeline: hasTimeline,\r\n\t\t\tdataTimeline: dataReformatted,\r\n\t\t\tdataTimeline15: dataReformatted.slice(1).slice(-15),\r\n\t\t\tdata_text: {\r\n\t\t\t\tsource: source,\r\n\t\t\t\tupdatedDate: lastUpdated.slice(3,6) + lastUpdated.slice(0,3) + lastUpdated.slice(6),\r\n\t\t\t\tconfirmed: lastData['Confirmed'],\r\n\t\t\t\thospitalized: lastData['Hospitalized'],\r\n\t\t\t\tdeaths: lastData['Deaths'],\r\n\t\t\t\trecovered: lastData['Recovered'],\r\n\t\t\t\tnewConfirmed: lastData['NewConfirmed'],\r\n\t\t\t\tnewHospitalized: lastData['NewHospitalized'],\r\n\t\t\t\tnewDeaths: lastData['NewDeaths'],\r\n\t\t\t\tnewRecovered: lastData['NewRecovered'],\r\n\t\t\t},\r\n\t\t\tdata_pie: [\r\n\t\t\t\t{ name: 'Hospitalized', value: lastData['Hospitalized'] },\r\n\t\t\t\t{ name: 'Deaths', value: lastData['Deaths'] },\r\n\t\t\t\t{ name: 'Recovered', value: lastData['Recovered'] },\r\n\t\t\t],\r\n\t\t\tlastConfirmed: lastConfirmedFormatted,\r\n\t\t\tlastDeath: lastDeathFormatted,\r\n\t\t\tnoConfirmedStreak: noConfirmedStreak,\r\n\t\t\tnoDeathStreak: noDeathStreak,\r\n\t\t\trateRecovery: (100*lastData['Recovered']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t\t\trateDeath: (100*lastData['Deaths']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t\t});\r\n\t}\r\n\t\r\n\tcountryCompare(category) {\r\n\t\treturn function innerSort(a,b) {\r\n\t\t\tlet valA = a[category];\r\n\t\t\tlet valB = b[category];\r\n\t\t\tif (typeof valA == \"string\") {\r\n\t\t\t\tvalA = parseInt(valA);\r\n\t\t\t\tvalB = parseInt(valB);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (valA > valB)\r\n\t\t\t\treturn -1;\r\n\t\t\telse if (valA < valB)\r\n\t\t\t\treturn 1;\r\n\t\t\telse return 0;\r\n\t\t};\r\n\t}\r\n\t\r\n\tglobalRankSelect(ranking, country) {\r\n\t\treturn ranking.findIndex(x => x.Country == country);\r\n\t}\r\n\t\r\n\tglobalRankTopTen(ranking) {\r\n\t\treturn ranking.slice(0,10);\r\n\t}\r\n\t\r\n\tglobalRanking(category) {\r\n\t\tconst countries = Object.values(this.state.globalData);\r\n\t\tcountries.sort(this.countryCompare(category));\r\n\t\t//console.log(countries);\r\n\t\tthis.setState({\r\n\t\t\trankSelect: this.globalRankSelect(countries, this.state.selectCountry),\r\n\t\t\trankTopTen: this.globalRankTopTen(countries),\r\n\t\t});\r\n\t}\r\n\t\r\n\tglobalRankingHeading(category) {\r\n\t\tif (category == 'Confirmed')\r\n\t\t\treturn \"Confirmed Cases Count\";\r\n\t\telse if (category == 'Hospitalized')\r\n\t\t\treturn \"Active Cases Count\";\r\n\t\telse if (category == 'Deaths')\r\n\t\t\treturn \"Deceased Cases Count\";\r\n\t\telse if (category == 'Recovered')\r\n\t\t\treturn \"Recovered Cases Count\";\r\n\t\telse if (category == 'RecoveryRate')\r\n\t\t\treturn \"Recovery Rate\";\r\n\t\telse if (category == 'MortalityRate')\r\n\t\t\treturn \"Mortality Rate\";\r\n\t}\r\n\t\r\n\tcountryEncodeAssist(country, countriesName) {\r\n\t\tif (!countriesName.includes(country)) {\r\n\t\t\tif (country == \"Bolivia\")\r\n\t\t\t\tcountry = \"Bolivia, Plurinational State of\";\r\n\t\t\telse if (country == \"Brunei\")\r\n\t\t\t\tcountry = \"Brunei Darussalam\";\r\n\t\t\telse if (country == \"Burma\")\r\n\t\t\t\tcountry = \"Myanmar\";\r\n\t\t\telse if (country == \"Congo (Brazzaville)\")\r\n\t\t\t\tcountry = \"Congo\";\r\n\t\t\telse if (country == \"Congo (Kinshasa)\")\r\n\t\t\t\tcountry = \"Congo, Democratic Republic of the\";\r\n\t\t\telse if (country == \"Cote d'Ivoire\")\r\n\t\t\t\tcountry = \"Côte d'Ivoire\";\r\n\t\t\telse if (country == \"Iran\")\r\n\t\t\t\tcountry = \"Iran, Islamic Republic of\";\r\n\t\t\telse if (country == \"Kosovo\")\r\n\t\t\t\tcountry = \"Serbia\";\r\n\t\t\telse if (country == \"Laos\")\r\n\t\t\t\tcountry = \"Lao People's Democratic Republic\";\r\n\t\t\telse if (country == \"Moldova\")\r\n\t\t\t\tcountry = \"Moldova, Republic of\";\r\n\t\t\telse if (country == \"Russia\")\r\n\t\t\t\tcountry = \"Russian Federation\";\r\n\t\t\telse if (country == \"Syria\")\r\n\t\t\t\tcountry = \"Syrian Arab Republic\";\r\n\t\t\telse if (country == \"Taiwan*\")\r\n\t\t\t\tcountry = \"Taiwan, Province of China\";\r\n\t\t\telse if (country == \"Tanzania\")\r\n\t\t\t\tcountry = \"Tanzania, United Republic of\";\r\n\t\t\telse if (country == \"US\")\r\n\t\t\t\tcountry = \"United States of America\";\r\n\t\t\telse if (country == \"United Kingdom\")\r\n\t\t\t\tcountry = \"United Kingdom of Great Britain and Northern Ireland\";\r\n\t\t\telse if (country == \"Venezuela\")\r\n\t\t\t\tcountry = \"Venezuela, Bolivarian Republic of\";\r\n\t\t\telse if (country == \"Vietnam\")\r\n\t\t\t\tcountry = \"Viet Nam\";\r\n\t\t\telse if (country == \"West Bank and Gaza\")\r\n\t\t\t\tcountry = \"Palestine, State of\";\r\n\t\t\telse return undefined;\r\n\t\t}\r\n\t\t\r\n\t\tconst { getCode } = require('country-list');\r\n\t\treturn getCode(country);\r\n\t}\r\n\t\r\n\tcountryDecodeAssist(code) {\r\n\t\tconst { getName, getNames } = require('country-list');\r\n\t\tconst countriesName = getNames();\r\n\t\tlet country = getName(code);\r\n\t\t\r\n\t\tif (country == \"Bolivia, Plurinational State of\")\r\n\t\t\tcountry = \"Bolivia\";\r\n\t\telse if (country == \"Brunei Darussalam\")\r\n\t\t\tcountry = \"Brunei\";\r\n\t\telse if (country == \"Myanmar\")\r\n\t\t\tcountry = \"Burma\";\r\n\t\telse if (country == \"Congo\")\r\n\t\t\tcountry = \"Congo (Brazzaville)\";\r\n\t\telse if (country == \"Congo, Democratic Republic of the\")\r\n\t\t\tcountry = \"Congo (Kinshasa)\";\r\n\t\telse if (country == \"Côte d'Ivoire\")\r\n\t\t\tcountry = \"Cote d'Ivoire\";\r\n\t\telse if (country == \"Iran, Islamic Republic of\")\r\n\t\t\tcountry = \"Iran\";\r\n\t\telse if (country == \"Serbia\")\r\n\t\t\tcountry = \"Kosovo\";\r\n\t\telse if (country == \"Lao People's Democratic Republic\")\r\n\t\t\tcountry = \"Laos\";\r\n\t\telse if (country == \"Moldova, Republic of\")\r\n\t\t\tcountry = \"Moldova\";\r\n\t\telse if (country == \"Russian Federation\")\r\n\t\t\tcountry = \"Russia\";\r\n\t\telse if (country == \"Syrian Arab Republic\")\r\n\t\t\tcountry = \"Syria\";\r\n\t\telse if (country == \"Taiwan\")\r\n\t\t\tcountry = \"Taiwan*\";\r\n\t\telse if (country == \"Tanzania, United Republic of\")\r\n\t\t\tcountry = \"Tanzania\";\r\n\t\telse if (country == \"United States of America\")\r\n\t\t\tcountry = \"US\";\r\n\t\telse if (country == \"United Kingdom of Great Britain and Northern Ireland\")\r\n\t\t\tcountry = \"United Kingdom\";\r\n\t\telse if (country == \"Venezuela, Bolivarian Republic of\")\r\n\t\t\tcountry = \"Venezuela\";\r\n\t\telse if (country == \"Viet Nam\")\r\n\t\t\tcountry = \"Vietnam\";\r\n\t\telse if (country == \"Palestine, State of\")\r\n\t\t\tcountry = \"West Bank and Gaza\";\r\n\r\n\t\treturn country;\r\n\t}\r\n\t\r\n\tprocessMapGlobalData(countries, globalData) {\r\n\t\tconst { getCode, getNames } = require('country-list');\r\n\t\tconst countriesName = getNames();\r\n\t\tconst mapGlobalData = {\r\n\t\t\tConfirmed: {},\r\n\t\t\tHospitalized: {},\r\n\t\t\tDeaths: {},\r\n\t\t\tRecovered: {},\r\n\t\t\tRecoveryRate: {},\r\n\t\t\tMortalityRate: {},\r\n\t\t};\r\n\r\n\t\tfor (let i=0; i<countries.length; i++) {\r\n\t\t\tconst country = countries[i];\r\n\t\t\tconst data = globalData[country];\r\n\t\t\t\r\n\t\t\tconst code = this.countryEncodeAssist(country,countriesName);\r\n\t\t\tif (code == undefined)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tmapGlobalData['Confirmed'][code] = data['Confirmed'];\r\n\t\t\tmapGlobalData['Hospitalized'][code] = data['Hospitalized'];\r\n\t\t\tmapGlobalData['Deaths'][code] = data['Deaths'];\r\n\t\t\tmapGlobalData['Recovered'][code] = data['Recovered'];\r\n\t\t\tmapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\r\n\t\t\tmapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\r\n\t\t}\r\n\t\t//console.log(mapGlobalData);\r\n\t\treturn mapGlobalData;\r\n\t}\r\n\t\r\n\trenderMap(category) {\r\n\t\tconst handleClick = (e, code) => {\r\n\t\t\tconst country = this.countryDecodeAssist(code);\r\n\t\t\tif (this.state.countries.includes(country))\r\n\t\t\t\tthis.setState({ selectCountry: country, selectCity: 'Overall'});\r\n\t\t};\r\n\t\t\r\n\t\tconst data = this.state.mapGlobalData;\r\n\t\tconst mapData = data[category];\r\n\t\t//console.log(mapData);\r\n\t\t\r\n\t\tlet minColor = \"#FFFFFF\";\r\n\t\tlet maxColor = cRed;\r\n\t\tif (category == \"Recovered\" || category == \"RecoveryRate\")\r\n\t\t\tmaxColor = cBlue;\r\n\t\t\r\n\t\tlet normFunction = \"polynomial\";\r\n\t\tif (category == \"RecoveryRate\" || category == \"MortalityRate\")\r\n\t\t\tnormFunction = \"linear\";\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<VectorMap\r\n\t\t\t\t\tmap={\"world_mill\"}\r\n\t\t\t\t\tbackgroundColor=\"#000000\"//\"transparent\" //change it to ocean blue: #0077be\r\n\t\t\t\t\tzoomOnScroll={false}\r\n\t\t\t\t\tcontainerStyle={{\r\n\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\theight: \"520px\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionClick={handleClick}\r\n\t\t\t\t\tcontainerClassName=\"map\"\r\n\t\t\t\t\tregionStyle={{\r\n\t\t\t\t\t\tinitial: {\r\n\t\t\t\t\t\t\tfill: \"#A0A0A0\",\r\n\t\t\t\t\t\t\t\"fill-opacity\": 1,\r\n\t\t\t\t\t\t\tstroke: \"white\",\r\n\t\t\t\t\t\t\t\"stroke-width\": 0.2,\r\n\t\t\t\t\t\t\t\"stroke-opacity\": 1\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\thover: {\r\n\t\t\t\t\t\t\t\"fill-opacity\": 0.75,\r\n\t\t\t\t\t\t\tcursor: \"pointer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tselected: {},\r\n\t\t\t\t\t\tselectedHover: {}\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tregionsSelectable={false}\r\n\t\t\t\t\tseries={{\r\n\t\t\t\t\t\tregions: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvalues: mapData, //this is your data\r\n\t\t\t\t\t\t\t\tscale: [minColor, maxColor], //your color game's here\r\n\t\t\t\t\t\t\t\tnormalizeFunction: normFunction\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionTipShow={(event, label, code) => {\r\n\t\t\t\t\t\tlabel.html(\r\n\t\t\t\t\t\t\t'<b><i>'+label.html()+'</i></b></br>'+\r\n\t\t\t\t\t\t\t'Confirmed: '+data['Confirmed'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Hospitalized: '+data['Hospitalized'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Deaths: '+data['Deaths'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovered: '+data['Recovered'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovery rate: '+data['RecoveryRate'][code]+'%'+'</br>'+\r\n\t\t\t\t\t\t\t'Mortality rate: '+data['MortalityRate'][code]+'%'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tconst {\r\n\t\t\thasData, selectCountry, selectCity, fastMode, \r\n\t\t\tdataTimeline, dataTimeline15, data_text, data_pie,\r\n\t\t\tselectCategory\r\n\t\t} = this.state;\r\n\t\t\r\n\t\tif (!hasData)\r\n\t\t\treturn (<h>ERROR: Cannot fetch data</h>);\r\n\t\t\r\n\t\tconst selectedCountryData = this.state.globalData[selectCountry];\r\n\t\tlet cityChoice = [\"Overall\"];\r\n\t\tif (selectedCountryData != undefined && selectedCountryData.CitiesN != 0) {\r\n\t\t\tcityChoice = selectedCountryData.Cities.slice(0);\r\n\t\t\tcityChoice.splice(0,0,\"Overall\");\r\n\t\t}\r\n\t\t\r\n\t\tconst categoryChoice = ['Confirmed', 'Hospitalized', 'Deaths', 'Recovered', 'RecoveryRate', 'MortalityRate'];\r\n\t\tlet rankSuffix = \" cases\";\r\n\t\tif ((selectCategory == 'RecoveryRate') || (selectCategory == 'MortalityRate')) {\r\n\t\t\trankSuffix = \"%\";\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<CssBaseline/>\r\n\t\t\t\t<AppBar style={{background: cDRed}}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Typography variant=\"h4\" className={classes.title} align=\"center\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<div className={classes.appBarSpacer}/>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\r\n\t\t\t\t\t\t{/*-------------------------------- Source Info --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={4}>\r\n\t\t\t\t\t\t\t<MuiThemeProvider theme={darkTheme}>\r\n\t\t\t\t\t\t\t\t<Typography align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\tLast updated: {data_text.updatedDate}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant=\"subtitle2\" align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={data_text.source}\r\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"> {\r\n\t\t\t\t\t\t\t\t\t\tdata_text.source\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</MuiThemeProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Fetch Control --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: '32px',\r\n\t\t\t\t\t\t\t\t\twidth : '128px',\r\n\t\t\t\t\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\t\t\t\t\tcolor: (fastMode ? cDRed : 'blue')\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonClick={() => this.setState({ fastMode: !fastMode })}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<b>{fastMode ? \"FAST MODE\" : \"FULL MODE\"}</b>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<Dropdown options={this.state.countries} value={selectCountry}\r\n\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCountry: select.value, selectCity: 'Overall' })}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<Dropdown options={cityChoice} value={selectCity}\r\n\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCity:select.value })}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Numbers --------------------------------*/}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'steelblue' }}><b>Confirmed</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cBlue }} variant=\"h3\">{data_text.confirmed.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'steelblue' }} variant=\"h5\">+ {data_text.newConfirmed.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'goldenrod' }}><b>Hospitalized</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cOrange }} variant=\"h3\">{data_text.hospitalized.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'goldenrod' }} variant=\"h5\">\r\n\t\t\t\t\t\t\t\t\t{(data_text.newHospitalized >= 0) ? '+' : '-'} {Math.abs(data_text.newHospitalized).toLocaleString()}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'fireBrick' }}><b>Deaths</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cRed }} variant=\"h3\">{data_text.deaths.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'fireBrick' }} variant=\"h5\">+ {data_text.newDeaths.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'green' }}><b>Recovered</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cGreen }} variant=\"h3\">{data_text.recovered.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'green' }} variant=\"h5\">+ {data_text.newRecovered.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Streaks --------------------------------*/}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t{ this.state.hasTimeline && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\tLast confirmed: {this.state.lastConfirmed} ({this.state.noConfirmedStreak} days ago)\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\tLast death: {this.state.lastDeath} ({this.state.noDeathStreak} days ago)\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Rates --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={ this.state.hasTimeline ? 6 : 12}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography variant='h6' style={{ color: 'green' }}>\r\n\t\t\t\t\t\t\t\t\tRecovery Rate: {this.state.rateRecovery}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant='h6' style={{ color: cDRed }}>\r\n\t\t\t\t\t\t\t\t\tMortality Rate: {this.state.rateDeath}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t{/*-------------------------------- Graphs --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t\t{/*Button to toggle graph display*/}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t{ this.state.hasTimeline && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\theight: '32px',\r\n\t\t\t\t\t\t\t\twidth : '144px',\r\n\t\t\t\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\t\t\t\tcolor: (this.state.showGraph ? 'grey' : 'steelblue')\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tShow/Hide Graphs\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{ this.state.showGraph && (\t//Whether or not to display graphs\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t{/*Bar, last 14 days*/}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\t\t\t\twidth={500}\r\n\t\t\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline15}\r\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\"/>\r\n\t\t\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewConfirmed\" fill={cBlue}/>\r\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewDeaths\" fill={cRed}/>\r\n\t\t\t\t\t\t\t\t\t</BarChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*Pie, in total*/}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t\t\t<PieChart width={400}\theight={400}>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Pie dataKey=\"value\" isAnimationActive={false} data={data_pie} outerRadius={100} label>\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cOrange} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cRed} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cGreen} />\r\n\t\t\t\t\t\t\t\t\t\t</Pie>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t</PieChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*Bar, in total*/}\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={500}>\r\n\t\t\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline}\r\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5 }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\" />\r\n\t\t\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Confirmed\" stroke={cBlue} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Hospitalized\" stroke={cOrange} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Deaths\" stroke={cRed} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Recovered\" stroke={cGreen} dot={false} />\r\n\t\t\t\t\t\t\t\t\t</LineChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tstyle={{ height: '32px', width : '144px', float: 'right', color: 'grey' }}\r\n\t\t\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tHide Graphs\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\r\n\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Rankings --------------------------------*/}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Grid container spacing={2} justify=\"space-between\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h5' style={{ color: cRed }}>\r\n\t\t\t\t\t\t\t\t\t\t<b>Global Ranking based on:</b>\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h5' style={{ color: cDRed }}>\r\n\t\t\t\t\t\t\t\t\t\t{this.globalRankingHeading(selectCategory)}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<Dropdown options={categoryChoice} value={'Hospitalized'}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCategory: select.value})}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t{ (this.state.rankSelect >= 0) && (\r\n\t\t\t\t\t\t\t\t<Grid container spacing={2} direction='column'>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography align='center'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Rank {this.state.rankSelect}. {selectCountry} - {this.state.globalData[selectCountry][selectCategory]}{rankSuffix}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<br/>out of {this.state.countries.length} countries\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Top 10 Countries</b><br/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.rankTopTen.map((c, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<><b>{i+1}.</b> {c.Country} - {c[selectCategory]}{rankSuffix}<br/></>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Map --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={9}>\r\n\t\t\t\t\t\t\t{ (this.state.mapGlobalData != null) && (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t{this.renderMap(selectCategory)}\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t\t</Container>\r\n\t\t\t\t\r\n\t\t\t\t{/*-------------------------------- Footer --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t<footer className={classes.footer}>\r\n\t\t\t\t\t<Paper className={classes.paper} style={{background: \"#8F8080\"}}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard for Tencent Thailand's Internship Project</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography component=\"p\">\r\n\t\t\t\t\t\t\tBy Thanjira S. and Woottipat H.\r\n            </Typography>\r\n          </Paper>\r\n        </footer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}