{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Herabat\\\\react-js\\\\covid-19-dashboard\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport axios from 'axios';\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\nconst styles = theme => ({\n  appBarSpacer: theme.mixins.toolbar,\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: \"#FFFEFE\"\n  },\n  paperFoot: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: \"#777070\"\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(2)\n  },\n  root: {\n    backgroundColor: \"#000000\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n});\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      refDate: new Date(2020, 7, 20),\n      selectCountry: 'Thailand',\n      selectCity: 'Overall',\n      countries: [],\n      globalData: [],\n      hasTimeline: true,\n      dataTimeline: [],\n      dataTimeline15: [],\n      data_text: {\n        updatedDate: '',\n        confirmed: '',\n        hospitalized: '',\n        deaths: '',\n        recovered: '',\n        newConfirmed: '',\n        newHospitalized: '',\n        newDeaths: '',\n        newRecovered: ''\n      },\n      data_pie: [{}],\n      lastConfirmed: 0,\n      lastDeath: 0,\n      noConfirmedStreak: 0,\n      noDeathStreak: 0,\n      rateRecovery: 0,\n      rateDeath: 0,\n      showGraph: false\n    };\n  }\n\n  componentDidMount() {\n    this.callAPIGlobalAll(this.state.refDate);\n    this.fetchData(this.state.refDate);\n  }\n\n  fetchData(refDate) {\n    console.log(this.state.selectCountry);\n    console.log(this.state.selectCity);\n    if (this.state.selectCountry == 'Thailand') this.callAPIThailand();else this.callAPIGlobal(this.state.selectCity, this.state.selectCountry, refDate); //else this.callAPIGlobalTimeline(this.state.selectCity,this.state.selectCountry);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.state.selectCountry != this.props.state.selectCountry) {\n      this.fetchData(this.state.refDate);\n    }\n  } //For ranking and map functionalities\n  //Only data from one day/file is processed\n\n\n  async callAPIGlobalAll(markDate) {\n    let countries = [];\n    let countriesN = 0;\n    let data = new Object();\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    const formatChange = new Date(2020, 2, 22).getTime();\n    let cityIndex = 0;\n    let countryIndex = 1;\n    let conIndex = 3;\n    let deathIndex = 4;\n    let recIndex = 5;\n    let quoteLimit = 0; //Workaround for source's formatting inconsistencies\n\n    if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n      cityIndex = 2;\n      countryIndex = 3;\n      conIndex = 7;\n      deathIndex = 8;\n      recIndex = 9;\n      quoteLimit = 2;\n    }\n\n    let lines = '';\n    const markDateStr = markDate.toISOString();\n    const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear(); //console.log(sourceDate);\n\n    try {\n      const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n        headers: {\n          'Content-Type': 'text/csv'\n        }\n      });\n      lines = response.data.split(/\\r?\\n/);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (lines != '') {\n      for (let i = 1; i < lines.length; i++) {\n        if (lines[i] == '' || (lines[i].match(/\"/g) || []).length > quoteLimit) continue;\n        const values = lines[i].split(',');\n        const country = values[countryIndex];\n        const city = values[cityIndex];\n        let confirmed = parseInt(values[conIndex]);\n        let hospitalized = parseInt(values[10]);\n        let deaths = parseInt(values[deathIndex]);\n        let recovered = parseInt(values[recIndex]);\n\n        if (data[country] != undefined) {\n          confirmed += data[country][\"Confirmed\"];\n          hospitalized += data[country][\"Hospitalized\"];\n          deaths += data[country][\"Deaths\"];\n          recovered += data[country][\"Recovered\"];\n        } else {\n          data[country] = new Object();\n          data[country].Cities = [];\n          data[country].CitiesN = 0;\n          countries[countriesN] = country;\n          countriesN++;\n        }\n\n        const citiesN = data[country].CitiesN;\n        data[country].Confirmed = confirmed;\n        data[country].Hospitalized = hospitalized;\n        data[country].Deaths = deaths;\n        data[country].Recovered = recovered;\n        data[country].RecoveryRate = recovered / confirmed * 100;\n        data[country].MortalityRate = deaths / confirmed * 100;\n\n        if (city != '') {\n          data[country].Cities[citiesN] = city;\n          data[country].CitiesN = citiesN + 1;\n        }\n      } //console.log(data);\n\n\n      this.setState({\n        countries: countries,\n        globalData: data\n      }); //console.log(this.state.countries);\n    }\n  } //When foreign country is selected\n  //Provides retrospective data and graph functionalities\n  //Taxing, over 200 days/files must be processed\n  //Somehow sometimes fast, sometimes slow. Cause still unknown.\n\n\n  async callAPIGlobalTimeline(city, country) {\n    if (city == 'Overall') {\n      city = '';\n    }\n\n    let data = [{}];\n    let dataN = 0;\n    let prevConfirmed = 0;\n    let prevHospitalized = 0;\n    let prevDeaths = 0;\n    let prevRecovered = 0;\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    let markDate = new Date(2020, 0, 23);\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const now = tomorrow.getTime();\n    let cityIndex = 0;\n    let countryIndex = 1;\n    let conIndex = 3;\n    let deathIndex = 4;\n    let recIndex = 5;\n    let lastIndex = 1;\n    const formatChange = new Date(2020, 2, 22).getTime();\n\n    while (markDate.getTime() < now) {\n      let lines = '';\n      const markDateStr = markDate.toISOString();\n      const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n      console.log(sourceDate); //console.log(lastIndex);\n      //Workaround for source's formatting inconsistencies\n\n      if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n        cityIndex = 2;\n        countryIndex = 3;\n        conIndex = 7;\n        deathIndex = 8;\n        recIndex = 9;\n      }\n\n      try {\n        const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n          headers: {\n            'Content-Type': 'text/csv'\n          }\n        });\n        lines = response.data.split(/\\r?\\n/);\n      } catch (err) {\n        console.log(err);\n      }\n\n      markDate.setDate(markDate.getDate() + 1);\n      if (lines == '') continue;\n      console.log(lastIndex);\n      const date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n      let values = undefined;\n      if (lines[lastIndex]) values = lines[lastIndex].split(',');else lastIndex = 1;\n\n      if (values == undefined || city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n        for (let i = lastIndex + 1; i < lines.length; i++) {\n          values = lines[i].split(',');\n\n          if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n            values = undefined;\n            continue;\n          }\n\n          lastIndex = i;\n          break;\n        }\n\n        if (values == undefined) {\n          for (let i = 1; i < lastIndex; i++) {\n            values = lines[i].split(',');\n\n            if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n              values = undefined;\n              continue;\n            }\n\n            lastIndex = i;\n            break;\n          }\n        }\n      }\n\n      if (values != undefined) {\n        const confirmed = parseInt(values[conIndex]);\n        const hospitalized = parseInt(values[10]);\n        const deaths = parseInt(values[deathIndex]);\n        const recovered = parseInt(values[recIndex]);\n        data[dataN] = {\n          Date: date,\n          Confirmed: confirmed,\n          Hospitalized: hospitalized,\n          Deaths: deaths,\n          Recovered: recovered,\n          NewConfirmed: confirmed - prevConfirmed,\n          NewHospitalized: hospitalized - prevHospitalized,\n          NewDeaths: deaths - prevDeaths,\n          NewRecovered: recovered - prevRecovered\n        };\n        prevConfirmed = confirmed;\n        prevHospitalized = hospitalized;\n        prevDeaths = deaths;\n        prevRecovered = recovered;\n        dataN++;\n      }\n    }\n\n    console.log(data);\n    this.processData(sourceRef, data);\n  } //When foreign country is selected\n  //No streak data or timeline functionality\n  //Only data from two days/files is processed\n\n\n  async callAPIGlobal(city, country, markDate, process = true) {\n    if (city == 'Overall') {\n      city = '';\n    }\n\n    let data = [{}];\n    data[0] = {\n      Date: '',\n      Confirmed: 0,\n      Hospitalized: 0,\n      Deaths: 0,\n      Recovered: 0,\n      RecoveryRate: 0,\n      MortalityRate: 0,\n      NewConfirmed: 0,\n      NewHospitalized: 0,\n      NewDeaths: 0,\n      NewRecovered: 0\n    };\n    const thisData = data[0];\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    let lines = '';\n\n    while (lines == '') {\n      const markDateStr = markDate.toISOString();\n      const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n      markDate.setDate(markDate.getDate() - 1);\n      console.log(sourceDate);\n\n      try {\n        const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n          headers: {\n            'Content-Type': 'text/csv'\n          }\n        });\n        lines = response.data.split(/\\r?\\n/);\n        thisData.Date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    for (let i = 1; i < lines.length; i++) {\n      if ((lines[i].match(/\"/g) || []).length > 2) continue;\n      const values = lines[i].split(',');\n      if (city != '' && city != values[2] || country != '' && country != values[3]) continue;\n      const confirmed = thisData[\"Confirmed\"] + parseInt(values[7]);\n      const deaths = thisData[\"Deaths\"] + parseInt(values[8]);\n      const recovered = thisData[\"Recovered\"] + parseInt(values[9]);\n      thisData.Confirmed = confirmed;\n      thisData.Hospitalized = thisData[\"Hospitalized\"] + parseInt(values[10]);\n      thisData.Deaths = deaths;\n      thisData.Recovered = recovered;\n      thisData.RecoveryRate = recovered / confirmed * 100;\n      thisData.MortalityRate = deaths / confirmed * 100;\n    }\n\n    if (process) {\n      const prevData = await this.callAPIGlobal(city, country, markDate, false);\n      thisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\n      thisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\n      thisData.NewDeaths = thisData.Deaths - prevData.Deaths;\n      thisData.NewRecovered = thisData.Recovered - prevData.Recovered;\n      console.log(data);\n      this.processData(sourceRef, data, false);\n    }\n\n    return thisData;\n  } //For when Thailand is selected\n  //Provides retrospective data and graph functionalities\n  //Local scoped source, data from over 200 days are stored within only one file\n\n\n  async callAPIThailand() {\n    const source = 'https://covid19.th-stat.com/api/open/timeline';\n    let data = [];\n\n    try {\n      const response = await axios.get(source);\n      console.log(response);\n      data = response.data['Data'];\n    } catch (err) {\n      console.log(err);\n    }\n\n    this.processData(source, data);\n  }\n\n  getLastDate(type, data) {\n    for (let i = data.length - 1; i >= 0; i--) {\n      if (data[i][type] != 0) return data[i]['Date'];\n    }\n  }\n\n  getDateDiff(date) {\n    let now = new Date().getTime();\n    return Math.floor((now - new Date(date).getTime()) / 86400000);\n  }\n\n  processData(source, data, hasTimeline = true) {\n    if (data.length <= 0) return;\n    const lastData = data.slice(-1)[0];\n    const dataReformatted = data.slice().map(d => {\n      return Object.assign({}, d, {\n        Date: d.Date.slice(3, 6) + d.Date.slice(0, 2)\n      });\n    });\n    const lastUpdated = lastData['Date'];\n    let lastConfirmedFormatted = 0;\n    let lastDeathFormatted = 0;\n    let noConfirmedStreak = 0;\n    let noDeathStreak = 0;\n\n    if (hasTimeline) {\n      const lastConfirmed = this.getLastDate('NewConfirmed', data);\n      const lastDeath = this.getLastDate('NewDeaths', data);\n      lastConfirmedFormatted = lastConfirmed.slice(3, 6) + lastConfirmed.slice(0, 3) + lastConfirmed.slice(6);\n      lastDeathFormatted = lastDeath.slice(3, 6) + lastDeath.slice(0, 3) + lastDeath.slice(6);\n      noConfirmedStreak = this.getDateDiff(lastConfirmed);\n      noDeathStreak = this.getDateDiff(lastDeath);\n    }\n\n    this.setState({\n      hasTimeline: hasTimeline,\n      dataTimeline: dataReformatted,\n      dataTimeline15: dataReformatted.slice(1).slice(-15),\n      data_text: {\n        source: source,\n        updatedDate: lastUpdated.slice(3, 6) + lastUpdated.slice(0, 3) + lastUpdated.slice(6),\n        confirmed: lastData['Confirmed'],\n        hospitalized: lastData['Hospitalized'],\n        deaths: lastData['Deaths'],\n        recovered: lastData['Recovered'],\n        newConfirmed: lastData['NewConfirmed'],\n        newHospitalized: lastData['NewHospitalized'],\n        newDeaths: lastData['NewDeaths'],\n        newRecovered: lastData['NewRecovered']\n      },\n      data_pie: [{\n        name: 'Hospitalized',\n        value: lastData['Hospitalized']\n      }, {\n        name: 'Deaths',\n        value: lastData['Deaths']\n      }, {\n        name: 'Recovered',\n        value: lastData['Recovered']\n      }],\n      lastConfirmed: lastConfirmedFormatted,\n      lastDeath: lastDeathFormatted,\n      noConfirmedStreak: noConfirmedStreak,\n      noDeathStreak: noDeathStreak,\n      rateRecovery: (100 * lastData['Recovered'] / lastData['Confirmed']).toFixed(2) + '%',\n      rateDeath: (100 * lastData['Deaths'] / lastData['Confirmed']).toFixed(2) + '%'\n    });\n  }\n\n  render() {\n    const graphBlue = '#20A0E0';\n    const graphYellow = '#FFC060';\n    const graphRed = '#E04040';\n    const graphGreen = '#80E080';\n    const {\n      classes\n    } = this.props;\n    const {\n      selectCountry,\n      selectCity,\n      dataTimeline,\n      dataTimeline15,\n      data_text,\n      data_pie\n    } = this.state;\n    let selectedCountryData = this.state.globalData[selectCountry];\n    let cityChoice = selectedCountryData != undefined && selectedCountryData.CitiesN != 0 ? selectedCountryData.Cities : [\"Overall\"];\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 4\n      }\n    }, __jsx(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 5\n      }\n    }), __jsx(AppBar, {\n      style: {\n        background: '#BB0A1E'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 5\n      }\n    }, __jsx(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 6\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      className: classes.title,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 7\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 8\n      }\n    }, \"Simple COVID-19 Dashboard\")))), __jsx(\"div\", {\n      className: classes.appBarSpacer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 5\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 5\n      }\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 7\n      }\n    }, __jsx(MuiThemeProvider, {\n      theme: darkTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      align: \"left\",\n      color: \"textPrimary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 10\n      }\n    }), \"Last updated: \", data_text.updatedDate), __jsx(Typography, {\n      variant: \"subtitle2\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: data_text.source,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 10\n      }\n    }, \" \", data_text.source)))), __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 7\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 8\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 13\n      }\n    }), __jsx(Dropdown, {\n      options: this.state.countries,\n      value: selectCountry,\n      onChange: select => {\n        this.setState({\n          selectCountry: select.value,\n          selectCity: 'Overall'\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 8\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 7\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 8\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 13\n      }\n    }), __jsx(Dropdown, {\n      options: cityChoice,\n      value: selectCity,\n      onChange: select => {\n        this.setState({\n          selectCity: select.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 8\n      }\n    }))), __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }\n    }, \"Confirmed\"), __jsx(Typography, {\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }\n    }, data_text.confirmed.toLocaleString()), __jsx(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }\n    }, \"(\", data_text.newConfirmed.toLocaleString(), \")\"))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }\n    }, \"Hospitalized\"), __jsx(Typography, {\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }\n    }, data_text.hospitalized.toLocaleString()), __jsx(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }\n    }, \"(\", data_text.newHospitalized.toLocaleString(), \")\"))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }\n    }, \"Deaths\"), __jsx(Typography, {\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }\n    }, data_text.deaths.toLocaleString()), __jsx(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }\n    }, \"(\", data_text.newDeaths.toLocaleString(), \")\"))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }\n    }, \"Recovered\"), __jsx(Typography, {\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 9\n      }\n    }, data_text.recovered.toLocaleString()), __jsx(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }\n    }, \"(\", data_text.newRecovered.toLocaleString(), \")\"))), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 8\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 10\n      }\n    }, \"Last confirmed: \", this.state.lastConfirmed, \" (\", this.state.noConfirmedStreak, \" days ago)\"), __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 10\n      }\n    }, \"Last death: \", this.state.lastDeath, \" (\", this.state.noDeathStreak, \" days ago)\")))), __jsx(Grid, {\n      item: true,\n      xs: this.state.hasTimeline ? 6 : 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }\n    }, \"Recovery Rate: \", this.state.rateRecovery), __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }\n    }, \"Mortality Rate: \", this.state.rateDeath)))), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 7\n      }\n    }), __jsx(\"button\", {\n      onClick: () => this.setState({\n        showGraph: !this.state.showGraph\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 7\n      }\n    }, \"Show/Hide Graph\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 7\n      }\n    }), \" \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 13\n      }\n    })), this.state.showGraph && //Whether or not to display graphs\n    __jsx(React.Fragment, null, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }\n    }, __jsx(BarChart, {\n      width: 500,\n      height: 300,\n      data: dataTimeline15,\n      margin: {\n        top: 5,\n        right: 5,\n        left: 0,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 10\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 11\n      }\n    }), __jsx(XAxis, {\n      dataKey: \"Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }\n    }), __jsx(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 11\n      }\n    }), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }\n    }), __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 11\n      }\n    }), __jsx(Bar, {\n      dataKey: \"NewConfirmed\",\n      fill: graphBlue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }\n    }), __jsx(Bar, {\n      dataKey: \"NewDeaths\",\n      fill: graphRed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 11\n      }\n    }))))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }\n    }, __jsx(PieChart, {\n      width: 400,\n      height: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 10\n      }\n    }, __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 11\n      }\n    }), __jsx(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data_pie,\n      outerRadius: 100,\n      label: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 11\n      }\n    }, __jsx(Cell, {\n      fill: graphYellow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 12\n      }\n    }), __jsx(Cell, {\n      fill: graphRed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 12\n      }\n    }), __jsx(Cell, {\n      fill: graphGreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 12\n      }\n    })), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 11\n      }\n    }))))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }\n    }, __jsx(LineChart, {\n      data: dataTimeline,\n      margin: {\n        top: 5,\n        right: 5,\n        left: 0,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 10\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 11\n      }\n    }), __jsx(XAxis, {\n      dataKey: \"Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }\n    }), __jsx(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 11\n      }\n    }), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }\n    }), __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Confirmed\",\n      stroke: graphBlue,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Hospitalized\",\n      stroke: graphYellow,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Deaths\",\n      stroke: graphRed,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Recovered\",\n      stroke: graphGreen,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 11\n      }\n    })))))))), __jsx(\"footer\", {\n      className: classes.footer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 5\n      }\n    }, __jsx(Paper, {\n      className: classes.paperFoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 6\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 7\n      }\n    }, \"Simple Covid-19 Dashboard for Tencent Thailand's Internship Project\"), __jsx(Typography, {\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 7\n      }\n    }, \"By Thanjira S. and Woottipat H.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/pages/_app.js"],"names":["React","withStyles","createMuiTheme","MuiThemeProvider","AppBar","Toolbar","Typography","CssBaseline","Container","Paper","Grid","Dropdown","axios","ResponsiveContainer","XAxis","YAxis","CartesianGrid","Tooltip","Legend","LineChart","Line","BarChart","Bar","PieChart","Pie","Cell","styles","theme","appBarSpacer","mixins","toolbar","title","flexGrow","container","display","flexDirection","alignItems","justifyContent","paper","padding","spacing","backgroundColor","paperFoot","footer","palette","background","marginTop","root","formControl","margin","minWidth","selectEmpty","darkTheme","type","App","Component","constructor","props","state","refDate","Date","selectCountry","selectCity","countries","globalData","hasTimeline","dataTimeline","dataTimeline15","data_text","updatedDate","confirmed","hospitalized","deaths","recovered","newConfirmed","newHospitalized","newDeaths","newRecovered","data_pie","lastConfirmed","lastDeath","noConfirmedStreak","noDeathStreak","rateRecovery","rateDeath","showGraph","componentDidMount","callAPIGlobalAll","fetchData","console","log","callAPIThailand","callAPIGlobal","componentDidUpdate","prevProps","markDate","countriesN","data","Object","sourceRef","sourcePrefix","formatChange","getTime","cityIndex","countryIndex","conIndex","deathIndex","recIndex","quoteLimit","lines","markDateStr","toISOString","sourceDate","slice","getFullYear","response","get","headers","split","err","i","length","match","values","country","city","parseInt","undefined","Cities","CitiesN","citiesN","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","MortalityRate","setState","callAPIGlobalTimeline","dataN","prevConfirmed","prevHospitalized","prevDeaths","prevRecovered","tomorrow","setDate","getDate","now","lastIndex","date","replace","NewConfirmed","NewHospitalized","NewDeaths","NewRecovered","processData","process","thisData","prevData","source","getLastDate","getDateDiff","Math","floor","lastData","dataReformatted","map","d","assign","lastUpdated","lastConfirmedFormatted","lastDeathFormatted","name","value","toFixed","render","graphBlue","graphYellow","graphRed","graphGreen","classes","selectedCountryData","cityChoice","select","toLocaleString","top","right","left","bottom"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport axios from 'axios';\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, \n  Pie, Cell, } from 'recharts';\n  \nconst styles = theme => ({\n  appBarSpacer: theme.mixins.toolbar,\n  title: {\n    flexGrow: 1,\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n\t\tbackgroundColor: \"#FFFEFE\",\n  },\n\tpaperFoot: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n\t\tbackgroundColor: \"#777070\",\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(2),\n  },\n\troot: {\n    backgroundColor: \"#000000\",\n  },\n\tformControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n});\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nclass App extends React.Component {\n\t\n  constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trefDate: new Date(2020,7,20),\n\t\t\tselectCountry: 'Thailand',\n\t\t\tselectCity: 'Overall',\n\t\t\tcountries: [],\n\t\t\tglobalData: [],\n\t\t\thasTimeline: true,\n\t\t\tdataTimeline: [],\n\t\t\tdataTimeline15: [],\n\t\t\tdata_text: {\n\t\t\t\tupdatedDate: '',\n\t\t\t\tconfirmed: '',\n\t\t\t\thospitalized: '',\n\t\t\t\tdeaths: '',\n\t\t\t\trecovered: '',\n\t\t\t\tnewConfirmed: '',\n\t\t\t\tnewHospitalized: '',\n\t\t\t\tnewDeaths: '',\n\t\t\t\tnewRecovered: '',\n\t\t\t},\n\t\t\tdata_pie: [{}],\n\t\t\tlastConfirmed: 0,\n\t\t\tlastDeath: 0,\n\t\t\tnoConfirmedStreak: 0,\n\t\t\tnoDeathStreak: 0,\n\t\t\trateRecovery: 0,\n\t\t\trateDeath: 0,\n\t\t\tshowGraph: false,\n\t\t};\n  }\n  \n  componentDidMount() {\n\t\tthis.callAPIGlobalAll(this.state.refDate);\n\t\tthis.fetchData(this.state.refDate);\n  }\n\t\n\tfetchData(refDate) {\n\t\tconsole.log(this.state.selectCountry);\n\t\tconsole.log(this.state.selectCity);\n\t\tif (this.state.selectCountry == 'Thailand')\n\t\t\tthis.callAPIThailand();\n\t\telse this.callAPIGlobal(this.state.selectCity,this.state.selectCountry,refDate);\n\t\t//else this.callAPIGlobalTimeline(this.state.selectCity,this.state.selectCountry);\n\t}\n\t\n\tcomponentDidUpdate(prevProps) {\n\t\tif(prevProps.state.selectCountry != this.props.state.selectCountry) {\n\t\t\tthis.fetchData(this.state.refDate);\n\t\t}\n\t}\n\t\n\t//For ranking and map functionalities\n\t//Only data from one day/file is processed\n\tasync callAPIGlobalAll(markDate) {\n\t\t\n\t\tlet countries = [];\n\t\tlet countriesN = 0;\n\t\t\n\t\tlet data = new Object();\n\t\t\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\n\t\t\n\t\tlet cityIndex = 0;\n\t\tlet countryIndex = 1;\n\t\tlet conIndex = 3;\n\t\tlet deathIndex = 4;\n\t\tlet recIndex = 5;\n\t\tlet quoteLimit = 0;\n\t\t//Workaround for source's formatting inconsistencies\n\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\n\t\t\tcityIndex = 2;\n\t\t\tcountryIndex = 3;\n\t\t\tconIndex = 7;\n\t\t\tdeathIndex = 8;\n\t\t\trecIndex = 9;\n\t\t\tquoteLimit = 2;\n\t\t}\n\t\t\n\t\tlet lines = '';\n\t\tconst markDateStr = markDate.toISOString();\n\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\n\t\t//console.log(sourceDate);\n\n\t\ttry {\n\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', { headers: { 'Content-Type': 'text/csv' } });\n\t\t\tlines = response.data.split(/\\r?\\n/);\n\t\t} catch(err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t\t\n\t\tif (lines != '') {\n\t\t\tfor (let i=1; i<lines.length; i++) {\n\t\t\t\tif (lines[i] == '' || ((lines[i].match(/\"/g) || []).length > quoteLimit))\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tconst values = lines[i].split(',');\n\t\t\t\tconst country = values[countryIndex];\n\t\t\t\tconst city = values[cityIndex];\n\t\t\t\tlet confirmed = parseInt(values[conIndex]);\n\t\t\t\tlet hospitalized = parseInt(values[10]);\n\t\t\t\tlet deaths = parseInt(values[deathIndex]);\n\t\t\t\tlet recovered = parseInt(values[recIndex]);\n\t\t\t\tif (data[country] != undefined) {\n\t\t\t\t\tconfirmed += data[country][\"Confirmed\"];\n\t\t\t\t\thospitalized += data[country][\"Hospitalized\"];\n\t\t\t\t\tdeaths += data[country][\"Deaths\"];\n\t\t\t\t\trecovered += data[country][\"Recovered\"];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdata[country] = new Object();\n\t\t\t\t\tdata[country].Cities = [];\n\t\t\t\t\tdata[country].CitiesN = 0;\n\t\t\t\t\tcountries[countriesN] = country;\n\t\t\t\t\tcountriesN++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst citiesN = data[country].CitiesN;\n\t\t\t\tdata[country].Confirmed = confirmed;\n\t\t\t\tdata[country].Hospitalized = hospitalized;\n\t\t\t\tdata[country].Deaths = deaths;\n\t\t\t\tdata[country].Recovered = recovered;\n\t\t\t\tdata[country].RecoveryRate = (recovered/confirmed) * 100;\n\t\t\t\tdata[country].MortalityRate = (deaths/confirmed) * 100;\n\t\t\t\tif (city != '') {\n\t\t\t\t\tdata[country].Cities[citiesN] = city;\n\t\t\t\t\tdata[country].CitiesN = citiesN + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(data);\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tcountries: countries,\n\t\t\t\tglobalData: data,\n\t\t\t});\n\t\t\t//console.log(this.state.countries);\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t//When foreign country is selected\n\t//Provides retrospective data and graph functionalities\n\t//Taxing, over 200 days/files must be processed\n\t//Somehow sometimes fast, sometimes slow. Cause still unknown.\n\tasync callAPIGlobalTimeline(city, country) {\n\t\t\n\t\tif (city == 'Overall') {\n\t\t\tcity = '';\n\t\t}\n\t\t\n\t\tlet data = [{}];\n\t\tlet dataN = 0;\n\t\t\n\t\tlet prevConfirmed = 0;\n\t\tlet prevHospitalized = 0;\n\t\tlet prevDeaths = 0;\n\t\tlet prevRecovered = 0;\n\t\t\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n\t\tlet markDate = new Date(2020,0,23);\n\t\tconst tomorrow = new Date();\n\t\ttomorrow.setDate(tomorrow.getDate()+1);\n\t\tconst now = tomorrow.getTime();\n\t\t\n\t\tlet cityIndex = 0;\n\t\tlet countryIndex = 1;\n\t\tlet conIndex = 3;\n\t\tlet deathIndex = 4;\n\t\tlet recIndex = 5;\n\t\t\n\t\tlet lastIndex = 1;\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\n\t\t\n\t\twhile (markDate.getTime() < now) {\n\t\t\tlet lines = '';\n\t\t\tconst markDateStr = markDate.toISOString();\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\n\t\t\tconsole.log(sourceDate);\n\t\t\t//console.log(lastIndex);\n\t\t\t\n\t\t\t//Workaround for source's formatting inconsistencies\n\t\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\n\t\t\t\tcityIndex = 2;\n\t\t\t\tcountryIndex = 3;\n\t\t\t\tconIndex = 7;\n\t\t\t\tdeathIndex = 8;\n\t\t\t\trecIndex = 9;\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', { headers: { 'Content-Type': 'text/csv' } });\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\n\t\t\t} catch(err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t\t\n\t\t\tmarkDate.setDate(markDate.getDate()+1);\n\t\t\t\n\t\t\tif (lines == '')\n\t\t\t\t\tcontinue;\n\t\t\t\n\t\t\tconsole.log(lastIndex);\n\t\t\tconst date = sourceDate.replace('-','\\/').replace('-','\\/');\n\t\t\tlet values = undefined;\n\t\t\tif (lines[lastIndex])\n\t\t\t\tvalues = lines[lastIndex].split(',');\n\t\t\telse lastIndex = 1;\n\t\t\t\n\t\t\tif (values == undefined || (city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex]))\n\t\t\t{\n\t\t\t\tfor (let i=lastIndex+1; i<lines.length; i++) {\n\t\t\t\t\tvalues = lines[i].split(',');\n\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\n\t\t\t\t\t\tvalues = undefined;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlastIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (values == undefined) {\n\t\t\t\t\tfor (let i=1; i<lastIndex; i++) {\n\t\t\t\t\t\tvalues = lines[i].split(',');\n\t\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\n\t\t\t\t\t\t\tvalues = undefined;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (values != undefined) {\n\t\t\t\tconst confirmed = parseInt(values[conIndex]);\n\t\t\t\tconst hospitalized = parseInt(values[10]);\n\t\t\t\tconst deaths = parseInt(values[deathIndex]);\n\t\t\t\tconst recovered = parseInt(values[recIndex]);\n\t\t\t\t\n\t\t\t\tdata[dataN] = {\n\t\t\t\t\tDate: date,\n\t\t\t\t\tConfirmed: confirmed,\n\t\t\t\t\tHospitalized: hospitalized,\n\t\t\t\t\tDeaths: deaths,\n\t\t\t\t\tRecovered: recovered,\n\t\t\t\t\tNewConfirmed: confirmed - prevConfirmed,\n\t\t\t\t\tNewHospitalized: hospitalized - prevHospitalized,\n\t\t\t\t\tNewDeaths: deaths - prevDeaths,\n\t\t\t\t\tNewRecovered: recovered - prevRecovered,\n\t\t\t\t}\n\t\t\t\tprevConfirmed = confirmed;\n\t\t\t\tprevHospitalized = hospitalized;\n\t\t\t\tprevDeaths = deaths;\n\t\t\t\tprevRecovered = recovered;\n\t\t\t\tdataN++;\n\t\t\t}\n\t\t}\n\t\tconsole.log(data);\n\t\t\n\t\tthis.processData(sourceRef, data);\n\t}\n\t\n\t//When foreign country is selected\n\t//No streak data or timeline functionality\n\t//Only data from two days/files is processed\n\tasync callAPIGlobal(city, country, markDate, process = true) {\n\t\t\n\t\tif (city == 'Overall') {\n\t\t\tcity = '';\n\t\t}\n\t\t\n\t\tlet data = [{}];\n\t\tdata[0] = {\n\t\t\tDate: '',\n\t\t\tConfirmed: 0,\n\t\t\tHospitalized: 0,\n\t\t\tDeaths: 0,\n\t\t\tRecovered: 0,\n\t\t\tRecoveryRate: 0,\n\t\t\tMortalityRate: 0,\n\t\t\tNewConfirmed: 0,\n\t\t\tNewHospitalized: 0,\n\t\t\tNewDeaths: 0,\n\t\t\tNewRecovered: 0,\n\t\t};\n\t\tconst thisData = data[0];\n\t\t\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n\t\t\n\t\tlet lines = '';\n\t\twhile (lines == '') {\n\t\t\tconst markDateStr = markDate.toISOString();\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\n\t\t\tmarkDate.setDate(markDate.getDate()-1);\n\t\t\tconsole.log(sourceDate);\n\t\t\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', { headers: { 'Content-Type': 'text/csv' } });\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\n\t\t\t\tthisData.Date = sourceDate.replace('-','\\/').replace('-','\\/');\n\t\t\t} catch(err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (let i=1; i<lines.length; i++) {\n\t\t\tif ((lines[i].match(/\"/g) || []).length > 2)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tconst values = lines[i].split(',');\n\t\t\tif ((city != '' && city != values[2]) || (country != '' && country != values[3]))\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tconst confirmed = thisData[\"Confirmed\"] + parseInt(values[7]);\n\t\t\tconst deaths = thisData[\"Deaths\"] + parseInt(values[8]);\n\t\t\tconst recovered = thisData[\"Recovered\"] + parseInt(values[9]);\n\t\t\tthisData.Confirmed = confirmed;\n\t\t\tthisData.Hospitalized = thisData[\"Hospitalized\"] + parseInt(values[10]);\n\t\t\tthisData.Deaths = deaths;\n\t\t\tthisData.Recovered = recovered;\n\t\t\tthisData.RecoveryRate = (recovered/confirmed) * 100;\n\t\t\tthisData.MortalityRate = (deaths/confirmed) * 100;\n\t\t}\n\t\t\n\t\tif (process) {\n\t\t\tconst prevData = await this.callAPIGlobal(city, country, markDate, false);\n\t\t\tthisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\n\t\t\tthisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\n\t\t\tthisData.NewDeaths = thisData.Deaths - prevData.Deaths;\n\t\t\tthisData.NewRecovered = thisData.Recovered - prevData.Recovered;\n\t\t\t\n\t\t\tconsole.log(data);\n\t\t\tthis.processData(sourceRef, data, false);\n\t\t\t\n\t\t}\n\t\treturn thisData;\n\t}\n\t\n\t//For when Thailand is selected\n\t//Provides retrospective data and graph functionalities\n\t//Local scoped source, data from over 200 days are stored within only one file\n\tasync callAPIThailand() {\n\t\t\n\t\tconst source = 'https://covid19.th-stat.com/api/open/timeline';\n\t\tlet data = [];\n\t\t\n\t\ttry {\n\t\t\tconst response = await axios.get(source);\n\t\t\tconsole.log(response);\n\t\t\tdata = response.data['Data'];\n\t\t} catch(err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t\t\n\t\tthis.processData(source, data);\n\t}\n\t\n\tgetLastDate(type, data) {\n\t\tfor (let i=data.length-1; i>=0; i--) {\n\t\t\tif (data[i][type] != 0)\n\t\t\t\treturn data[i]['Date'];\n\t\t}\n\t}\n\t\n\tgetDateDiff(date) {\n\t\tlet now = (new Date()).getTime();\n\t\treturn Math.floor((now - (new Date(date)).getTime())/86400000);\n\t}\n\t\n\tprocessData(source, data, hasTimeline = true) {\n\t\tif (data.length <= 0)\n\t\t\treturn;\n\t\t\n\t\tconst lastData = data.slice(-1)[0];\n\t\tconst dataReformatted = data.slice().map(d => {\n\t\t\treturn (\n\t\t\t\tObject.assign({},d,{\n\t\t\t\t\tDate: d.Date.slice(3,6) + d.Date.slice(0,2)\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t\t\n\t\tconst lastUpdated = lastData['Date'];\n\t\tlet lastConfirmedFormatted = 0;\n\t\tlet lastDeathFormatted = 0;\n\t\tlet noConfirmedStreak = 0;\n\t\tlet noDeathStreak = 0;\n\n\t\tif (hasTimeline) {\n\t\t\tconst lastConfirmed = this.getLastDate('NewConfirmed',data);\n\t\t\tconst lastDeath = this.getLastDate('NewDeaths',data);\n\t\t\tlastConfirmedFormatted = lastConfirmed.slice(3,6) + lastConfirmed.slice(0,3) + lastConfirmed.slice(6);\n\t\t\tlastDeathFormatted = lastDeath.slice(3,6) + lastDeath.slice(0,3) + lastDeath.slice(6);\n\t\t\tnoConfirmedStreak = this.getDateDiff(lastConfirmed);\n\t\t\tnoDeathStreak = this.getDateDiff(lastDeath);\n\t\t}\n\t\t\n\t\tthis.setState({\n\t\t\thasTimeline: hasTimeline,\n\t\t\tdataTimeline: dataReformatted,\n\t\t\tdataTimeline15: dataReformatted.slice(1).slice(-15),\n\t\t\tdata_text: {\n\t\t\t\tsource: source,\n\t\t\t\tupdatedDate: lastUpdated.slice(3,6) + lastUpdated.slice(0,3) + lastUpdated.slice(6),\n\t\t\t\tconfirmed: lastData['Confirmed'],\n\t\t\t\thospitalized: lastData['Hospitalized'],\n\t\t\t\tdeaths: lastData['Deaths'],\n\t\t\t\trecovered: lastData['Recovered'],\n\t\t\t\tnewConfirmed: lastData['NewConfirmed'],\n\t\t\t\tnewHospitalized: lastData['NewHospitalized'],\n\t\t\t\tnewDeaths: lastData['NewDeaths'],\n\t\t\t\tnewRecovered: lastData['NewRecovered'],\n\t\t\t},\n\t\t\tdata_pie: [\n\t\t\t\t{ name: 'Hospitalized', value: lastData['Hospitalized'] },\n\t\t\t\t{ name: 'Deaths', value: lastData['Deaths'] },\n\t\t\t\t{ name: 'Recovered', value: lastData['Recovered'] },\n\t\t\t],\n\t\t\tlastConfirmed: lastConfirmedFormatted,\n\t\t\tlastDeath: lastDeathFormatted,\n\t\t\tnoConfirmedStreak: noConfirmedStreak,\n\t\t\tnoDeathStreak: noDeathStreak,\n\t\t\trateRecovery: (100*lastData['Recovered']/lastData['Confirmed']).toFixed(2) + '%',\n\t\t\trateDeath: (100*lastData['Deaths']/lastData['Confirmed']).toFixed(2) + '%',\n\t\t});\n\t}\n\t\n\trender() {\n\t\tconst graphBlue = '#20A0E0';\n\t\tconst graphYellow = '#FFC060';\n\t\tconst graphRed = '#E04040';\n\t\tconst graphGreen = '#80E080';\n\t\t\n\t\tconst { classes } = this.props;\n\t\tconst { selectCountry, selectCity, dataTimeline, dataTimeline15, data_text, data_pie } = this.state;\n\t\t\n\t\tlet selectedCountryData = this.state.globalData[selectCountry];\n\t\tlet cityChoice = ((selectedCountryData != undefined && selectedCountryData.CitiesN != 0) ? selectedCountryData.Cities : [\"Overall\"]);\n\t\t\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<AppBar style={{background:'#BB0A1E'}}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h4\" className={classes.title} align=\"center\">\n\t\t\t\t\t\t\t<b>Simple COVID-19 Dashboard</b>\n\t\t\t\t\t\t\t{/*this.state.selectCity*/}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<div className={classes.appBarSpacer}/>\n\t\t\t\t<Container>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<MuiThemeProvider theme={darkTheme}>\n\t\t\t\t\t\t\t\t<Typography align=\"left\" color=\"textPrimary\">\n\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\tLast updated: {data_text.updatedDate}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"subtitle2\" align=\"left\">\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref={data_text.source}\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"> {\n\t\t\t\t\t\t\t\t\t\tdata_text.source\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</MuiThemeProvider>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t<Dropdown options={this.state.countries} value={selectCountry}\n\t\t\t\t\t\t\t\tonChange={(select) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tselectCountry: select.value,\n\t\t\t\t\t\t\t\t\t\tselectCity: 'Overall',\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t<Dropdown options={cityChoice} value={selectCity}\n\t\t\t\t\t\t\t\tonChange={(select)=>{this.setState({selectCity:select.value});}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Typography>Confirmed</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\">{data_text.confirmed.toLocaleString()}</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h5\">({data_text.newConfirmed.toLocaleString()})</Typography>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Typography>Hospitalized</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\">{data_text.hospitalized.toLocaleString()}</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h5\">({data_text.newHospitalized.toLocaleString()})</Typography>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Typography>Deaths</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\">{data_text.deaths.toLocaleString()}</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h5\">({data_text.newDeaths.toLocaleString()})</Typography>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Typography>Recovered</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\">{data_text.recovered.toLocaleString()}</Typography>\n\t\t\t\t\t\t\t\t<Typography variant=\"h5\">({data_text.newRecovered.toLocaleString()})</Typography>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{ this.state.hasTimeline && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\n\t\t\t\t\t\t\t\t\t\tLast confirmed: {this.state.lastConfirmed} ({this.state.noConfirmedStreak} days ago)\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\n\t\t\t\t\t\t\t\t\t\tLast death: {this.state.lastDeath} ({this.state.noDeathStreak} days ago)\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Grid item xs={this.state.hasTimeline ? 6 : 12}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Typography variant='h6'>\n\t\t\t\t\t\t\t\t\tRecovery Rate: {this.state.rateRecovery}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t<Typography variant='h6' >\n\t\t\t\t\t\t\t\t\tMortality Rate: {this.state.rateDeath}\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\n\t\t\t\t\t{/*-------------------------------- Graphs --------------------------------*/}\n\t\t\t\t\n\t\t\t\t\t{/*Button to toggle graph display*/}\n\t\t\t\t\t{ this.state.hasTimeline && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<button onClick={() => this.setState({ showGraph: !this.state.showGraph })}>\n\t\t\t\t\t\t\tShow/Hide Graph\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<br/> <br/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t\t\n\t\t\t\t\t{ this.state.showGraph && (\t//Whether or not to display graphs\n\t\t\t\t\t<>\n\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t{/*Bar, last 14 days*/}\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\n\t\t\t\t\t\t\t\t\t<BarChart\n\t\t\t\t\t\t\t\t\t\twidth={500}\n\t\t\t\t\t\t\t\t\t\theight={300}\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline15}\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\"/>\n\t\t\t\t\t\t\t\t\t\t<YAxis />\n\t\t\t\t\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewConfirmed\" fill={graphBlue} />\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewDeaths\" fill={graphRed} />\n\t\t\t\t\t\t\t\t\t</BarChart>\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/*Pie, in total*/}\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\n\t\t\t\t\t\t\t\t\t<PieChart width={400}\theight={400}>\n\t\t\t\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t\t\t\t<Pie dataKey=\"value\" isAnimationActive={false} data={data_pie} outerRadius={100} label>\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={graphYellow} />\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={graphRed} />\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={graphGreen} />\n\t\t\t\t\t\t\t\t\t\t</Pie>\n\t\t\t\t\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t\t\t\t</PieChart>\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/*Bar, in total*/}\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={500}>\n\t\t\t\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline}\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5 }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\" />\n\t\t\t\t\t\t\t\t\t\t<YAxis />\n\t\t\t\t\t\t\t\t\t\t<Tooltip />\n\t\t\t\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Confirmed\" stroke={graphBlue} dot={false} />\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Hospitalized\" stroke={graphYellow} dot={false} />\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Deaths\" stroke={graphRed} dot={false} />\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Recovered\" stroke={graphGreen} dot={false} />\n\t\t\t\t\t\t\t\t\t</LineChart>\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</Container>\n\t\t\t\t<footer className={classes.footer}>\n\t\t\t\t\t<Paper className={classes.paperFoot}>\n\t\t\t\t\t\t<Typography variant=\"h6\">\n\t\t\t\t\t\t\tSimple Covid-19 Dashboard for Tencent Thailand's Internship Project\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography component=\"p\">\n\t\t\t\t\t\t\tBy Thanjira S. and Woottipat H.\n            </Typography>\n          </Paper>\n        </footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(App);\n"]},"metadata":{},"sourceType":"module"}