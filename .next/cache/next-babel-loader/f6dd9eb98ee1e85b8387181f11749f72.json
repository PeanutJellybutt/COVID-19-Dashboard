{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Herabat\\\\react-js\\\\covid-19-dashboard\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport axios from 'axios';\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport '../public/jquery-jvectormap.css';\nimport dynamic from 'next/dynamic';\nconst VectorMap = dynamic(() => import(\"react-jvectormap\").then(m => m.VectorMap), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-jvectormap\")],\n    modules: [\"react-jvectormap\"]\n  }\n});\nimport '../components/dataFetch.js';\n\nconst styles = theme => ({\n  appBarSpacer: theme.mixins.toolbar,\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: \"#FFFEFE\"\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(2)\n  },\n  root: {\n    backgroundColor: \"#000000\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n});\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\nconst cBlue = '#20A0E0';\nconst cOrange = '#F7B860';\nconst cRed = '#E04040';\nconst cGreen = '#80D080';\nconst cDRed = '#BB0A1E';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasData: false,\n      selectCountry: 'Thailand',\n      selectCity: 'Overall',\n      countries: [],\n      globalData: [],\n      fastMode: true,\n      hasTimeline: true,\n      dataTimeline: [],\n      dataTimeline15: [],\n      data_text: {\n        updatedDate: '',\n        confirmed: '',\n        hospitalized: '',\n        deaths: '',\n        recovered: '',\n        newConfirmed: '',\n        newHospitalized: '',\n        newDeaths: '',\n        newRecovered: ''\n      },\n      data_pie: [{}],\n      lastConfirmed: 0,\n      lastDeath: 0,\n      noConfirmedStreak: 0,\n      noDeathStreak: 0,\n      rateRecovery: 0,\n      rateDeath: 0,\n      showGraph: false,\n      selectCategory: 'Hospitalized',\n      rankSelect: -1,\n      rankTopTen: [],\n      mapGlobalData: null\n    };\n    this.referenceDate = new Date();\n    this.referenceDate.setDate(this.referenceDate.getDate() - 1);\n    const CancelToken = axios.CancelToken;\n    this.cancelSource = CancelToken.source();\n\n    const {\n      getCode,\n      getName,\n      getData\n    } = require(\"country-list\");\n\n    this.getCountryCode = getCode;\n    this.getCountryName = getName;\n    this.getCountryData = getData;\n  }\n\n  componentDidMount() {\n    this.callAPIGlobalAll(this.referenceDate);\n    this.fetchData(this.referenceDate);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selectCountry != this.state.selectCountry || prevState.selectCity != this.state.selectCity || prevState.fastMode != this.state.fastMode) {\n      this.clearAxiosCalls();\n      this.fetchData(this.referenceDate);\n    }\n\n    if (prevState.selectCategory != this.state.selectCategory) this.globalRanking(this.state.selectCategory);\n  }\n\n  clearAxiosCalls() {\n    this.cancelSource.cancel('Axios operations cleared');\n    const CancelToken = axios.CancelToken;\n    this.cancelSource = CancelToken.source();\n  } //For ranking and map functionalities\n  //Only data from one day/file is processed\n\n\n  async callAPIGlobalAll(markDate) {\n    markDate = new Date(markDate.getTime());\n    let countries = [];\n    let countriesN = 0;\n    let data = new Object();\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    const formatChange = new Date(2020, 2, 22).getTime();\n    let cityIndex = 0;\n    let countryIndex = 1;\n    let conIndex = 3;\n    let deathIndex = 4;\n    let recIndex = 5;\n    let quoteLimit = 0; //Workaround for source's formatting inconsistencies\n\n    if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n      cityIndex = 2;\n      countryIndex = 3;\n      conIndex = 7;\n      deathIndex = 8;\n      recIndex = 9;\n      quoteLimit = 2;\n    }\n\n    let lines = '';\n    const markDateStr = markDate.toISOString();\n    const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear(); //console.log(sourceDate);\n\n    try {\n      const cancelToken = this.cancelSource.token;\n      const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n        headers: {\n          'Content-Type': 'text/csv'\n        },\n        cancelToken: cancelToken\n      });\n      lines = response.data.split(/\\r?\\n/);\n    } catch (err) {\n      console.log(err);\n      return undefined;\n    }\n\n    if (lines != '') {\n      for (let i = 1; i < lines.length; i++) {\n        if (lines[i] == '' || (lines[i].match(/\"/g) || []).length > quoteLimit) continue;\n        const values = lines[i].split(',');\n        const country = values[countryIndex];\n        const city = values[cityIndex];\n        let confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n        let hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n        let deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n        let recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n\n        if (data[country] != undefined) {\n          confirmed += data[country][\"Confirmed\"];\n          hospitalized += data[country][\"Hospitalized\"];\n          deaths += data[country][\"Deaths\"];\n          recovered += data[country][\"Recovered\"];\n        } else {\n          data[country] = new Object();\n          data[country].Country = country;\n          data[country].Cities = [];\n          data[country].CitiesN = 0;\n          countries[countriesN] = country;\n          countriesN++;\n        }\n\n        const citiesN = data[country].CitiesN;\n        data[country].Confirmed = confirmed;\n        data[country].Hospitalized = hospitalized;\n        data[country].Deaths = deaths;\n        data[country].Recovered = recovered;\n        data[country].RecoveryRate = (recovered / confirmed * 100).toFixed(2);\n        data[country].MortalityRate = (deaths / confirmed * 100).toFixed(2);\n\n        if (city != '') {\n          data[country].Cities[citiesN] = city;\n          data[country].CitiesN = citiesN + 1;\n        }\n      } //console.log(data);\n\n\n      const mapGlobalData = this.processMapGlobalData(countries, data);\n      this.setState({\n        countries: countries,\n        globalData: data,\n        mapGlobalData: mapGlobalData\n      });\n    }\n\n    this.globalRanking(this.state.selectCategory);\n  } //When foreign country is selected\n  //Provides retrospective data and graph functionalities\n  //Taxing, over 200 days/files must be processed\n  //Somehow sometimes fast, sometimes slow. Cause still unknown.\n\n\n  async callAPIGlobalTimeline(city, country) {\n    if (city == 'Overall') {\n      city = '';\n    }\n\n    let data = [{}];\n    let dataN = 0;\n    let prevConfirmed = 0;\n    let prevHospitalized = 0;\n    let prevDeaths = 0;\n    let prevRecovered = 0;\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    let markDate = new Date(2020, 0, 23);\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const now = tomorrow.getTime();\n    let cityIndex = 0;\n    let countryIndex = 1;\n    let conIndex = 3;\n    let deathIndex = 4;\n    let recIndex = 5;\n    let lastIndex = 1;\n    const formatChange = new Date(2020, 2, 22).getTime();\n\n    while (markDate.getTime() < now) {\n      let lines = '';\n      const markDateStr = markDate.toISOString();\n      const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n      console.log(sourceDate); //console.log(lastIndex);\n      //Workaround for source's formatting inconsistencies\n\n      if (cityIndex == 0 && markDate.getTime() >= formatChange) {\n        cityIndex = 2;\n        countryIndex = 3;\n        conIndex = 7;\n        deathIndex = 8;\n        recIndex = 9;\n      }\n\n      try {\n        const cancelToken = this.cancelSource.token;\n        const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n          headers: {\n            'Content-Type': 'text/csv'\n          },\n          cancelToken: cancelToken\n        });\n        lines = response.data.split(/\\r?\\n/);\n      } catch (err) {\n        console.log(err);\n        return undefined;\n      }\n\n      markDate.setDate(markDate.getDate() + 1);\n      if (lines == '') continue;\n      console.log(lastIndex);\n      const date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n      let values = undefined;\n      if (lines[lastIndex]) values = lines[lastIndex].split(',');else lastIndex = 1;\n\n      if (values == undefined || city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n        for (let i = lastIndex + 1; i < lines.length; i++) {\n          values = lines[i].split(',');\n\n          if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n            values = undefined;\n            continue;\n          }\n\n          lastIndex = i;\n          break;\n        }\n\n        if (values == undefined) {\n          for (let i = 1; i < lastIndex; i++) {\n            values = lines[i].split(',');\n\n            if (city != '' && city != values[cityIndex] || country != '' && country != values[countryIndex]) {\n              values = undefined;\n              continue;\n            }\n\n            lastIndex = i;\n            break;\n          }\n        }\n      }\n\n      if (values != undefined) {\n        const confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\n        const hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\n        const deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\n        const recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\n        data[dataN] = {\n          Date: date,\n          Confirmed: confirmed,\n          Hospitalized: hospitalized,\n          Deaths: deaths,\n          Recovered: recovered,\n          NewConfirmed: confirmed - prevConfirmed,\n          NewHospitalized: hospitalized - prevHospitalized,\n          NewDeaths: deaths - prevDeaths,\n          NewRecovered: recovered - prevRecovered\n        };\n        prevConfirmed = confirmed;\n        prevHospitalized = hospitalized;\n        prevDeaths = deaths;\n        prevRecovered = recovered;\n        dataN++;\n      }\n    }\n\n    console.log(data);\n    this.processData(sourceRef, data);\n  } //When foreign country is selected\n  //No streak data or timeline functionality\n  //Only data from two days/files is processed\n\n\n  async callAPIGlobal(city, country, markDate, process = true) {\n    if (city == 'Overall') {\n      city = '';\n    }\n\n    let data = [{}];\n    data[0] = {\n      Date: '',\n      Confirmed: 0,\n      Hospitalized: 0,\n      Deaths: 0,\n      Recovered: 0,\n      RecoveryRate: 0,\n      MortalityRate: 0,\n      NewConfirmed: 0,\n      NewHospitalized: 0,\n      NewDeaths: 0,\n      NewRecovered: 0\n    };\n    const thisData = data[0];\n    const sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\n    const sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n    let lines = '';\n\n    while (lines == '') {\n      const markDateStr = markDate.toISOString();\n      const sourceDate = markDateStr.slice(5, 8) + markDateStr.slice(8, 10) + '-' + markDate.getFullYear();\n      markDate.setDate(markDate.getDate() - 1); //console.log(sourceDate);\n\n      try {\n        const cancelToken = this.cancelSource.token;\n        const response = await axios.get(sourcePrefix + sourceDate + '.csv', {\n          headers: {\n            'Content-Type': 'text/csv'\n          },\n          cancelToken: cancelToken\n        });\n        lines = response.data.split(/\\r?\\n/);\n        thisData.Date = sourceDate.replace('-', '\\/').replace('-', '\\/');\n      } catch (err) {\n        console.log(err);\n        return undefined;\n      }\n    }\n\n    for (let i = 1; i < lines.length; i++) {\n      if ((lines[i].match(/\"/g) || []).length > 2) continue;\n      const values = lines[i].split(',');\n      if (city != '' && city != values[2] || country != '' && country != values[3]) continue;\n      const confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\n      const deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\n      const recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\n      thisData.Confirmed = confirmed;\n      thisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\n      thisData.Deaths = deaths;\n      thisData.Recovered = recovered;\n      thisData.RecoveryRate = recovered / confirmed * 100;\n      thisData.MortalityRate = deaths / confirmed * 100;\n    }\n\n    if (process) {\n      const prevData = await this.callAPIGlobal(city, country, markDate, false);\n      thisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\n      thisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\n      thisData.NewDeaths = thisData.Deaths - prevData.Deaths;\n      thisData.NewRecovered = thisData.Recovered - prevData.Recovered; //console.log(data);\n\n      this.processData(sourceRef, data, false);\n    }\n\n    return thisData;\n  } //For when Thailand is selected\n  //Provides retrospective data and graph functionalities\n  //Local scoped source, data from over 200 days are stored within only one file\n\n\n  async callAPIThailand() {\n    const source = 'https://covid19.th-stat.com/api/open/timeline';\n    let data = [];\n\n    try {\n      const cancelToken = this.cancelSource.token;\n      const response = await axios.get(source, {\n        cancelToken: cancelToken\n      });\n      data = response.data['Data'];\n    } catch (err) {\n      console.log(err);\n      return undefined;\n    }\n\n    if (data.length > 0) this.processData(source, data);\n  }\n\n  getLastDate(type, data) {\n    for (let i = data.length - 1; i >= 0; i--) {\n      if (data[i][type] != 0) return data[i]['Date'];\n    }\n  }\n\n  getDateDiff(date) {\n    let now = new Date().getTime();\n    return Math.floor((now - new Date(date).getTime()) / 86400000);\n  }\n\n  processData(source, data, hasTimeline = true) {\n    if (data.length <= 0) return;\n    const lastData = data.slice(-1)[0];\n    const dataReformatted = data.slice().map(d => {\n      return Object.assign({}, d, {\n        Date: d.Date.slice(3, 6) + d.Date.slice(0, 2)\n      });\n    });\n    const lastUpdated = lastData['Date'];\n    let lastConfirmedFormatted = 0;\n    let lastDeathFormatted = 0;\n    let noConfirmedStreak = 0;\n    let noDeathStreak = 0;\n\n    if (hasTimeline) {\n      const lastConfirmed = this.getLastDate('NewConfirmed', data);\n      const lastDeath = this.getLastDate('NewDeaths', data);\n      lastConfirmedFormatted = lastConfirmed.slice(3, 6) + lastConfirmed.slice(0, 3) + lastConfirmed.slice(6);\n      lastDeathFormatted = lastDeath.slice(3, 6) + lastDeath.slice(0, 3) + lastDeath.slice(6);\n      noConfirmedStreak = this.getDateDiff(lastConfirmed);\n      noDeathStreak = this.getDateDiff(lastDeath);\n    }\n\n    this.setState({\n      hasData: true,\n      hasTimeline: hasTimeline,\n      dataTimeline: dataReformatted,\n      dataTimeline15: dataReformatted.slice(1).slice(-15),\n      data_text: {\n        source: source,\n        updatedDate: lastUpdated.slice(3, 6) + lastUpdated.slice(0, 3) + lastUpdated.slice(6),\n        confirmed: lastData['Confirmed'],\n        hospitalized: lastData['Hospitalized'],\n        deaths: lastData['Deaths'],\n        recovered: lastData['Recovered'],\n        newConfirmed: lastData['NewConfirmed'],\n        newHospitalized: lastData['NewHospitalized'],\n        newDeaths: lastData['NewDeaths'],\n        newRecovered: lastData['NewRecovered']\n      },\n      data_pie: [{\n        name: 'Hospitalized',\n        value: lastData['Hospitalized']\n      }, {\n        name: 'Deaths',\n        value: lastData['Deaths']\n      }, {\n        name: 'Recovered',\n        value: lastData['Recovered']\n      }],\n      lastConfirmed: lastConfirmedFormatted,\n      lastDeath: lastDeathFormatted,\n      noConfirmedStreak: noConfirmedStreak,\n      noDeathStreak: noDeathStreak,\n      rateRecovery: (100 * lastData['Recovered'] / lastData['Confirmed']).toFixed(2) + '%',\n      rateDeath: (100 * lastData['Deaths'] / lastData['Confirmed']).toFixed(2) + '%'\n    });\n  }\n\n  countryCompare(category) {\n    return function innerSort(a, b) {\n      let valA = a[category];\n      let valB = b[category];\n\n      if (typeof valA == \"string\") {\n        valA = parseInt(valA);\n        valB = parseInt(valB);\n      }\n\n      if (valA > valB) return -1;else if (valA < valB) return 1;else return 0;\n    };\n  }\n\n  globalRankSelect(ranking, country) {\n    return ranking.findIndex(x => x.Country == country);\n  }\n\n  globalRankTopTen(ranking) {\n    return ranking.slice(0, 10);\n  }\n\n  globalRanking(category) {\n    const countries = Object.values(this.state.globalData);\n    countries.sort(this.countryCompare(category)); //console.log(countries);\n\n    this.setState({\n      rankSelect: this.globalRankSelect(countries, this.state.selectCountry),\n      rankTopTen: this.globalRankTopTen(countries)\n    });\n  }\n\n  globalRankingHeading(category) {\n    if (category == 'Confirmed') return \"Confirmed Cases Count\";else if (category == 'Hospitalized') return \"Active Cases Count\";else if (category == 'Deaths') return \"Deceased Cases Count\";else if (category == 'Recovered') return \"Recovered Cases Count\";else if (category == 'RecoveryRate') return \"Recovery Rate\";else if (category == 'MortalityRate') return \"Mortality Rate\";\n  }\n\n  countryEncodeAssist(country, countriesName) {\n    if (!countriesName.includes(country)) {\n      if (country == \"Bolivia\") country = \"Bolivia, Plurinational State of\";else if (country == \"Brunei\") country = \"Brunei Darussalam\";else if (country == \"Burma\") country = \"Myanmar\";else if (country == \"Congo (Brazzaville)\") country = \"Congo\";else if (country == \"Congo (Kinshasa)\") country = \"Congo, Democratic Republic of the\";else if (country == \"Cote d'Ivoire\") country = \"Côte d'Ivoire\";else if (country == \"Iran\") country = \"Iran, Islamic Republic of\";else if (country == \"Kosovo\") country = \"Serbia\";else if (country == \"Laos\") country = \"Lao People's Democratic Republic\";else if (country == \"Moldova\") country = \"Moldova, Republic of\";else if (country == \"Russia\") country = \"Russian Federation\";else if (country == \"Syria\") country = \"Syrian Arab Republic\";else if (country == \"Taiwan*\") country = \"Taiwan, Province of China\";else if (country == \"Tanzania\") country = \"Tanzania, United Republic of\";else if (country == \"US\") country = \"United States of America\";else if (country == \"United Kingdom\") country = \"United Kingdom of Great Britain and Northern Ireland\";else if (country == \"Venezuela\") country = \"Venezuela, Bolivarian Republic of\";else if (country == \"Vietnam\") country = \"Viet Nam\";else if (country == \"West Bank and Gaza\") country = \"Palestine, State of\";else return undefined;\n    }\n\n    const {\n      getCode\n    } = require('country-list');\n\n    return getCode(country);\n  }\n\n  countryDecodeAssist(code) {\n    const {\n      getName,\n      getNames\n    } = require('country-list');\n\n    const countriesName = getNames();\n    let country = getName(code);\n    if (country == \"Bolivia, Plurinational State of\") country = \"Bolivia\";else if (country == \"Brunei Darussalam\") country = \"Brunei\";else if (country == \"Myanmar\") country = \"Burma\";else if (country == \"Congo\") country = \"Congo (Brazzaville)\";else if (country == \"Congo, Democratic Republic of the\") country = \"Congo (Kinshasa)\";else if (country == \"Côte d'Ivoire\") country = \"Cote d'Ivoire\";else if (country == \"Iran, Islamic Republic of\") country = \"Iran\";else if (country == \"Serbia\") country = \"Kosovo\";else if (country == \"Lao People's Democratic Republic\") country = \"Laos\";else if (country == \"Moldova, Republic of\") country = \"Moldova\";else if (country == \"Russian Federation\") country = \"Russia\";else if (country == \"Syrian Arab Republic\") country = \"Syria\";else if (country == \"Taiwan\") country = \"Taiwan*\";else if (country == \"Tanzania, United Republic of\") country = \"Tanzania\";else if (country == \"United States of America\") country = \"US\";else if (country == \"United Kingdom of Great Britain and Northern Ireland\") country = \"United Kingdom\";else if (country == \"Venezuela, Bolivarian Republic of\") country = \"Venezuela\";else if (country == \"Viet Nam\") country = \"Vietnam\";else if (country == \"Palestine, State of\") country = \"West Bank and Gaza\";\n    return country;\n  }\n\n  processMapGlobalData(countries, globalData) {\n    const {\n      getCode,\n      getNames\n    } = require('country-list');\n\n    const countriesName = getNames();\n    const mapGlobalData = {\n      Confirmed: {},\n      Hospitalized: {},\n      Deaths: {},\n      Recovered: {},\n      RecoveryRate: {},\n      MortalityRate: {}\n    };\n\n    for (let i = 0; i < countries.length; i++) {\n      const country = countries[i];\n      const data = globalData[country];\n      const code = this.countryEncodeAssist(country, countriesName);\n      if (code == undefined) continue;\n      mapGlobalData['Confirmed'][code] = data['Confirmed'];\n      mapGlobalData['Hospitalized'][code] = data['Hospitalized'];\n      mapGlobalData['Deaths'][code] = data['Deaths'];\n      mapGlobalData['Recovered'][code] = data['Recovered'];\n      mapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\n      mapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\n    } //console.log(mapGlobalData);\n\n\n    return mapGlobalData;\n  }\n\n  renderMap(category) {\n    const handleClick = (e, code) => {\n      const country = this.countryDecodeAssist(code);\n      if (this.state.countries.includes(country)) this.setState({\n        selectCountry: country,\n        selectCity: 'Overall'\n      });\n    };\n\n    const data = this.state.mapGlobalData;\n    const mapData = data[category]; //console.log(mapData);\n\n    let minColor = \"#FFFFFF\";\n    let maxColor = cRed;\n    if (category == \"Recovered\" || category == \"RecoveryRate\") maxColor = cBlue;\n    let normFunction = \"polynomial\";\n    if (category == \"RecoveryRate\" || category == \"MortalityRate\") normFunction = \"linear\";\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 4\n      }\n    }, __jsx(VectorMap, {\n      map: \"world_mill\",\n      backgroundColor: \"#000000\" //\"transparent\" //change it to ocean blue: #0077be\n      ,\n      zoomOnScroll: false,\n      containerStyle: {\n        width: \"100%\",\n        height: \"520px\"\n      },\n      onRegionClick: handleClick,\n      containerClassName: \"map\",\n      regionStyle: {\n        initial: {\n          fill: \"#A0A0A0\",\n          \"fill-opacity\": 1,\n          stroke: \"white\",\n          \"stroke-width\": 0.2,\n          \"stroke-opacity\": 1\n        },\n        hover: {\n          \"fill-opacity\": 0.75,\n          cursor: \"pointer\"\n        },\n        selected: {},\n        selectedHover: {}\n      },\n      regionsSelectable: false,\n      series: {\n        regions: [{\n          values: mapData,\n          //this is your data\n          scale: [minColor, maxColor],\n          //your color game's here\n          normalizeFunction: normFunction\n        }]\n      },\n      onRegionTipShow: (event, label, code) => {\n        label.html('<b><i>' + label.html() + '</i></b></br>' + 'Confirmed: ' + data['Confirmed'][code] + '</br>' + 'Hospitalized: ' + data['Hospitalized'][code] + '</br>' + 'Deaths: ' + data['Deaths'][code] + '</br>' + 'Recovered: ' + data['Recovered'][code] + '</br>' + 'Recovery rate: ' + data['RecoveryRate'][code] + '%' + '</br>' + 'Mortality rate: ' + data['MortalityRate'][code] + '%');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 5\n      }\n    }));\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      hasData,\n      selectCountry,\n      selectCity,\n      fastMode,\n      dataTimeline,\n      dataTimeline15,\n      data_text,\n      data_pie,\n      selectCategory\n    } = this.state;\n    if (!hasData) return __jsx(\"h\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 12\n      }\n    }, \"ERROR: Cannot fetch data\");\n    const selectedCountryData = this.state.globalData[selectCountry];\n    let cityChoice = [\"Overall\"];\n\n    if (selectedCountryData != undefined && selectedCountryData.CitiesN != 0) {\n      cityChoice = selectedCountryData.Cities.slice(0);\n      cityChoice.splice(0, 0, \"Overall\");\n    }\n\n    const categoryChoice = ['Confirmed', 'Hospitalized', 'Deaths', 'Recovered', 'RecoveryRate', 'MortalityRate'];\n    let rankSuffix = \" cases\";\n\n    if (selectCategory == 'RecoveryRate' || selectCategory == 'MortalityRate') {\n      rankSuffix = \"%\";\n    }\n\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 4\n      }\n    }, __jsx(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 5\n      }\n    }), __jsx(AppBar, {\n      style: {\n        background: cDRed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 5\n      }\n    }, __jsx(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 6\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      className: classes.title,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 7\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 8\n      }\n    }, \"COVID-19 Dashboard\")))), __jsx(\"div\", {\n      className: classes.appBarSpacer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 5\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 5\n      }\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 7\n      }\n    }, __jsx(MuiThemeProvider, {\n      theme: darkTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      align: \"left\",\n      color: \"textPrimary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 9\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 10\n      }\n    }), \"Last updated: \", data_text.updatedDate), __jsx(Typography, {\n      variant: \"subtitle2\",\n      align: \"left\",\n      color: \"textPrimary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: data_text.source,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 10\n      }\n    }, \" \", data_text.source)))), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 7\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 8\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      style: {\n        height: '32px',\n        width: '128px',\n        float: 'right',\n        color: fastMode ? cDRed : 'blue'\n      },\n      onClick: () => this.setState({\n        fastMode: !fastMode\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 8\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 9\n      }\n    }, fastMode ? \"FAST MODE\" : \"FULL MODE\"))), __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 7\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 8\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 13\n      }\n    }), __jsx(Dropdown, {\n      options: this.state.countries,\n      value: selectCountry,\n      onChange: select => this.setState({\n        selectCountry: select.value,\n        selectCity: 'Overall'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 8\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 7\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 8\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 13\n      }\n    }), __jsx(Dropdown, {\n      options: cityChoice,\n      value: selectCity,\n      onChange: select => this.setState({\n        selectCity: select.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 8\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      style: {\n        color: 'steelblue'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 52\n      }\n    }, \"Confirmed\")), __jsx(Typography, {\n      style: {\n        color: cBlue\n      },\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 9\n      }\n    }, data_text.confirmed.toLocaleString()), __jsx(Typography, {\n      style: {\n        color: 'steelblue'\n      },\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 9\n      }\n    }, \"+ \", data_text.newConfirmed.toLocaleString()))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      style: {\n        color: 'goldenrod'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 9\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 52\n      }\n    }, \"Hospitalized\")), __jsx(Typography, {\n      style: {\n        color: cOrange\n      },\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }\n    }, data_text.hospitalized.toLocaleString()), __jsx(Typography, {\n      style: {\n        color: 'goldenrod'\n      },\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 9\n      }\n    }, data_text.newHospitalized >= 0 ? '+' : '-', \" \", Math.abs(data_text.newHospitalized).toLocaleString()))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      style: {\n        color: 'fireBrick'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 9\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 52\n      }\n    }, \"Deaths\")), __jsx(Typography, {\n      style: {\n        color: cRed\n      },\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 9\n      }\n    }, data_text.deaths.toLocaleString()), __jsx(Typography, {\n      style: {\n        color: 'fireBrick'\n      },\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 9\n      }\n    }, \"+ \", data_text.newDeaths.toLocaleString()))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 48\n      }\n    }, \"Recovered\")), __jsx(Typography, {\n      style: {\n        color: cGreen\n      },\n      variant: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 9\n      }\n    }, data_text.recovered.toLocaleString()), __jsx(Typography, {\n      style: {\n        color: 'green'\n      },\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 9\n      }\n    }, \"+ \", data_text.newRecovered.toLocaleString()))), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 8\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 10\n      }\n    }, \"Last confirmed: \", this.state.lastConfirmed, \" (\", this.state.noConfirmedStreak, \" days ago)\"), __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 10\n      }\n    }, \"Last death: \", this.state.lastDeath, \" (\", this.state.noDeathStreak, \" days ago)\")))), __jsx(Grid, {\n      item: true,\n      xs: this.state.hasTimeline ? 6 : 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 8\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 9\n      }\n    }, \"Recovery Rate: \", this.state.rateRecovery), __jsx(Typography, {\n      variant: \"h6\",\n      style: {\n        color: cDRed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 9\n      }\n    }, \"Mortality Rate: \", this.state.rateDeath)))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 6\n      }\n    }), this.state.hasTimeline && __jsx(React.Fragment, null, __jsx(\"button\", {\n      style: {\n        height: '32px',\n        width: '144px',\n        float: 'right',\n        color: this.state.showGraph ? 'grey' : 'steelblue'\n      },\n      onClick: () => this.setState({\n        showGraph: !this.state.showGraph\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 7\n      }\n    }, \"Show/Hide Graphs\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 7\n      }\n    })), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 6\n      }\n    }), this.state.showGraph && //Whether or not to display graphs\n    __jsx(React.Fragment, null, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 9\n      }\n    }, __jsx(BarChart, {\n      width: 500,\n      height: 300,\n      data: dataTimeline15,\n      margin: {\n        top: 5,\n        right: 5,\n        left: 0,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 10\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 11\n      }\n    }), __jsx(XAxis, {\n      dataKey: \"Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 11\n      }\n    }), __jsx(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 11\n      }\n    }), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 11\n      }\n    }), __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 11\n      }\n    }), __jsx(Bar, {\n      dataKey: \"NewConfirmed\",\n      fill: cBlue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 11\n      }\n    }), __jsx(Bar, {\n      dataKey: \"NewDeaths\",\n      fill: cRed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 11\n      }\n    }))))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 9\n      }\n    }, __jsx(PieChart, {\n      width: 400,\n      height: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 10\n      }\n    }, __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 11\n      }\n    }), __jsx(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data_pie,\n      outerRadius: 100,\n      label: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 11\n      }\n    }, __jsx(Cell, {\n      fill: cOrange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 12\n      }\n    }), __jsx(Cell, {\n      fill: cRed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 12\n      }\n    }), __jsx(Cell, {\n      fill: cGreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 12\n      }\n    })), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 11\n      }\n    }))))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 8\n      }\n    }, __jsx(ResponsiveContainer, {\n      width: \"100%\",\n      height: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 9\n      }\n    }, __jsx(LineChart, {\n      data: dataTimeline,\n      margin: {\n        top: 5,\n        right: 5,\n        left: 0,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 10\n      }\n    }, __jsx(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 11\n      }\n    }), __jsx(XAxis, {\n      dataKey: \"Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 11\n      }\n    }), __jsx(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 11\n      }\n    }), __jsx(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 11\n      }\n    }), __jsx(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Confirmed\",\n      stroke: cBlue,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Hospitalized\",\n      stroke: cOrange,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Deaths\",\n      stroke: cRed,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 11\n      }\n    }), __jsx(Line, {\n      type: \"monotone\",\n      strokeWidth: 2,\n      dataKey: \"Recovered\",\n      stroke: cGreen,\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1037,\n        columnNumber: 11\n      }\n    })))))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 6\n      }\n    }), __jsx(\"button\", {\n      style: {\n        height: '32px',\n        width: '144px',\n        float: 'right',\n        color: 'grey'\n      },\n      onClick: () => this.setState({\n        showGraph: !this.state.showGraph\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 6\n      }\n    }, \"Hide Graphs\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 6\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 11\n      }\n    })), __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      justify: \"space-between\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 8\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      style: {\n        color: cRed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 10\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 11\n      }\n    }, \"Global Ranking based on:\")), __jsx(Typography, {\n      variant: \"h5\",\n      style: {\n        color: cDRed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 10\n      }\n    }, this.globalRankingHeading(selectCategory))), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }\n    }, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 10\n      }\n    }), __jsx(Dropdown, {\n      options: categoryChoice,\n      value: 'Hospitalized',\n      onChange: select => this.setState({\n        selectCategory: select.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 10\n      }\n    }))), __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 6\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 7\n      }\n    }, this.state.rankSelect >= 0 && __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 9\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 10\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 11\n      }\n    }, __jsx(Typography, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 12\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 13\n      }\n    }, \"Rank \", this.state.rankSelect, \". \", selectCountry, \" - \", this.state.globalData[selectCountry][selectCategory], rankSuffix), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 13\n      }\n    }), \"out of \", this.state.countries.length, \" countries\"))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 10\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 11\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 12\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 13\n      }\n    }, \"Top 10 Countries\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 36\n      }\n    })), __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 12\n      }\n    }, this.state.rankTopTen.map((c, i) => __jsx(React.Fragment, null, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 15\n      }\n    }, i + 1, \".\"), \" \", c.Country, \" - \", c[selectCategory], rankSuffix, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 74\n      }\n    })))))))), __jsx(Grid, {\n      item: true,\n      xs: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 7\n      }\n    }, this.state.mapGlobalData != null && __jsx(React.Fragment, null, this.renderMap(selectCategory))))), __jsx(\"footer\", {\n      className: classes.footer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 5\n      }\n    }, __jsx(Paper, {\n      className: classes.paper,\n      style: {\n        background: \"#8F8080\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 6\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 7\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 8\n      }\n    }, \"COVID-19 Dashboard for Tencent Thailand's Internship Project\")), __jsx(Typography, {\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 7\n      }\n    }, \"By Thanjira S. and Woottipat H.\"))));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/pages/_app.js"],"names":["React","withStyles","createMuiTheme","MuiThemeProvider","AppBar","Toolbar","Typography","CssBaseline","Container","Paper","Grid","Dropdown","axios","ResponsiveContainer","XAxis","YAxis","CartesianGrid","Tooltip","Legend","LineChart","Line","BarChart","Bar","PieChart","Pie","Cell","dynamic","VectorMap","then","m","ssr","styles","theme","appBarSpacer","mixins","toolbar","title","flexGrow","container","display","flexDirection","alignItems","justifyContent","paper","padding","spacing","backgroundColor","footer","palette","background","marginTop","root","formControl","margin","minWidth","selectEmpty","darkTheme","type","cBlue","cOrange","cRed","cGreen","cDRed","App","Component","constructor","props","state","hasData","selectCountry","selectCity","countries","globalData","fastMode","hasTimeline","dataTimeline","dataTimeline15","data_text","updatedDate","confirmed","hospitalized","deaths","recovered","newConfirmed","newHospitalized","newDeaths","newRecovered","data_pie","lastConfirmed","lastDeath","noConfirmedStreak","noDeathStreak","rateRecovery","rateDeath","showGraph","selectCategory","rankSelect","rankTopTen","mapGlobalData","referenceDate","Date","setDate","getDate","CancelToken","cancelSource","source","getCode","getName","getData","require","getCountryCode","getCountryName","getCountryData","componentDidMount","callAPIGlobalAll","fetchData","componentDidUpdate","prevProps","prevState","clearAxiosCalls","globalRanking","cancel","markDate","getTime","countriesN","data","Object","sourceRef","sourcePrefix","formatChange","cityIndex","countryIndex","conIndex","deathIndex","recIndex","quoteLimit","lines","markDateStr","toISOString","sourceDate","slice","getFullYear","cancelToken","token","response","get","headers","split","err","console","log","undefined","i","length","match","values","country","city","parseInt","Country","Cities","CitiesN","citiesN","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","toFixed","MortalityRate","processMapGlobalData","setState","callAPIGlobalTimeline","dataN","prevConfirmed","prevHospitalized","prevDeaths","prevRecovered","tomorrow","now","lastIndex","date","replace","NewConfirmed","NewHospitalized","NewDeaths","NewRecovered","processData","callAPIGlobal","process","thisData","prevData","callAPIThailand","getLastDate","getDateDiff","Math","floor","lastData","dataReformatted","map","d","assign","lastUpdated","lastConfirmedFormatted","lastDeathFormatted","name","value","countryCompare","category","innerSort","a","b","valA","valB","globalRankSelect","ranking","findIndex","x","globalRankTopTen","sort","globalRankingHeading","countryEncodeAssist","countriesName","includes","countryDecodeAssist","code","getNames","parseFloat","renderMap","handleClick","e","mapData","minColor","maxColor","normFunction","width","height","initial","fill","stroke","hover","cursor","selected","selectedHover","regions","scale","normalizeFunction","event","label","html","render","classes","selectedCountryData","cityChoice","splice","categoryChoice","rankSuffix","float","color","select","toLocaleString","abs","top","right","left","bottom","c"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport axios from 'axios';\r\nimport { ResponsiveContainer, XAxis, YAxis, CartesianGrid, \r\n  Tooltip, Legend, LineChart, Line, BarChart, Bar, PieChart, \r\n  Pie, Cell, } from 'recharts';\r\nimport '../public/jquery-jvectormap.css'\r\n\r\nimport dynamic from 'next/dynamic'\r\nconst VectorMap = dynamic(\r\n  () => import(\"react-jvectormap\").then((m) => m.VectorMap),\r\n  { ssr: false, }\r\n);\r\n\r\nimport '../components/dataFetch.js';\r\n  \r\nconst styles = theme => ({\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n\t\tbackgroundColor: \"#FFFEFE\",\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: theme.spacing(2),\r\n  },\r\n\troot: {\r\n    backgroundColor: \"#000000\",\r\n  },\r\n\tformControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nconst cBlue = '#20A0E0';\r\nconst cOrange = '#F7B860';\r\nconst cRed = '#E04040';\r\nconst cGreen = '#80D080';\r\nconst cDRed = '#BB0A1E';\r\n\r\nclass App extends React.Component {\r\n\t\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasData: false,\r\n\t\t\tselectCountry: 'Thailand',\r\n\t\t\tselectCity: 'Overall',\r\n\t\t\tcountries: [],\r\n\t\t\tglobalData: [],\r\n\t\t\tfastMode: true,\r\n\t\t\thasTimeline: true,\r\n\t\t\tdataTimeline: [],\r\n\t\t\tdataTimeline15: [],\r\n\t\t\tdata_text: {\r\n\t\t\t\tupdatedDate: '',\r\n\t\t\t\tconfirmed: '',\r\n\t\t\t\thospitalized: '',\r\n\t\t\t\tdeaths: '',\r\n\t\t\t\trecovered: '',\r\n\t\t\t\tnewConfirmed: '',\r\n\t\t\t\tnewHospitalized: '',\r\n\t\t\t\tnewDeaths: '',\r\n\t\t\t\tnewRecovered: '',\r\n\t\t\t},\r\n\t\t\tdata_pie: [{}],\r\n\t\t\tlastConfirmed: 0,\r\n\t\t\tlastDeath: 0,\r\n\t\t\tnoConfirmedStreak: 0,\r\n\t\t\tnoDeathStreak: 0,\r\n\t\t\trateRecovery: 0,\r\n\t\t\trateDeath: 0,\r\n\t\t\tshowGraph: false,\r\n\t\t\tselectCategory: 'Hospitalized',\r\n\t\t\trankSelect: -1,\r\n\t\t\trankTopTen: [],\r\n\t\t\tmapGlobalData: null,\r\n\t\t};\r\n\t\t\r\n\t\tthis.referenceDate = new Date();\r\n\t\tthis.referenceDate.setDate(this.referenceDate.getDate()-1);\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t\t\r\n\t\tconst { getCode, getName, getData } = require(\"country-list\");\r\n\t\tthis.getCountryCode = getCode;\r\n\t\tthis.getCountryName = getName;\r\n\t\tthis.getCountryData = getData;\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t\tthis.callAPIGlobalAll(this.referenceDate);\r\n\t\tthis.fetchData(this.referenceDate);\r\n  }\r\n\t\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif ((prevState.selectCountry != this.state.selectCountry) ||\r\n     \t\t(prevState.selectCity != this.state.selectCity) ||\r\n\t\t\t\t(prevState.fastMode != this.state.fastMode))\r\n\t\t{\r\n\t\t\tthis.clearAxiosCalls();\r\n\t\t\tthis.fetchData(this.referenceDate);\r\n\t\t}\r\n\t\t\r\n\t\tif (prevState.selectCategory != this.state.selectCategory)\r\n\t\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\tclearAxiosCalls() {\r\n\t\tthis.cancelSource.cancel('Axios operations cleared');\r\n\t\t\r\n\t\tconst CancelToken = axios.CancelToken;\r\n\t\tthis.cancelSource = CancelToken.source();\r\n\t}\r\n\t\r\n\t//For ranking and map functionalities\r\n\t//Only data from one day/file is processed\r\n\tasync callAPIGlobalAll(markDate) {\r\n\t\t\r\n\t\tmarkDate = new Date(markDate.getTime());\r\n\t\t\r\n\t\tlet countries = [];\r\n\t\tlet countriesN = 0;\r\n\t\t\r\n\t\tlet data = new Object();\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\tlet quoteLimit = 0;\r\n\t\t//Workaround for source's formatting inconsistencies\r\n\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\tcityIndex = 2;\r\n\t\t\tcountryIndex = 3;\r\n\t\t\tconIndex = 7;\r\n\t\t\tdeathIndex = 8;\r\n\t\t\trecIndex = 9;\r\n\t\t\tquoteLimit = 2;\r\n\t\t}\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\tconst markDateStr = markDate.toISOString();\r\n\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t//console.log(sourceDate);\r\n\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (lines != '') {\t\t\r\n\t\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\t\tif (lines[i] == '' || ((lines[i].match(/\"/g) || []).length > quoteLimit))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tconst values = lines[i].split(',');\r\n\t\t\t\tconst country = values[countryIndex];\r\n\t\t\t\tconst city = values[cityIndex];\r\n\t\t\t\tlet confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tlet hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tlet deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tlet recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\tif (data[country] != undefined) {\r\n\t\t\t\t\tconfirmed += data[country][\"Confirmed\"];\r\n\t\t\t\t\thospitalized += data[country][\"Hospitalized\"];\r\n\t\t\t\t\tdeaths += data[country][\"Deaths\"];\r\n\t\t\t\t\trecovered += data[country][\"Recovered\"];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata[country] = new Object();\r\n\t\t\t\t\tdata[country].Country = country;\r\n\t\t\t\t\tdata[country].Cities = [];\r\n\t\t\t\t\tdata[country].CitiesN = 0;\r\n\t\t\t\t\tcountries[countriesN] = country;\r\n\t\t\t\t\tcountriesN++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst citiesN = data[country].CitiesN;\r\n\t\t\t\tdata[country].Confirmed = confirmed;\r\n\t\t\t\tdata[country].Hospitalized = hospitalized;\r\n\t\t\t\tdata[country].Deaths = deaths;\r\n\t\t\t\tdata[country].Recovered = recovered;\r\n\t\t\t\tdata[country].RecoveryRate = ((recovered/confirmed) * 100).toFixed(2);\r\n\t\t\t\tdata[country].MortalityRate = ((deaths/confirmed) * 100).toFixed(2);\r\n\t\t\t\tif (city != '') {\r\n\t\t\t\t\tdata[country].Cities[citiesN] = city;\r\n\t\t\t\t\tdata[country].CitiesN = citiesN + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(data);\r\n\t\t\t\r\n\t\t\tconst mapGlobalData = this.processMapGlobalData(countries, data);\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tcountries: countries,\r\n\t\t\t\tglobalData: data,\r\n\t\t\t\tmapGlobalData: mapGlobalData,\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.globalRanking(this.state.selectCategory);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Taxing, over 200 days/files must be processed\r\n\t//Somehow sometimes fast, sometimes slow. Cause still unknown.\r\n\tasync callAPIGlobalTimeline(city, country) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tlet dataN = 0;\r\n\t\t\r\n\t\tlet prevConfirmed = 0;\r\n\t\tlet prevHospitalized = 0;\r\n\t\tlet prevDeaths = 0;\r\n\t\tlet prevRecovered = 0;\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\tlet markDate = new Date(2020,0,23);\r\n\t\tconst tomorrow = new Date();\r\n\t\ttomorrow.setDate(tomorrow.getDate()+1);\r\n\t\tconst now = tomorrow.getTime();\r\n\t\t\r\n\t\tlet cityIndex = 0;\r\n\t\tlet countryIndex = 1;\r\n\t\tlet conIndex = 3;\r\n\t\tlet deathIndex = 4;\r\n\t\tlet recIndex = 5;\r\n\t\t\r\n\t\tlet lastIndex = 1;\r\n\t\tconst formatChange = (new Date(2020,2,22)).getTime();\r\n\t\t\r\n\t\twhile (markDate.getTime() < now) {\r\n\t\t\tlet lines = '';\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tconsole.log(sourceDate);\r\n\t\t\t//console.log(lastIndex);\r\n\t\t\t\r\n\t\t\t//Workaround for source's formatting inconsistencies\r\n\t\t\tif (cityIndex == 0 && markDate.getTime() >= formatChange) {\r\n\t\t\t\tcityIndex = 2;\r\n\t\t\t\tcountryIndex = 3;\r\n\t\t\t\tconIndex = 7;\r\n\t\t\t\tdeathIndex = 8;\r\n\t\t\t\trecIndex = 9;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmarkDate.setDate(markDate.getDate()+1);\r\n\t\t\t\r\n\t\t\tif (lines == '')\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconsole.log(lastIndex);\r\n\t\t\tconst date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\tlet values = undefined;\r\n\t\t\tif (lines[lastIndex])\r\n\t\t\t\tvalues = lines[lastIndex].split(',');\r\n\t\t\telse lastIndex = 1;\r\n\t\t\t\r\n\t\t\tif (values == undefined || (city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex]))\r\n\t\t\t{\r\n\t\t\t\tfor (let i=lastIndex+1; i<lines.length; i++) {\r\n\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (values == undefined) {\r\n\t\t\t\t\tfor (let i=1; i<lastIndex; i++) {\r\n\t\t\t\t\t\tvalues = lines[i].split(',');\r\n\t\t\t\t\t\tif ((city != '' && city != values[cityIndex]) || (country != '' && country != values[countryIndex])) {\r\n\t\t\t\t\t\t\tvalues = undefined;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlastIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (values != undefined) {\r\n\t\t\t\tconst confirmed = values[conIndex] == '' ? 0 : parseInt(values[conIndex]);\r\n\t\t\t\tconst hospitalized = values[10] == '' ? 0 : parseInt(values[10]);\r\n\t\t\t\tconst deaths = values[deathIndex] == '' ? 0 : parseInt(values[deathIndex]);\r\n\t\t\t\tconst recovered = values[recIndex] == '' ? 0 : parseInt(values[recIndex]);\r\n\t\t\t\t\r\n\t\t\t\tdata[dataN] = {\r\n\t\t\t\t\tDate: date,\r\n\t\t\t\t\tConfirmed: confirmed,\r\n\t\t\t\t\tHospitalized: hospitalized,\r\n\t\t\t\t\tDeaths: deaths,\r\n\t\t\t\t\tRecovered: recovered,\r\n\t\t\t\t\tNewConfirmed: confirmed - prevConfirmed,\r\n\t\t\t\t\tNewHospitalized: hospitalized - prevHospitalized,\r\n\t\t\t\t\tNewDeaths: deaths - prevDeaths,\r\n\t\t\t\t\tNewRecovered: recovered - prevRecovered,\r\n\t\t\t\t}\r\n\t\t\t\tprevConfirmed = confirmed;\r\n\t\t\t\tprevHospitalized = hospitalized;\r\n\t\t\t\tprevDeaths = deaths;\r\n\t\t\t\tprevRecovered = recovered;\r\n\t\t\t\tdataN++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(data);\r\n\t\t\r\n\t\tthis.processData(sourceRef, data);\r\n\t}\r\n\t\r\n\t//When foreign country is selected\r\n\t//No streak data or timeline functionality\r\n\t//Only data from two days/files is processed\r\n\tasync callAPIGlobal(city, country, markDate, process = true) {\r\n\t\t\r\n\t\tif (city == 'Overall') {\r\n\t\t\tcity = '';\r\n\t\t}\r\n\t\t\r\n\t\tlet data = [{}];\r\n\t\tdata[0] = {\r\n\t\t\tDate: '',\r\n\t\t\tConfirmed: 0,\r\n\t\t\tHospitalized: 0,\r\n\t\t\tDeaths: 0,\r\n\t\t\tRecovered: 0,\r\n\t\t\tRecoveryRate: 0,\r\n\t\t\tMortalityRate: 0,\r\n\t\t\tNewConfirmed: 0,\r\n\t\t\tNewHospitalized: 0,\r\n\t\t\tNewDeaths: 0,\r\n\t\t\tNewRecovered: 0,\r\n\t\t};\r\n\t\tconst thisData = data[0];\r\n\t\t\r\n\t\tconst sourceRef = 'https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports';\r\n\t\tconst sourcePrefix = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\r\n\t\t\r\n\t\tlet lines = '';\r\n\t\twhile (lines == '') {\r\n\t\t\tconst markDateStr = markDate.toISOString();\r\n\t\t\tconst sourceDate = markDateStr.slice(5,8) + markDateStr.slice(8,10) + '-' + markDate.getFullYear();\r\n\t\t\tmarkDate.setDate(markDate.getDate()-1);\r\n\t\t\t//console.log(sourceDate);\r\n\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\t\tconst response = await axios.get(sourcePrefix + sourceDate + '.csv', {\r\n\t\t\t\t\theaders: { 'Content-Type': 'text/csv' },\r\n\t\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t\t});\r\n\t\t\t\tlines = response.data.split(/\\r?\\n/);\r\n\t\t\t\tthisData.Date = sourceDate.replace('-','\\/').replace('-','\\/');\r\n\t\t\t} catch(err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i=1; i<lines.length; i++) {\r\n\t\t\tif ((lines[i].match(/\"/g) || []).length > 2)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst values = lines[i].split(',');\r\n\t\t\tif ((city != '' && city != values[2]) || (country != '' && country != values[3]))\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tconst confirmed = thisData[\"Confirmed\"] + (values[7] == '' ? 0 : parseInt(values[7]));\r\n\t\t\tconst deaths = thisData[\"Deaths\"] + (values[8] == '' ? 0 : parseInt(values[8]));\r\n\t\t\tconst recovered = thisData[\"Recovered\"] + (values[9] == '' ? 0 : parseInt(values[9]));\r\n\t\t\tthisData.Confirmed = confirmed;\r\n\t\t\tthisData.Hospitalized = thisData[\"Hospitalized\"] + (values[10] == '' ? 0 : parseInt(values[10]));\r\n\t\t\tthisData.Deaths = deaths;\r\n\t\t\tthisData.Recovered = recovered;\r\n\t\t\tthisData.RecoveryRate = (recovered/confirmed) * 100;\r\n\t\t\tthisData.MortalityRate = (deaths/confirmed) * 100;\r\n\t\t}\r\n\t\t\r\n\t\tif (process) {\r\n\t\t\tconst prevData = await this.callAPIGlobal(city, country, markDate, false);\r\n\t\t\tthisData.NewConfirmed = thisData.Confirmed - prevData.Confirmed;\r\n\t\t\tthisData.NewHospitalized = thisData.Hospitalized - prevData.Hospitalized;\r\n\t\t\tthisData.NewDeaths = thisData.Deaths - prevData.Deaths;\r\n\t\t\tthisData.NewRecovered = thisData.Recovered - prevData.Recovered;\r\n\t\t\t\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.processData(sourceRef, data, false);\r\n\t\t\t\r\n\t\t}\r\n\t\treturn thisData;\r\n\t}\r\n\t\r\n\t//For when Thailand is selected\r\n\t//Provides retrospective data and graph functionalities\r\n\t//Local scoped source, data from over 200 days are stored within only one file\r\n\tasync callAPIThailand() {\r\n\t\t\r\n\t\tconst source = 'https://covid19.th-stat.com/api/open/timeline';\r\n\t\tlet data = [];\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst cancelToken = this.cancelSource.token;\r\n\t\t\tconst response = await axios.get(source, {\r\n\t\t\t\tcancelToken: cancelToken,\r\n\t\t\t});\r\n\t\t\tdata = response.data['Data'];\r\n\t\t} catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif (data.length > 0)\r\n\t\t\tthis.processData(source, data);\r\n\t}\r\n\t\r\n\tgetLastDate(type, data) {\r\n\t\tfor (let i=data.length-1; i>=0; i--) {\r\n\t\t\tif (data[i][type] != 0)\r\n\t\t\t\treturn data[i]['Date'];\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDateDiff(date) {\r\n\t\tlet now = (new Date()).getTime();\r\n\t\treturn Math.floor((now - (new Date(date)).getTime())/86400000);\r\n\t}\r\n\t\r\n\tprocessData(source, data, hasTimeline = true) {\r\n\t\tif (data.length <= 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tconst lastData = data.slice(-1)[0];\r\n\t\tconst dataReformatted = data.slice().map(d => {\r\n\t\t\treturn (\r\n\t\t\t\tObject.assign({},d,{\r\n\t\t\t\t\tDate: d.Date.slice(3,6) + d.Date.slice(0,2)\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\t\t\r\n\t\tconst lastUpdated = lastData['Date'];\r\n\t\tlet lastConfirmedFormatted = 0;\r\n\t\tlet lastDeathFormatted = 0;\r\n\t\tlet noConfirmedStreak = 0;\r\n\t\tlet noDeathStreak = 0;\r\n\r\n\t\tif (hasTimeline) {\r\n\t\t\tconst lastConfirmed = this.getLastDate('NewConfirmed',data);\r\n\t\t\tconst lastDeath = this.getLastDate('NewDeaths',data);\r\n\t\t\tlastConfirmedFormatted = lastConfirmed.slice(3,6) + lastConfirmed.slice(0,3) + lastConfirmed.slice(6);\r\n\t\t\tlastDeathFormatted = lastDeath.slice(3,6) + lastDeath.slice(0,3) + lastDeath.slice(6);\r\n\t\t\tnoConfirmedStreak = this.getDateDiff(lastConfirmed);\r\n\t\t\tnoDeathStreak = this.getDateDiff(lastDeath);\r\n\t\t}\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thasData: true,\r\n\t\t\thasTimeline: hasTimeline,\r\n\t\t\tdataTimeline: dataReformatted,\r\n\t\t\tdataTimeline15: dataReformatted.slice(1).slice(-15),\r\n\t\t\tdata_text: {\r\n\t\t\t\tsource: source,\r\n\t\t\t\tupdatedDate: lastUpdated.slice(3,6) + lastUpdated.slice(0,3) + lastUpdated.slice(6),\r\n\t\t\t\tconfirmed: lastData['Confirmed'],\r\n\t\t\t\thospitalized: lastData['Hospitalized'],\r\n\t\t\t\tdeaths: lastData['Deaths'],\r\n\t\t\t\trecovered: lastData['Recovered'],\r\n\t\t\t\tnewConfirmed: lastData['NewConfirmed'],\r\n\t\t\t\tnewHospitalized: lastData['NewHospitalized'],\r\n\t\t\t\tnewDeaths: lastData['NewDeaths'],\r\n\t\t\t\tnewRecovered: lastData['NewRecovered'],\r\n\t\t\t},\r\n\t\t\tdata_pie: [\r\n\t\t\t\t{ name: 'Hospitalized', value: lastData['Hospitalized'] },\r\n\t\t\t\t{ name: 'Deaths', value: lastData['Deaths'] },\r\n\t\t\t\t{ name: 'Recovered', value: lastData['Recovered'] },\r\n\t\t\t],\r\n\t\t\tlastConfirmed: lastConfirmedFormatted,\r\n\t\t\tlastDeath: lastDeathFormatted,\r\n\t\t\tnoConfirmedStreak: noConfirmedStreak,\r\n\t\t\tnoDeathStreak: noDeathStreak,\r\n\t\t\trateRecovery: (100*lastData['Recovered']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t\t\trateDeath: (100*lastData['Deaths']/lastData['Confirmed']).toFixed(2) + '%',\r\n\t\t});\r\n\t}\r\n\t\r\n\tcountryCompare(category) {\r\n\t\treturn function innerSort(a,b) {\r\n\t\t\tlet valA = a[category];\r\n\t\t\tlet valB = b[category];\r\n\t\t\tif (typeof valA == \"string\") {\r\n\t\t\t\tvalA = parseInt(valA);\r\n\t\t\t\tvalB = parseInt(valB);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (valA > valB)\r\n\t\t\t\treturn -1;\r\n\t\t\telse if (valA < valB)\r\n\t\t\t\treturn 1;\r\n\t\t\telse return 0;\r\n\t\t};\r\n\t}\r\n\t\r\n\tglobalRankSelect(ranking, country) {\r\n\t\treturn ranking.findIndex(x => x.Country == country);\r\n\t}\r\n\t\r\n\tglobalRankTopTen(ranking) {\r\n\t\treturn ranking.slice(0,10);\r\n\t}\r\n\t\r\n\tglobalRanking(category) {\r\n\t\tconst countries = Object.values(this.state.globalData);\r\n\t\tcountries.sort(this.countryCompare(category));\r\n\t\t//console.log(countries);\r\n\t\tthis.setState({\r\n\t\t\trankSelect: this.globalRankSelect(countries, this.state.selectCountry),\r\n\t\t\trankTopTen: this.globalRankTopTen(countries),\r\n\t\t});\r\n\t}\r\n\t\r\n\tglobalRankingHeading(category) {\r\n\t\tif (category == 'Confirmed')\r\n\t\t\treturn \"Confirmed Cases Count\";\r\n\t\telse if (category == 'Hospitalized')\r\n\t\t\treturn \"Active Cases Count\";\r\n\t\telse if (category == 'Deaths')\r\n\t\t\treturn \"Deceased Cases Count\";\r\n\t\telse if (category == 'Recovered')\r\n\t\t\treturn \"Recovered Cases Count\";\r\n\t\telse if (category == 'RecoveryRate')\r\n\t\t\treturn \"Recovery Rate\";\r\n\t\telse if (category == 'MortalityRate')\r\n\t\t\treturn \"Mortality Rate\";\r\n\t}\r\n\t\r\n\tcountryEncodeAssist(country, countriesName) {\r\n\t\tif (!countriesName.includes(country)) {\r\n\t\t\tif (country == \"Bolivia\")\r\n\t\t\t\tcountry = \"Bolivia, Plurinational State of\";\r\n\t\t\telse if (country == \"Brunei\")\r\n\t\t\t\tcountry = \"Brunei Darussalam\";\r\n\t\t\telse if (country == \"Burma\")\r\n\t\t\t\tcountry = \"Myanmar\";\r\n\t\t\telse if (country == \"Congo (Brazzaville)\")\r\n\t\t\t\tcountry = \"Congo\";\r\n\t\t\telse if (country == \"Congo (Kinshasa)\")\r\n\t\t\t\tcountry = \"Congo, Democratic Republic of the\";\r\n\t\t\telse if (country == \"Cote d'Ivoire\")\r\n\t\t\t\tcountry = \"Côte d'Ivoire\";\r\n\t\t\telse if (country == \"Iran\")\r\n\t\t\t\tcountry = \"Iran, Islamic Republic of\";\r\n\t\t\telse if (country == \"Kosovo\")\r\n\t\t\t\tcountry = \"Serbia\";\r\n\t\t\telse if (country == \"Laos\")\r\n\t\t\t\tcountry = \"Lao People's Democratic Republic\";\r\n\t\t\telse if (country == \"Moldova\")\r\n\t\t\t\tcountry = \"Moldova, Republic of\";\r\n\t\t\telse if (country == \"Russia\")\r\n\t\t\t\tcountry = \"Russian Federation\";\r\n\t\t\telse if (country == \"Syria\")\r\n\t\t\t\tcountry = \"Syrian Arab Republic\";\r\n\t\t\telse if (country == \"Taiwan*\")\r\n\t\t\t\tcountry = \"Taiwan, Province of China\";\r\n\t\t\telse if (country == \"Tanzania\")\r\n\t\t\t\tcountry = \"Tanzania, United Republic of\";\r\n\t\t\telse if (country == \"US\")\r\n\t\t\t\tcountry = \"United States of America\";\r\n\t\t\telse if (country == \"United Kingdom\")\r\n\t\t\t\tcountry = \"United Kingdom of Great Britain and Northern Ireland\";\r\n\t\t\telse if (country == \"Venezuela\")\r\n\t\t\t\tcountry = \"Venezuela, Bolivarian Republic of\";\r\n\t\t\telse if (country == \"Vietnam\")\r\n\t\t\t\tcountry = \"Viet Nam\";\r\n\t\t\telse if (country == \"West Bank and Gaza\")\r\n\t\t\t\tcountry = \"Palestine, State of\";\r\n\t\t\telse return undefined;\r\n\t\t}\r\n\t\t\r\n\t\tconst { getCode } = require('country-list');\r\n\t\treturn getCode(country);\r\n\t}\r\n\t\r\n\tcountryDecodeAssist(code) {\r\n\t\tconst { getName, getNames } = require('country-list');\r\n\t\tconst countriesName = getNames();\r\n\t\tlet country = getName(code);\r\n\t\t\r\n\t\tif (country == \"Bolivia, Plurinational State of\")\r\n\t\t\tcountry = \"Bolivia\";\r\n\t\telse if (country == \"Brunei Darussalam\")\r\n\t\t\tcountry = \"Brunei\";\r\n\t\telse if (country == \"Myanmar\")\r\n\t\t\tcountry = \"Burma\";\r\n\t\telse if (country == \"Congo\")\r\n\t\t\tcountry = \"Congo (Brazzaville)\";\r\n\t\telse if (country == \"Congo, Democratic Republic of the\")\r\n\t\t\tcountry = \"Congo (Kinshasa)\";\r\n\t\telse if (country == \"Côte d'Ivoire\")\r\n\t\t\tcountry = \"Cote d'Ivoire\";\r\n\t\telse if (country == \"Iran, Islamic Republic of\")\r\n\t\t\tcountry = \"Iran\";\r\n\t\telse if (country == \"Serbia\")\r\n\t\t\tcountry = \"Kosovo\";\r\n\t\telse if (country == \"Lao People's Democratic Republic\")\r\n\t\t\tcountry = \"Laos\";\r\n\t\telse if (country == \"Moldova, Republic of\")\r\n\t\t\tcountry = \"Moldova\";\r\n\t\telse if (country == \"Russian Federation\")\r\n\t\t\tcountry = \"Russia\";\r\n\t\telse if (country == \"Syrian Arab Republic\")\r\n\t\t\tcountry = \"Syria\";\r\n\t\telse if (country == \"Taiwan\")\r\n\t\t\tcountry = \"Taiwan*\";\r\n\t\telse if (country == \"Tanzania, United Republic of\")\r\n\t\t\tcountry = \"Tanzania\";\r\n\t\telse if (country == \"United States of America\")\r\n\t\t\tcountry = \"US\";\r\n\t\telse if (country == \"United Kingdom of Great Britain and Northern Ireland\")\r\n\t\t\tcountry = \"United Kingdom\";\r\n\t\telse if (country == \"Venezuela, Bolivarian Republic of\")\r\n\t\t\tcountry = \"Venezuela\";\r\n\t\telse if (country == \"Viet Nam\")\r\n\t\t\tcountry = \"Vietnam\";\r\n\t\telse if (country == \"Palestine, State of\")\r\n\t\t\tcountry = \"West Bank and Gaza\";\r\n\r\n\t\treturn country;\r\n\t}\r\n\t\r\n\tprocessMapGlobalData(countries, globalData) {\r\n\t\tconst { getCode, getNames } = require('country-list');\r\n\t\tconst countriesName = getNames();\r\n\t\tconst mapGlobalData = {\r\n\t\t\tConfirmed: {},\r\n\t\t\tHospitalized: {},\r\n\t\t\tDeaths: {},\r\n\t\t\tRecovered: {},\r\n\t\t\tRecoveryRate: {},\r\n\t\t\tMortalityRate: {},\r\n\t\t};\r\n\r\n\t\tfor (let i=0; i<countries.length; i++) {\r\n\t\t\tconst country = countries[i];\r\n\t\t\tconst data = globalData[country];\r\n\t\t\t\r\n\t\t\tconst code = this.countryEncodeAssist(country,countriesName);\r\n\t\t\tif (code == undefined)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tmapGlobalData['Confirmed'][code] = data['Confirmed'];\r\n\t\t\tmapGlobalData['Hospitalized'][code] = data['Hospitalized'];\r\n\t\t\tmapGlobalData['Deaths'][code] = data['Deaths'];\r\n\t\t\tmapGlobalData['Recovered'][code] = data['Recovered'];\r\n\t\t\tmapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\r\n\t\t\tmapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\r\n\t\t}\r\n\t\t//console.log(mapGlobalData);\r\n\t\treturn mapGlobalData;\r\n\t}\r\n\t\r\n\trenderMap(category) {\r\n\t\tconst handleClick = (e, code) => {\r\n\t\t\tconst country = this.countryDecodeAssist(code);\r\n\t\t\tif (this.state.countries.includes(country))\r\n\t\t\t\tthis.setState({ selectCountry: country, selectCity: 'Overall'});\r\n\t\t};\r\n\t\t\r\n\t\tconst data = this.state.mapGlobalData;\r\n\t\tconst mapData = data[category];\r\n\t\t//console.log(mapData);\r\n\t\t\r\n\t\tlet minColor = \"#FFFFFF\";\r\n\t\tlet maxColor = cRed;\r\n\t\tif (category == \"Recovered\" || category == \"RecoveryRate\")\r\n\t\t\tmaxColor = cBlue;\r\n\t\t\r\n\t\tlet normFunction = \"polynomial\";\r\n\t\tif (category == \"RecoveryRate\" || category == \"MortalityRate\")\r\n\t\t\tnormFunction = \"linear\";\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<VectorMap\r\n\t\t\t\t\tmap={\"world_mill\"}\r\n\t\t\t\t\tbackgroundColor=\"#000000\"//\"transparent\" //change it to ocean blue: #0077be\r\n\t\t\t\t\tzoomOnScroll={false}\r\n\t\t\t\t\tcontainerStyle={{\r\n\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\theight: \"520px\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionClick={handleClick}\r\n\t\t\t\t\tcontainerClassName=\"map\"\r\n\t\t\t\t\tregionStyle={{\r\n\t\t\t\t\t\tinitial: {\r\n\t\t\t\t\t\t\tfill: \"#A0A0A0\",\r\n\t\t\t\t\t\t\t\"fill-opacity\": 1,\r\n\t\t\t\t\t\t\tstroke: \"white\",\r\n\t\t\t\t\t\t\t\"stroke-width\": 0.2,\r\n\t\t\t\t\t\t\t\"stroke-opacity\": 1\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\thover: {\r\n\t\t\t\t\t\t\t\"fill-opacity\": 0.75,\r\n\t\t\t\t\t\t\tcursor: \"pointer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tselected: {},\r\n\t\t\t\t\t\tselectedHover: {}\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tregionsSelectable={false}\r\n\t\t\t\t\tseries={{\r\n\t\t\t\t\t\tregions: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvalues: mapData, //this is your data\r\n\t\t\t\t\t\t\t\tscale: [minColor, maxColor], //your color game's here\r\n\t\t\t\t\t\t\t\tnormalizeFunction: normFunction\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonRegionTipShow={(event, label, code) => {\r\n\t\t\t\t\t\tlabel.html(\r\n\t\t\t\t\t\t\t'<b><i>'+label.html()+'</i></b></br>'+\r\n\t\t\t\t\t\t\t'Confirmed: '+data['Confirmed'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Hospitalized: '+data['Hospitalized'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Deaths: '+data['Deaths'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovered: '+data['Recovered'][code]+'</br>'+\r\n\t\t\t\t\t\t\t'Recovery rate: '+data['RecoveryRate'][code]+'%'+'</br>'+\r\n\t\t\t\t\t\t\t'Mortality rate: '+data['MortalityRate'][code]+'%'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tconst {\r\n\t\t\thasData, selectCountry, selectCity, fastMode, \r\n\t\t\tdataTimeline, dataTimeline15, data_text, data_pie,\r\n\t\t\tselectCategory\r\n\t\t} = this.state;\r\n\t\t\r\n\t\tif (!hasData)\r\n\t\t\treturn (<h>ERROR: Cannot fetch data</h>);\r\n\t\t\r\n\t\tconst selectedCountryData = this.state.globalData[selectCountry];\r\n\t\tlet cityChoice = [\"Overall\"];\r\n\t\tif (selectedCountryData != undefined && selectedCountryData.CitiesN != 0) {\r\n\t\t\tcityChoice = selectedCountryData.Cities.slice(0);\r\n\t\t\tcityChoice.splice(0,0,\"Overall\");\r\n\t\t}\r\n\t\t\r\n\t\tconst categoryChoice = ['Confirmed', 'Hospitalized', 'Deaths', 'Recovered', 'RecoveryRate', 'MortalityRate'];\r\n\t\tlet rankSuffix = \" cases\";\r\n\t\tif ((selectCategory == 'RecoveryRate') || (selectCategory == 'MortalityRate')) {\r\n\t\t\trankSuffix = \"%\";\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<CssBaseline/>\r\n\t\t\t\t<AppBar style={{background: cDRed}}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Typography variant=\"h4\" className={classes.title} align=\"center\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<div className={classes.appBarSpacer}/>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\r\n\t\t\t\t\t\t{/*-------------------------------- Source Info --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={4}>\r\n\t\t\t\t\t\t\t<MuiThemeProvider theme={darkTheme}>\r\n\t\t\t\t\t\t\t\t<Typography align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\tLast updated: {data_text.updatedDate}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant=\"subtitle2\" align=\"left\" color=\"textPrimary\">\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\thref={data_text.source}\r\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"> {\r\n\t\t\t\t\t\t\t\t\t\tdata_text.source\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</MuiThemeProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Fetch Control --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: '32px',\r\n\t\t\t\t\t\t\t\t\twidth : '128px',\r\n\t\t\t\t\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\t\t\t\t\tcolor: (fastMode ? cDRed : 'blue')\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonClick={() => this.setState({ fastMode: !fastMode })}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<b>{fastMode ? \"FAST MODE\" : \"FULL MODE\"}</b>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<Dropdown options={this.state.countries} value={selectCountry}\r\n\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCountry: select.value, selectCity: 'Overall' })}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t<Dropdown options={cityChoice} value={selectCity}\r\n\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCity:select.value })}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Numbers --------------------------------*/}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'steelblue' }}><b>Confirmed</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cBlue }} variant=\"h3\">{data_text.confirmed.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'steelblue' }} variant=\"h5\">+ {data_text.newConfirmed.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'goldenrod' }}><b>Hospitalized</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cOrange }} variant=\"h3\">{data_text.hospitalized.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'goldenrod' }} variant=\"h5\">\r\n\t\t\t\t\t\t\t\t\t{(data_text.newHospitalized >= 0) ? '+' : '-'} {Math.abs(data_text.newHospitalized).toLocaleString()}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'fireBrick' }}><b>Deaths</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cRed }} variant=\"h3\">{data_text.deaths.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'fireBrick' }} variant=\"h5\">+ {data_text.newDeaths.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6} sm={3}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'green' }}><b>Recovered</b></Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: cGreen }} variant=\"h3\">{data_text.recovered.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography style={{ color: 'green' }} variant=\"h5\">+ {data_text.newRecovered.toLocaleString()}</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Streaks --------------------------------*/}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t{ this.state.hasTimeline && (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\tLast confirmed: {this.state.lastConfirmed} ({this.state.noConfirmedStreak} days ago)\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\tLast death: {this.state.lastDeath} ({this.state.noDeathStreak} days ago)\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Rates --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={ this.state.hasTimeline ? 6 : 12}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<Typography variant='h6' style={{ color: 'green' }}>\r\n\t\t\t\t\t\t\t\t\tRecovery Rate: {this.state.rateRecovery}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant='h6' style={{ color: cDRed }}>\r\n\t\t\t\t\t\t\t\t\tMortality Rate: {this.state.rateDeath}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t{/*-------------------------------- Graphs --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t\t{/*Button to toggle graph display*/}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t{ this.state.hasTimeline && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\theight: '32px',\r\n\t\t\t\t\t\t\t\twidth : '144px',\r\n\t\t\t\t\t\t\t\tfloat: 'right',\r\n\t\t\t\t\t\t\t\tcolor: (this.state.showGraph ? 'grey' : 'steelblue')\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tShow/Hide Graphs\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{ this.state.showGraph && (\t//Whether or not to display graphs\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t{/*Bar, last 14 days*/}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\t\t\t\twidth={500}\r\n\t\t\t\t\t\t\t\t\t\theight={300}\r\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline15}\r\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\"/>\r\n\t\t\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewConfirmed\" fill={cBlue}/>\r\n\t\t\t\t\t\t\t\t\t\t<Bar dataKey=\"NewDeaths\" fill={cRed}/>\r\n\t\t\t\t\t\t\t\t\t</BarChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*Pie, in total*/}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={300}>\r\n\t\t\t\t\t\t\t\t\t<PieChart width={400}\theight={400}>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Pie dataKey=\"value\" isAnimationActive={false} data={data_pie} outerRadius={100} label>\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cOrange} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cRed} />\r\n\t\t\t\t\t\t\t\t\t\t\t<Cell fill={cGreen} />\r\n\t\t\t\t\t\t\t\t\t\t</Pie>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t</PieChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*Bar, in total*/}\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={500}>\r\n\t\t\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\t\t\tdata={dataTimeline}\r\n\t\t\t\t\t\t\t\t\t\tmargin={{top: 5, right: 5, left: 0, bottom: 5 }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\" />\r\n\t\t\t\t\t\t\t\t\t\t<YAxis/>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t\t\t\t\t<Legend/>\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Confirmed\" stroke={cBlue} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Hospitalized\" stroke={cOrange} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Deaths\" stroke={cRed} dot={false} />\r\n\t\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" strokeWidth={2} dataKey=\"Recovered\" stroke={cGreen} dot={false} />\r\n\t\t\t\t\t\t\t\t\t</LineChart>\r\n\t\t\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tstyle={{ height: '32px', width : '144px', float: 'right', color: 'grey' }}\r\n\t\t\t\t\t\tonClick={() => this.setState({ showGraph: !this.state.showGraph })}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tHide Graphs\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\r\n\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Rankings --------------------------------*/}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Grid container spacing={2} justify=\"space-between\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h5' style={{ color: cRed }}>\r\n\t\t\t\t\t\t\t\t\t\t<b>Global Ranking based on:</b>\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Typography variant='h5' style={{ color: cDRed }}>\r\n\t\t\t\t\t\t\t\t\t\t{this.globalRankingHeading(selectCategory)}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<Dropdown options={categoryChoice} value={'Hospitalized'}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(select) => this.setState({ selectCategory: select.value})}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t\t{ (this.state.rankSelect >= 0) && (\r\n\t\t\t\t\t\t\t\t<Grid container spacing={2} direction='column'>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography align='center'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Rank {this.state.rankSelect}. {selectCountry} - {this.state.globalData[selectCountry][selectCategory]}{rankSuffix}</b>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<br/>out of {this.state.countries.length} countries\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant='h6'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Top 10 Countries</b><br/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.rankTopTen.map((c, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<><b>{i+1}.</b> {c.Country} - {c[selectCategory]}{rankSuffix}<br/></>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/*-------------------------------- Map --------------------------------*/}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Grid item xs={9}>\r\n\t\t\t\t\t\t\t{ (this.state.mapGlobalData != null) && (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t{this.renderMap(selectCategory)}\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\r\n\t\t\t\t</Container>\r\n\t\t\t\t\r\n\t\t\t\t{/*-------------------------------- Footer --------------------------------*/}\r\n\t\t\t\t\r\n\t\t\t\t<footer className={classes.footer}>\r\n\t\t\t\t\t<Paper className={classes.paper} style={{background: \"#8F8080\"}}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t<b>COVID-19 Dashboard for Tencent Thailand's Internship Project</b>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography component=\"p\">\r\n\t\t\t\t\t\t\tBy Thanjira S. and Woottipat H.\r\n            </Typography>\r\n          </Paper>\r\n        </footer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}