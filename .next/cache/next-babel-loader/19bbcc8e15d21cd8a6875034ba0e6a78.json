{"ast":null,"code":"export function countryEncodeAssist(country, countriesName) {\n  if (!countriesName.includes(country)) {\n    if (country == \"Bolivia\") country = \"Bolivia, Plurinational State of\";else if (country == \"Brunei\") country = \"Brunei Darussalam\";else if (country == \"Burma\") country = \"Myanmar\";else if (country == \"Congo (Brazzaville)\") country = \"Congo\";else if (country == \"Congo (Kinshasa)\") country = \"Congo, Democratic Republic of the\";else if (country == \"Cote d'Ivoire\") country = \"Côte d'Ivoire\";else if (country == \"Iran\") country = \"Iran, Islamic Republic of\";else if (country == \"Kosovo\") country = \"Serbia\";else if (country == \"Laos\") country = \"Lao People's Democratic Republic\";else if (country == \"Moldova\") country = \"Moldova, Republic of\";else if (country == \"Russia\") country = \"Russian Federation\";else if (country == \"Syria\") country = \"Syrian Arab Republic\";else if (country == \"Taiwan*\") country = \"Taiwan, Province of China\";else if (country == \"Tanzania\") country = \"Tanzania, United Republic of\";else if (country == \"US\") country = \"United States of America\";else if (country == \"United Kingdom\") country = \"United Kingdom of Great Britain and Northern Ireland\";else if (country == \"Venezuela\") country = \"Venezuela, Bolivarian Republic of\";else if (country == \"Vietnam\") country = \"Viet Nam\";else if (country == \"West Bank and Gaza\") country = \"Palestine, State of\";else return undefined;\n  }\n\n  var _require = require('country-list'),\n      getCode = _require.getCode;\n\n  return getCode(country);\n}\nexport function countryDecodeAssist(code) {\n  var _require2 = require('country-list'),\n      getName = _require2.getName,\n      getNames = _require2.getNames;\n\n  var countriesName = getNames();\n  var country = getName(code);\n  if (country == \"Bolivia, Plurinational State of\") country = \"Bolivia\";else if (country == \"Brunei Darussalam\") country = \"Brunei\";else if (country == \"Myanmar\") country = \"Burma\";else if (country == \"Congo\") country = \"Congo (Brazzaville)\";else if (country == \"Congo, Democratic Republic of the\") country = \"Congo (Kinshasa)\";else if (country == \"Côte d'Ivoire\") country = \"Cote d'Ivoire\";else if (country == \"Iran, Islamic Republic of\") country = \"Iran\";else if (country == \"Serbia\") country = \"Kosovo\";else if (country == \"Lao People's Democratic Republic\") country = \"Laos\";else if (country == \"Moldova, Republic of\") country = \"Moldova\";else if (country == \"Russian Federation\") country = \"Russia\";else if (country == \"Syrian Arab Republic\") country = \"Syria\";else if (country == \"Taiwan\") country = \"Taiwan*\";else if (country == \"Tanzania, United Republic of\") country = \"Tanzania\";else if (country == \"United States of America\") country = \"US\";else if (country == \"United Kingdom of Great Britain and Northern Ireland\") country = \"United Kingdom\";else if (country == \"Venezuela, Bolivarian Republic of\") country = \"Venezuela\";else if (country == \"Viet Nam\") country = \"Vietnam\";else if (country == \"Palestine, State of\") country = \"West Bank and Gaza\";\n  return country;\n}\nexport function processMapGlobalData(countries, globalData) {\n  var _require3 = require('country-list'),\n      getCode = _require3.getCode,\n      getNames = _require3.getNames;\n\n  var countriesName = getNames();\n  var mapGlobalData = {\n    Confirmed: {},\n    Hospitalized: {},\n    Deaths: {},\n    Recovered: {},\n    RecoveryRate: {},\n    MortalityRate: {}\n  };\n\n  for (var i = 0; i < countries.length; i++) {\n    var country = countries[i];\n    var data = globalData[country];\n    var code = this.countryEncodeAssist(country, countriesName);\n    if (code == undefined) continue;\n    mapGlobalData['Confirmed'][code] = data['Confirmed'];\n    mapGlobalData['Hospitalized'][code] = data['Hospitalized'];\n    mapGlobalData['Deaths'][code] = data['Deaths'];\n    mapGlobalData['Recovered'][code] = data['Recovered'];\n    mapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\n    mapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\n  } //console.log(mapGlobalData);\n\n\n  return mapGlobalData;\n}","map":{"version":3,"sources":["C:/Users/Herabat/react-js/covid-19-dashboard/components/dataMap.js"],"names":["countryEncodeAssist","country","countriesName","includes","undefined","require","getCode","countryDecodeAssist","code","getName","getNames","processMapGlobalData","countries","globalData","mapGlobalData","Confirmed","Hospitalized","Deaths","Recovered","RecoveryRate","MortalityRate","i","length","data","parseFloat"],"mappings":"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","sourcesContent":["\r\nexport function countryEncodeAssist(country, countriesName) {\r\n\tif (!countriesName.includes(country)) {\r\n\t\tif (country == \"Bolivia\")\r\n\t\t\tcountry = \"Bolivia, Plurinational State of\";\r\n\t\telse if (country == \"Brunei\")\r\n\t\t\tcountry = \"Brunei Darussalam\";\r\n\t\telse if (country == \"Burma\")\r\n\t\t\tcountry = \"Myanmar\";\r\n\t\telse if (country == \"Congo (Brazzaville)\")\r\n\t\t\tcountry = \"Congo\";\r\n\t\telse if (country == \"Congo (Kinshasa)\")\r\n\t\t\tcountry = \"Congo, Democratic Republic of the\";\r\n\t\telse if (country == \"Cote d'Ivoire\")\r\n\t\t\tcountry = \"Côte d'Ivoire\";\r\n\t\telse if (country == \"Iran\")\r\n\t\t\tcountry = \"Iran, Islamic Republic of\";\r\n\t\telse if (country == \"Kosovo\")\r\n\t\t\tcountry = \"Serbia\";\r\n\t\telse if (country == \"Laos\")\r\n\t\t\tcountry = \"Lao People's Democratic Republic\";\r\n\t\telse if (country == \"Moldova\")\r\n\t\t\tcountry = \"Moldova, Republic of\";\r\n\t\telse if (country == \"Russia\")\r\n\t\t\tcountry = \"Russian Federation\";\r\n\t\telse if (country == \"Syria\")\r\n\t\t\tcountry = \"Syrian Arab Republic\";\r\n\t\telse if (country == \"Taiwan*\")\r\n\t\t\tcountry = \"Taiwan, Province of China\";\r\n\t\telse if (country == \"Tanzania\")\r\n\t\t\tcountry = \"Tanzania, United Republic of\";\r\n\t\telse if (country == \"US\")\r\n\t\t\tcountry = \"United States of America\";\r\n\t\telse if (country == \"United Kingdom\")\r\n\t\t\tcountry = \"United Kingdom of Great Britain and Northern Ireland\";\r\n\t\telse if (country == \"Venezuela\")\r\n\t\t\tcountry = \"Venezuela, Bolivarian Republic of\";\r\n\t\telse if (country == \"Vietnam\")\r\n\t\t\tcountry = \"Viet Nam\";\r\n\t\telse if (country == \"West Bank and Gaza\")\r\n\t\t\tcountry = \"Palestine, State of\";\r\n\t\telse return undefined;\r\n\t}\r\n\t\r\n\tconst { getCode } = require('country-list');\r\n\treturn getCode(country);\r\n}\r\n\r\nexport function countryDecodeAssist(code) {\r\n\tconst { getName, getNames } = require('country-list');\r\n\tconst countriesName = getNames();\r\n\tlet country = getName(code);\r\n\t\r\n\tif (country == \"Bolivia, Plurinational State of\")\r\n\t\tcountry = \"Bolivia\";\r\n\telse if (country == \"Brunei Darussalam\")\r\n\t\tcountry = \"Brunei\";\r\n\telse if (country == \"Myanmar\")\r\n\t\tcountry = \"Burma\";\r\n\telse if (country == \"Congo\")\r\n\t\tcountry = \"Congo (Brazzaville)\";\r\n\telse if (country == \"Congo, Democratic Republic of the\")\r\n\t\tcountry = \"Congo (Kinshasa)\";\r\n\telse if (country == \"Côte d'Ivoire\")\r\n\t\tcountry = \"Cote d'Ivoire\";\r\n\telse if (country == \"Iran, Islamic Republic of\")\r\n\t\tcountry = \"Iran\";\r\n\telse if (country == \"Serbia\")\r\n\t\tcountry = \"Kosovo\";\r\n\telse if (country == \"Lao People's Democratic Republic\")\r\n\t\tcountry = \"Laos\";\r\n\telse if (country == \"Moldova, Republic of\")\r\n\t\tcountry = \"Moldova\";\r\n\telse if (country == \"Russian Federation\")\r\n\t\tcountry = \"Russia\";\r\n\telse if (country == \"Syrian Arab Republic\")\r\n\t\tcountry = \"Syria\";\r\n\telse if (country == \"Taiwan\")\r\n\t\tcountry = \"Taiwan*\";\r\n\telse if (country == \"Tanzania, United Republic of\")\r\n\t\tcountry = \"Tanzania\";\r\n\telse if (country == \"United States of America\")\r\n\t\tcountry = \"US\";\r\n\telse if (country == \"United Kingdom of Great Britain and Northern Ireland\")\r\n\t\tcountry = \"United Kingdom\";\r\n\telse if (country == \"Venezuela, Bolivarian Republic of\")\r\n\t\tcountry = \"Venezuela\";\r\n\telse if (country == \"Viet Nam\")\r\n\t\tcountry = \"Vietnam\";\r\n\telse if (country == \"Palestine, State of\")\r\n\t\tcountry = \"West Bank and Gaza\";\r\n\r\n\treturn country;\r\n}\r\n\r\nexport function processMapGlobalData(countries, globalData) {\r\n\tconst { getCode, getNames } = require('country-list');\r\n\tconst countriesName = getNames();\r\n\tconst mapGlobalData = {\r\n\t\tConfirmed: {},\r\n\t\tHospitalized: {},\r\n\t\tDeaths: {},\r\n\t\tRecovered: {},\r\n\t\tRecoveryRate: {},\r\n\t\tMortalityRate: {},\r\n\t};\r\n\r\n\tfor (let i=0; i<countries.length; i++) {\r\n\t\tconst country = countries[i];\r\n\t\tconst data = globalData[country];\r\n\t\t\r\n\t\tconst code = this.countryEncodeAssist(country,countriesName);\r\n\t\tif (code == undefined)\r\n\t\t\tcontinue;\r\n\t\t\r\n\t\tmapGlobalData['Confirmed'][code] = data['Confirmed'];\r\n\t\tmapGlobalData['Hospitalized'][code] = data['Hospitalized'];\r\n\t\tmapGlobalData['Deaths'][code] = data['Deaths'];\r\n\t\tmapGlobalData['Recovered'][code] = data['Recovered'];\r\n\t\tmapGlobalData['RecoveryRate'][code] = parseFloat(data['RecoveryRate']);\r\n\t\tmapGlobalData['MortalityRate'][code] = parseFloat(data['MortalityRate']);\r\n\t}\r\n\t//console.log(mapGlobalData);\r\n\treturn mapGlobalData;\r\n}"]},"metadata":{},"sourceType":"module"}